{"ast":null,"code":"'use strict';\n\nconst promisify = require('promisify-es6');\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\n\nconst LRU = require('lru-cache');\n\nconst lruOptions = {\n  max: 128\n};\nconst cache = LRU(lruOptions);\n\nconst SendOneFile = require('../utils/send-one-file');\n\nconst once = require('once');\n\nmodule.exports = send => {\n  const sendOneFile = SendOneFile(send, 'object/put');\n  return promisify((obj, options, _callback) => {\n    if (typeof options === 'function') {\n      _callback = options;\n      options = {};\n    }\n\n    const callback = once(_callback);\n\n    if (!options) {\n      options = {};\n    }\n\n    let tmpObj = {\n      Data: null,\n      Links: []\n    };\n\n    if (Buffer.isBuffer(obj)) {\n      if (!options.enc) {\n        tmpObj = {\n          Data: obj.toString(),\n          Links: []\n        };\n      }\n    } else if (obj.multihash) {\n      tmpObj = {\n        Data: obj.data.toString(),\n        Links: obj.links.map(l => {\n          const link = l.toJSON();\n          link.hash = link.multihash;\n          return link;\n        })\n      };\n    } else if (typeof obj === 'object') {\n      tmpObj.Data = obj.Data.toString();\n      tmpObj.Links = obj.Links;\n    } else {\n      return callback(new Error('obj not recognized'));\n    }\n\n    let buf;\n\n    if (Buffer.isBuffer(obj) && options.enc) {\n      buf = obj;\n    } else {\n      buf = Buffer.from(JSON.stringify(tmpObj));\n    }\n\n    const enc = options.enc || 'json';\n    const sendOptions = {\n      qs: {\n        inputenc: enc\n      }\n    };\n    sendOneFile(buf, sendOptions, (err, result) => {\n      if (err) {\n        return callback(err); // early\n      }\n\n      if (Buffer.isBuffer(obj)) {\n        if (!options.enc) {\n          obj = {\n            Data: obj,\n            Links: []\n          };\n        } else if (options.enc === 'json') {\n          obj = JSON.parse(obj.toString());\n        }\n      }\n\n      let node;\n\n      if (obj.multihash) {\n        node = obj;\n      } else if (options.enc === 'protobuf') {\n        dagPB.util.deserialize(obj, (err, _node) => {\n          if (err) {\n            return callback(err);\n          }\n\n          node = _node;\n          next();\n        });\n        return;\n      } else {\n        DAGNode.create(Buffer.from(obj.Data), obj.Links, (err, _node) => {\n          if (err) {\n            return callback(err);\n          }\n\n          node = _node;\n          next();\n        });\n        return;\n      }\n\n      next();\n\n      function next() {\n        const nodeJSON = node.toJSON();\n\n        if (nodeJSON.multihash !== result.Hash) {\n          const err = new Error('multihashes do not match');\n          return callback(err);\n        }\n\n        cache.set(result.Hash, node);\n        callback(null, node);\n      }\n    });\n  });\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/ipfs-api/src/object/put.js"],"names":["promisify","require","dagPB","DAGNode","LRU","lruOptions","max","cache","SendOneFile","once","module","exports","send","sendOneFile","obj","options","_callback","callback","tmpObj","Data","Links","Buffer","isBuffer","enc","toString","multihash","data","links","map","l","link","toJSON","hash","Error","buf","from","JSON","stringify","sendOptions","qs","inputenc","err","result","parse","node","util","deserialize","_node","next","create","nodeJSON","Hash","set"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst promisify = require('promisify-es6')\r\nconst dagPB = require('ipld-dag-pb')\r\nconst DAGNode = dagPB.DAGNode\r\nconst LRU = require('lru-cache')\r\nconst lruOptions = {\r\n  max: 128\r\n}\r\n\r\nconst cache = LRU(lruOptions)\r\nconst SendOneFile = require('../utils/send-one-file')\r\nconst once = require('once')\r\n\r\nmodule.exports = (send) => {\r\n  const sendOneFile = SendOneFile(send, 'object/put')\r\n\r\n  return promisify((obj, options, _callback) => {\r\n    if (typeof options === 'function') {\r\n      _callback = options\r\n      options = {}\r\n    }\r\n\r\n    const callback = once(_callback)\r\n\r\n    if (!options) {\r\n      options = {}\r\n    }\r\n\r\n    let tmpObj = {\r\n      Data: null,\r\n      Links: []\r\n    }\r\n\r\n    if (Buffer.isBuffer(obj)) {\r\n      if (!options.enc) {\r\n        tmpObj = {\r\n          Data: obj.toString(),\r\n          Links: []\r\n        }\r\n      }\r\n    } else if (obj.multihash) {\r\n      tmpObj = {\r\n        Data: obj.data.toString(),\r\n        Links: obj.links.map((l) => {\r\n          const link = l.toJSON()\r\n          link.hash = link.multihash\r\n          return link\r\n        })\r\n      }\r\n    } else if (typeof obj === 'object') {\r\n      tmpObj.Data = obj.Data.toString()\r\n      tmpObj.Links = obj.Links\r\n    } else {\r\n      return callback(new Error('obj not recognized'))\r\n    }\r\n\r\n    let buf\r\n    if (Buffer.isBuffer(obj) && options.enc) {\r\n      buf = obj\r\n    } else {\r\n      buf = Buffer.from(JSON.stringify(tmpObj))\r\n    }\r\n    const enc = options.enc || 'json'\r\n\r\n    const sendOptions = {\r\n      qs: { inputenc: enc }\r\n    }\r\n\r\n    sendOneFile(buf, sendOptions, (err, result) => {\r\n      if (err) {\r\n        return callback(err) // early\r\n      }\r\n\r\n      if (Buffer.isBuffer(obj)) {\r\n        if (!options.enc) {\r\n          obj = { Data: obj, Links: [] }\r\n        } else if (options.enc === 'json') {\r\n          obj = JSON.parse(obj.toString())\r\n        }\r\n      }\r\n\r\n      let node\r\n\r\n      if (obj.multihash) {\r\n        node = obj\r\n      } else if (options.enc === 'protobuf') {\r\n        dagPB.util.deserialize(obj, (err, _node) => {\r\n          if (err) {\r\n            return callback(err)\r\n          }\r\n          node = _node\r\n          next()\r\n        })\r\n        return\r\n      } else {\r\n        DAGNode.create(Buffer.from(obj.Data), obj.Links, (err, _node) => {\r\n          if (err) {\r\n            return callback(err)\r\n          }\r\n          node = _node\r\n          next()\r\n        })\r\n        return\r\n      }\r\n      next()\r\n\r\n      function next () {\r\n        const nodeJSON = node.toJSON()\r\n        if (nodeJSON.multihash !== result.Hash) {\r\n          const err = new Error('multihashes do not match')\r\n          return callback(err)\r\n        }\r\n\r\n        cache.set(result.Hash, node)\r\n        callback(null, node)\r\n      }\r\n    })\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
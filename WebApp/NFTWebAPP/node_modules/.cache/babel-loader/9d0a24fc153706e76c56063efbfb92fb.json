{"ast":null,"code":"'use strict';\n\nvar sprintf = require('sprintf-js').sprintf;\n\nvar v6 = require('./constants.js');\n\nfunction groupPossibilities(possibilities) {\n  return sprintf('(%s)', possibilities.join('|'));\n}\n\nfunction padGroup(group) {\n  if (group.length < 4) {\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\n  }\n\n  return group;\n}\n\nfunction simpleRegularExpression(groups) {\n  var zeroIndexes = [];\n  groups.forEach(function (group, i) {\n    var groupInteger = parseInt(group, 16);\n\n    if (groupInteger === 0) {\n      zeroIndexes.push(i);\n    }\n  }); // You can technically elide a single 0, this creates the regular expressions\n  // to match that eventuality\n\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\n    return groups.map(function (group, i) {\n      if (i === zeroIndex) {\n        var elision = i === 0 || i === v6.GROUPS - 1 ? ':' : '';\n        return groupPossibilities([padGroup(group), elision]);\n      }\n\n      return padGroup(group);\n    }).join(':');\n  }); // The simplest case\n\n  possibilities.push(groups.map(padGroup).join(':'));\n  return groupPossibilities(possibilities);\n}\n\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\n  var left = moreLeft ? '' : ':';\n  var right = moreRight ? '' : ':';\n  var possibilities = []; // 1. elision of everything (::)\n\n  if (!moreLeft && !moreRight) {\n    possibilities.push('::');\n  } // 2. complete elision of the middle\n\n\n  if (moreLeft && moreRight) {\n    possibilities.push('');\n  }\n\n  if (moreRight && !moreLeft || !moreRight && moreLeft) {\n    // 3. complete elision of one side\n    possibilities.push(':');\n  } // 4. elision from the left side\n\n\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1)); // 5. elision from the right side\n\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right)); // 6. no elision\n\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1)); // 7. elision (including sloppy elision) from the middle\n\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\n    for (var position = 1; position < elidedGroups - groups; position++) {\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}', position, elidedGroups - position - groups - 1));\n    }\n  }\n\n  return groupPossibilities(possibilities);\n}\n/**\r\n * Generate a regular expression string that can be used to find or validate\r\n * all variations of this address\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {string}\r\n */\n\n\nexports.regularExpressionString = function (optionalSubString) {\n  if (optionalSubString === undefined) {\n    optionalSubString = false;\n  }\n\n  var output = []; // TODO: revisit why this is necessary\n\n  var address6 = new this.constructor(this.correctForm());\n\n  if (address6.elidedGroups === 0) {\n    // The simple case\n    output.push(simpleRegularExpression(address6.parsedAddress));\n  } else if (address6.elidedGroups === v6.GROUPS) {\n    // A completely elided address\n    output.push(possibleElisions(v6.GROUPS));\n  } else {\n    // A partially elided address\n    var halves = address6.address.split('::');\n\n    if (halves[0].length) {\n      output.push(simpleRegularExpression(halves[0].split(':')));\n    }\n\n    output.push(possibleElisions(address6.elidedGroups, halves[0].length !== 0, halves[1].length !== 0));\n\n    if (halves[1].length) {\n      output.push(simpleRegularExpression(halves[1].split(':')));\n    }\n\n    output = [output.join(':')];\n  }\n\n  if (!optionalSubString) {\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\n  }\n\n  return output.join('');\n};\n/**\r\n * Generate a regular expression that can be used to find or validate all\r\n * variations of this address.\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {RegExp}\r\n */\n\n\nexports.regularExpression = function (optionalSubstring) {\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/ip-address/lib/v6/regular-expressions.js"],"names":["sprintf","require","v6","groupPossibilities","possibilities","join","padGroup","group","length","simpleRegularExpression","groups","zeroIndexes","forEach","i","groupInteger","parseInt","push","map","zeroIndex","elision","GROUPS","possibleElisions","elidedGroups","moreLeft","moreRight","left","right","position","exports","regularExpressionString","optionalSubString","undefined","output","address6","constructor","correctForm","parsedAddress","halves","address","split","concat","regularExpression","optionalSubstring","RegExp"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar sprintf = require('sprintf-js').sprintf;\r\n\r\nvar v6 = require('./constants.js');\r\n\r\nfunction groupPossibilities(possibilities) {\r\n  return sprintf('(%s)', possibilities.join('|'));\r\n}\r\n\r\nfunction padGroup(group) {\r\n  if (group.length < 4) {\r\n    return sprintf('0{0,%d}%s', 4 - group.length, group);\r\n  }\r\n\r\n  return group;\r\n}\r\n\r\nfunction simpleRegularExpression(groups) {\r\n  var zeroIndexes = [];\r\n\r\n  groups.forEach(function (group, i) {\r\n    var groupInteger = parseInt(group, 16);\r\n\r\n    if (groupInteger === 0) {\r\n      zeroIndexes.push(i);\r\n    }\r\n  });\r\n\r\n  // You can technically elide a single 0, this creates the regular expressions\r\n  // to match that eventuality\r\n  var possibilities = zeroIndexes.map(function (zeroIndex) {\r\n    return groups.map(function (group, i) {\r\n      if (i === zeroIndex) {\r\n        var elision = (i === 0 || i === v6.GROUPS - 1) ? ':' : '';\r\n\r\n        return groupPossibilities([padGroup(group), elision]);\r\n      }\r\n\r\n      return padGroup(group);\r\n    }).join(':');\r\n  });\r\n\r\n  // The simplest case\r\n  possibilities.push(groups.map(padGroup).join(':'));\r\n\r\n  return groupPossibilities(possibilities);\r\n}\r\n\r\nfunction possibleElisions(elidedGroups, moreLeft, moreRight) {\r\n  var left = moreLeft ? '' : ':';\r\n  var right = moreRight ? '' : ':';\r\n\r\n  var possibilities = [];\r\n\r\n  // 1. elision of everything (::)\r\n  if (!moreLeft && !moreRight) {\r\n    possibilities.push('::');\r\n  }\r\n\r\n  // 2. complete elision of the middle\r\n  if (moreLeft && moreRight) {\r\n    possibilities.push('');\r\n  }\r\n\r\n  if ((moreRight && !moreLeft) || (!moreRight && moreLeft)) {\r\n    // 3. complete elision of one side\r\n    possibilities.push(':');\r\n  }\r\n\r\n  // 4. elision from the left side\r\n  possibilities.push(sprintf('%s(:0{1,4}){1,%d}', left, elidedGroups - 1));\r\n\r\n  // 5. elision from the right side\r\n  possibilities.push(sprintf('(0{1,4}:){1,%d}%s', elidedGroups - 1, right));\r\n\r\n  // 6. no elision\r\n  possibilities.push(sprintf('(0{1,4}:){%d}0{1,4}', elidedGroups - 1));\r\n\r\n  // 7. elision (including sloppy elision) from the middle\r\n  for (var groups = 1; groups < elidedGroups - 1; groups++) {\r\n    for (var position = 1; position < elidedGroups - groups; position++) {\r\n      possibilities.push(sprintf('(0{1,4}:){%d}:(0{1,4}:){%d}0{1,4}',\r\n                                 position,\r\n                                 elidedGroups - position - groups - 1));\r\n    }\r\n  }\r\n\r\n  return groupPossibilities(possibilities);\r\n}\r\n\r\n/**\r\n * Generate a regular expression string that can be used to find or validate\r\n * all variations of this address\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {string}\r\n */\r\nexports.regularExpressionString = function (optionalSubString) {\r\n  if (optionalSubString === undefined) {\r\n    optionalSubString = false;\r\n  }\r\n\r\n  var output = [];\r\n\r\n  // TODO: revisit why this is necessary\r\n  var address6 = new this.constructor(this.correctForm());\r\n\r\n  if (address6.elidedGroups === 0) {\r\n    // The simple case\r\n    output.push(simpleRegularExpression(address6.parsedAddress));\r\n  } else if (address6.elidedGroups === v6.GROUPS) {\r\n    // A completely elided address\r\n    output.push(possibleElisions(v6.GROUPS));\r\n  } else {\r\n    // A partially elided address\r\n    var halves = address6.address.split('::');\r\n\r\n    if (halves[0].length) {\r\n      output.push(simpleRegularExpression(halves[0].split(':')));\r\n    }\r\n\r\n    output.push(possibleElisions(address6.elidedGroups,\r\n                         halves[0].length !== 0,\r\n                         halves[1].length !== 0));\r\n\r\n    if (halves[1].length) {\r\n      output.push(simpleRegularExpression(halves[1].split(':')));\r\n    }\r\n\r\n    output = [output.join(':')];\r\n  }\r\n\r\n  if (!optionalSubString) {\r\n    output = [].concat('(?=^|\\\\b|[^\\\\w\\\\:])(', output, ')(?=[^\\\\w\\\\:]|\\\\b|$)');\r\n  }\r\n\r\n  return output.join('');\r\n};\r\n\r\n/**\r\n * Generate a regular expression that can be used to find or validate all\r\n * variations of this address.\r\n * @memberof Address6\r\n * @instance\r\n * @param {string} optionalSubString\r\n * @returns {RegExp}\r\n */\r\nexports.regularExpression = function (optionalSubstring) {\r\n  return new RegExp(this.regularExpressionString(optionalSubstring), 'i');\r\n};\r\n"]},"metadata":{},"sourceType":"script"}
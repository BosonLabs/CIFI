{"ast":null,"code":"'use strict';\n\nconst base58 = require('bs58');\n\nconst multihash = require('multihashes');\n\nconst multibase = require('multibase');\n\nconst CID = require('cids');\n\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/;\nconst defaultProtocolMatch = 1;\nconst defaultHashMath = 4;\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/;\nconst fqdnHashMatch = 1;\nconst fqdnProtocolMatch = 2;\n\nfunction isMultihash(hash) {\n  const formatted = convertToString(hash);\n\n  try {\n    const buffer = Buffer.from(base58.decode(formatted));\n    multihash.decode(buffer);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isMultibase(hash) {\n  try {\n    return multibase.isEncoded(hash);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isCID(hash) {\n  try {\n    return CID.isCID(new CID(hash));\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction isIpfs(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipfs') {\n    return false;\n  }\n\n  let hash = match[hashMatch];\n\n  if (hash && pattern === fqdnPattern) {\n    // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n    hash = hash.toLowerCase();\n  }\n\n  return isCID(hash);\n}\n\nfunction isIpns(input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\n  const formatted = convertToString(input);\n\n  if (!formatted) {\n    return false;\n  }\n\n  const match = formatted.match(pattern);\n\n  if (!match) {\n    return false;\n  }\n\n  if (match[protocolMatch] !== 'ipns') {\n    return false;\n  }\n\n  if (hashMatch && pattern === fqdnPattern) {\n    let hash = match[hashMatch]; // when doing checks for subdomain context\n    // ensure hash is case-insensitive\n    // (browsers force-lowercase authority compotent anyway)\n\n    hash = hash.toLowerCase();\n    return isCID(hash);\n  }\n\n  return true;\n}\n\nfunction convertToString(input) {\n  if (Buffer.isBuffer(input)) {\n    return base58.encode(input);\n  }\n\n  if (typeof input === 'string') {\n    return input;\n  }\n\n  return false;\n}\n\nconst ipfsSubdomain = url => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nconst ipnsSubdomain = url => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch);\n\nmodule.exports = {\n  multihash: isMultihash,\n  cid: isCID,\n  base32cid: cid => isMultibase(cid) === 'base32' && isCID(cid),\n  ipfsSubdomain: ipfsSubdomain,\n  ipnsSubdomain: ipnsSubdomain,\n  subdomain: url => ipfsSubdomain(url) || ipnsSubdomain(url),\n  subdomainPattern: fqdnPattern,\n  ipfsUrl: url => isIpfs(url, urlPattern),\n  ipnsUrl: url => isIpns(url, urlPattern),\n  url: url => isIpfs(url, urlPattern) || isIpns(url, urlPattern),\n  urlPattern: urlPattern,\n  ipfsPath: path => isIpfs(path, pathPattern),\n  ipnsPath: path => isIpns(path, pathPattern),\n  path: path => isIpfs(path, pathPattern) || isIpns(path, pathPattern),\n  pathPattern: pathPattern,\n  urlOrPath: x => isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern)\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/is-ipfs/src/index.js"],"names":["base58","require","multihash","multibase","CID","urlPattern","pathPattern","defaultProtocolMatch","defaultHashMath","fqdnPattern","fqdnHashMatch","fqdnProtocolMatch","isMultihash","hash","formatted","convertToString","buffer","Buffer","from","decode","e","isMultibase","isEncoded","isCID","isIpfs","input","pattern","protocolMatch","hashMatch","match","toLowerCase","isIpns","isBuffer","encode","ipfsSubdomain","url","ipnsSubdomain","module","exports","cid","base32cid","subdomain","subdomainPattern","ipfsUrl","ipnsUrl","ipfsPath","path","ipnsPath","urlOrPath","x"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst base58 = require('bs58')\r\nconst multihash = require('multihashes')\r\nconst multibase = require('multibase')\r\nconst CID = require('cids')\r\n\r\nconst urlPattern = /^https?:\\/\\/[^/]+\\/(ip(f|n)s)\\/((\\w+).*)/\r\nconst pathPattern = /^\\/(ip(f|n)s)\\/((\\w+).*)/\r\nconst defaultProtocolMatch = 1\r\nconst defaultHashMath = 4\r\n\r\nconst fqdnPattern = /^https?:\\/\\/([^/]+)\\.(ip(?:f|n)s)\\.[^/]+/\r\nconst fqdnHashMatch = 1\r\nconst fqdnProtocolMatch = 2\r\n\r\nfunction isMultihash (hash) {\r\n  const formatted = convertToString(hash)\r\n  try {\r\n    const buffer = Buffer.from(base58.decode(formatted))\r\n    multihash.decode(buffer)\r\n    return true\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction isMultibase (hash) {\r\n  try {\r\n    return multibase.isEncoded(hash)\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction isCID (hash) {\r\n  try {\r\n    return CID.isCID(new CID(hash))\r\n  } catch (e) {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction isIpfs (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch = defaultHashMath) {\r\n  const formatted = convertToString(input)\r\n  if (!formatted) {\r\n    return false\r\n  }\r\n\r\n  const match = formatted.match(pattern)\r\n  if (!match) {\r\n    return false\r\n  }\r\n\r\n  if (match[protocolMatch] !== 'ipfs') {\r\n    return false\r\n  }\r\n\r\n  let hash = match[hashMatch]\r\n\r\n  if (hash && pattern === fqdnPattern) {\r\n    // when doing checks for subdomain context\r\n    // ensure hash is case-insensitive\r\n    // (browsers force-lowercase authority compotent anyway)\r\n    hash = hash.toLowerCase()\r\n  }\r\n\r\n  return isCID(hash)\r\n}\r\n\r\nfunction isIpns (input, pattern, protocolMatch = defaultProtocolMatch, hashMatch) {\r\n  const formatted = convertToString(input)\r\n  if (!formatted) {\r\n    return false\r\n  }\r\n  const match = formatted.match(pattern)\r\n  if (!match) {\r\n    return false\r\n  }\r\n\r\n  if (match[protocolMatch] !== 'ipns') {\r\n    return false\r\n  }\r\n\r\n  if (hashMatch && pattern === fqdnPattern) {\r\n    let hash = match[hashMatch]\r\n    // when doing checks for subdomain context\r\n    // ensure hash is case-insensitive\r\n    // (browsers force-lowercase authority compotent anyway)\r\n    hash = hash.toLowerCase()\r\n    return isCID(hash)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction convertToString (input) {\r\n  if (Buffer.isBuffer(input)) {\r\n    return base58.encode(input)\r\n  }\r\n\r\n  if (typeof input === 'string') {\r\n    return input\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nconst ipfsSubdomain = (url) => isIpfs(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\r\nconst ipnsSubdomain = (url) => isIpns(url, fqdnPattern, fqdnProtocolMatch, fqdnHashMatch)\r\n\r\nmodule.exports = {\r\n  multihash: isMultihash,\r\n  cid: isCID,\r\n  base32cid: (cid) => (isMultibase(cid) === 'base32' && isCID(cid)),\r\n  ipfsSubdomain: ipfsSubdomain,\r\n  ipnsSubdomain: ipnsSubdomain,\r\n  subdomain: (url) => (ipfsSubdomain(url) || ipnsSubdomain(url)),\r\n  subdomainPattern: fqdnPattern,\r\n  ipfsUrl: (url) => isIpfs(url, urlPattern),\r\n  ipnsUrl: (url) => isIpns(url, urlPattern),\r\n  url: (url) => (isIpfs(url, urlPattern) || isIpns(url, urlPattern)),\r\n  urlPattern: urlPattern,\r\n  ipfsPath: (path) => isIpfs(path, pathPattern),\r\n  ipnsPath: (path) => isIpns(path, pathPattern),\r\n  path: (path) => (isIpfs(path, pathPattern) || isIpns(path, pathPattern)),\r\n  pathPattern: pathPattern,\r\n  urlOrPath: (x) => (isIpfs(x, urlPattern) || isIpns(x, urlPattern) || isIpfs(x, pathPattern) || isIpns(x, pathPattern))\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
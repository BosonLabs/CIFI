{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTransfer.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport fireDb from \"./firebase\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTransfer = () => {\n  _s();\n\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]);\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      //console.log(`absalgos`, a)\n      Object.keys(a).map(b => {\n        //console.log(`bbb`, a[b].txnId)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic,\n          addprice: a[b].price,\n          addkeyId: a[b].keyId,\n          addstatus: a[b].status\n        });\n      });\n    });\n    setgetAlgoss(req2); //console.log(\"cfbsalgo\",req) \n    // setLoader(false)\n    // setLoading(false)\n  }; //start transfer\n\n\n  const TransferAsset = async a => {\n    alert(\"transferasset\");\n    console.log(\"buytx\", a.addtxid);\n    console.log(\"buytx\", a.addalgocreator);\n    console.log(\"buytx\", a.addprice);\n\n    const algosdk = require('algosdk');\n\n    var account1_mnemonic = a.addmnemonic; //const checb1=()=>{\n\n    let signedTx;\n    let tx;\n    let txParams;\n    AlgoSigner.connect().then(d => {\n      console.log(\"conn\", d);\n      let accounts;\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        console.log(\"accounts\", d);\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          console.log(\"txparms\", d);\n          AlgoSigner.sign({\n            from: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n            to: a.addalgocreator,\n            amount: +a.addprice,\n            note: undefined,\n            type: 'pay',\n            fee: txParams['min-fee'],\n            firstRound: txParams['last-round'],\n            lastRound: txParams['last-round'] + 1000,\n            genesisID: txParams['genesis-id'],\n            genesisHash: txParams['genesis-hash'],\n            flatFee: true\n          }).then(d => {\n            signedTx = d;\n            console.log(\"signedtx\", d);\n            AlgoSigner.send({\n              ledger: 'TestNet',\n              tx: signedTx.blob\n            }).then(d => {\n              tx = d;\n              console.log(\"tx\", d); //cut start\n              //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n              //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n              //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n\n              var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n              var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic); //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n\n              var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic); //alert(arr[0]);\n              // var recoveredAccount1 = arr[0];\n              // var recoveredAccount2 = arr[0];\n              // var recoveredAccount3 = arr[0];\n\n              console.log(recoveredAccount3.addr);\n              const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n              const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n              const token = {\n                'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n              };\n              let algodclient = new algosdk.Algodv2(token, baseServer, port);\n              console.log(\"algodclient\", algodclient); // Function used to wait for a tx confirmation\n\n              const waitForConfirmation = async function (algodclient, txId) {\n                const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n                const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n                const token = {\n                  'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n                };\n                let algodclients = new algosdk.Algodv2(token, baseServer, port);\n                console.log(\"working return 133\", txId);\n                console.log(\"working\" + algodclients);\n                let response = await algodclients.status().do();\n                console.log(\"response\", response);\n                let lastround = response[\"last-round\"];\n\n                while (true) {\n                  const pendingInfo = await algodclients.pendingTransactionInformation(txId).do();\n\n                  if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n                    //Got the completed Transaction\n                    console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n                    break;\n                  }\n\n                  lastround++;\n                  await algodclients.statusAfterBlock(lastround).do();\n                }\n              }; // Function used to print created asset for account and assetid\n\n\n              const printCreatedAsset = async function (algodclient, account, assetid) {\n                // note: if you have an indexer instance available it is easier to just use this\n                //     let accountInfo = await indexerClient.searchAccounts()\n                //    .assetID(assetIndex).do();\n                // and in the loop below use this to extract the asset for a particular account\n                // accountInfo['accounts'][idx][account]);\n                let accountInfo = await algodclient.accountInformation(account).do();\n\n                for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n                  let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n                  if (scrutinizedAsset['index'] === assetid) {\n                    console.log(\"AssetID = \" + scrutinizedAsset['index']);\n                    let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n                    console.log(\"parms = \" + myparms);\n                    break;\n                  }\n                }\n              }; // Function used to print asset holding for account and assetid\n\n\n              const printAssetHolding = async function (algodclient, account, assetid) {\n                // note: if you have an indexer instance available it is easier to just use this\n                //     let accountInfo = await indexerClient.searchAccounts()\n                //    .assetID(assetIndex).do();\n                // and in the loop below use this to extract the asset for a particular account\n                // accountInfo['accounts'][idx][account]);\n                let accountInfo = await algodclient.accountInformation(account).do();\n\n                for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n                  let scrutinizedAsset = accountInfo['assets'][idx];\n\n                  if (scrutinizedAsset['asset-id'] === assetid) {\n                    let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n                    console.log(\"assetholdinginfo = \" + myassetholding);\n                    break;\n                  }\n                }\n              };\n\n              (async () => {\n                let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true;\n                console.log(params);\n                let note = undefined;\n                let assetID = null;\n                console.log(\"working198\");\n                console.log(\"beforealgoclient\", algodclient);\n                console.log(a.addtxid);\n                await waitForConfirmation(algodclient, a.addtxid); // Get the new asset's information from the creator account\n\n                let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\n                assetID = ptx[\"asset-index\"];\n                await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n                await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n                console.log(\"working178\"); //this below is transfer usefull function\n                // Opting in to an Asset:\n                // Opting in to transact with the new asset\n                // Allow accounts that want recieve the new asset\n                // Have to opt in. To do this they send an asset transfer\n                // of the new asset to themseleves \n                // In this example we are setting up the 3rd recovered account to \n                // receive the new asset\n                // First update changing transaction parameters\n                // We will account for changing transaction parameters\n                // before every transaction in this example\n                //cmd now\n\n                params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true;\n                let sender = recoveredAccount3.addr;\n                let recipient = sender; // We set revocationTarget to undefined as \n                // This is not a clawback operation\n\n                let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n                // we are not closing out an asset\n\n                let closeRemainderTo = undefined; // We are sending 0 assets\n\n                let amount = 0; //let note=undefined;\n                //assetID='15940921';\n\n                console.log(\"working211\"); // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n                let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n                let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n                let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n                console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n                await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n                console.log(\"Account3\" + recoveredAccount3.addr);\n                await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n                console.log(\"working 227\"); //     // Transfer New Asset:\n                //     // Now that account3 can recieve the new tokens \n                //     // we can tranfer tokens in from the creator\n                //     // to account3\n                //     // First update changing transaction parameters\n                //     // We will account for changing transaction parameters\n                //     // before every transaction in this example\n                //cmd now\n\n                params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true;\n                sender = recoveredAccount1.addr;\n                recipient = recoveredAccount3.addr;\n                revocationTarget = undefined;\n                closeRemainderTo = undefined; //Amount of the asset to transfer\n\n                amount = 1000; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n                let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n                rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n                let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n                console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n                await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n                console.log(\"Account 3 = \" + recoveredAccount3.addr);\n                await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n              })().catch(e => {\n                console.log(e);\n                console.trace();\n              }); //cut stop\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  }; //end transfer\n  //end buyers print in algo\n\n\n  const chec = async () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    }; //let algodclient = new algosdk.Algodv2(token, baseServer, port);  \n\n    await AlgoSigner.connect(); // Create an Algod client to get suggested transaction params\n\n    let client = new algosdk.Algodv2(token, baseServer, port);\n    let suggestedParams = await client.getTransactionParams().do();\n    console.log(\"try1\", suggestedParams); // Use the JS SDK to build a Transaction\n\n    let sdkTx = new algosdk.Transaction({\n      to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n      from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n      amount: 10000,\n      suggestedParams\n    });\n    console.log(\"try2\", sdkTx); // Get the binary and base64 encode it\n\n    let binaryTx = sdkTx.toByte();\n    let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\n    console.log(\"try3\", base64Tx);\n    console.log(\"try4\", binaryTx); //open algo signer below\n\n    let txn;\n    let signedTxs = await AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]);\n    console.log(\"txn\", txn); // The AlgoSigner.signTxn() response would look like '[{ txID, blob }, null]'\n    // Convert first transaction to binary from the response\n    //let signedTx1Binary = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n    // Sign leftover transaction with the SDK\n    //let externalAccount = algosdk.mnemonicToSecretKey('EXTERNAL_ACCOUNT_MNEMONIC');\n    //let signedTx2Binary = txn.signTxn(externalAccount.sk);\n    //await client.sendRawTransaction([signedTx1Binary, signedTx2Binary]).do();\n    // Merge transaction binaries into a single Uint8Array\n    // let combinedBinaryTxns = new Uint8Array(signedTx1Binary.byteLength + signedTx2Binary.byteLength);\n    // combinedBinaryTxns.set(signedTx1Binary, 0);\n    // combinedBinaryTxns.set(signedTx2Binary, signedTx1Binary.byteLength);\n    // // Convert the combined array values back to base64\n    // let combinedBase64Txns = AlgoSigner.encoding.msgpackToBase64(combinedBinaryTxns);\n    // await AlgoSigner.send({\n    //   ledger: 'TestNet',\n    //   tx: combinedBase64Txns,\n    // });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 427,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 1\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addprice), a.addstatus === '' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => TransferAsset(a),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 2\n      }\n    }, \"BuyNow\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 7\n      }\n    }, \"Already Sold\")))));\n  })));\n};\n\n_s(AlgoTransfer, \"GlqAclrlVn7tzX4Nrn2l1ZV6su0=\");\n\n_c = AlgoTransfer;\nexport default AlgoTransfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTransfer\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTransfer.js"],"names":["firebase","fireDb","React","useState","useEffect","useCallback","AlgoTransfer","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","a","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","addprice","price","addkeyId","keyId","addstatus","status","TransferAsset","alert","console","log","algosdk","require","account1_mnemonic","signedTx","tx","txParams","AlgoSigner","connect","then","accounts","ledger","algod","path","sign","from","to","amount","note","undefined","type","fee","firstRound","lastRound","genesisID","genesisHash","flatFee","send","blob","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount3","addr","baseServer","port","token","algodclient","Algodv2","waitForConfirmation","txId","algodclients","response","do","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","JSON","stringify","printAssetHolding","myassetholding","params","getTransactionParams","assetID","ptx","sender","recipient","revocationTarget","closeRemainderTo","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","catch","e","trace","error","chec","client","suggestedParams","sdkTx","Transaction","binaryTx","toByte","base64Tx","encoding","msgpackToBase64","txn","signedTxs","backgroundColor","display","flexWrap","height","width","border","borderRadius","color"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,WAAnC,QAAsD,OAAtD;;AACA,MAAMC,YAAY,GAAC,MAAI;AAAA;;AAEvB,QAAK,CAACC,QAAD,EAAUC,WAAV,IAAuBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAK,CAACM,SAAD,EAAWC,YAAX,IAAyBP,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMQ,OAAO,GAAG,YAAU;AACtB;AACA;AACA;AACA,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,IAAI,GAAG,EAAX,CALsB,CAKR;;AACdb,IAAAA,QAAQ,CAACc,QAAT,GAAoBC,GAApB,CAAwB,cAAxB,EAAwCC,EAAxC,CAA2C,OAA3C,EAAqDC,IAAD,IAAU;AAC5D,UAAIA,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACC,OAAL,CAAcC,CAAD,IAAO;AAClB;AACAP,UAAAA,GAAG,CAACQ,IAAJ,CAASD,CAAC,CAACE,GAAF,EAAT;AACD,SAHD;AAID;AACF,KAPD;AAQAb,IAAAA,WAAW,CAACI,GAAD,CAAX;AAEAL,IAAAA,QAAQ,CAACe,GAAT,CAAcC,CAAD,IAAK;AAChB;AAEAC,MAAAA,MAAM,CAACC,IAAP,CAAYF,CAAZ,EAAeD,GAAf,CAAoBI,CAAD,IAAK;AACxB;AACEb,QAAAA,IAAI,CAACO,IAAL,CAAU;AACR;AACNO,UAAAA,OAAO,EAACJ,CAAC,CAACG,CAAD,CAAD,CAAKE,KAFC;AAGdC,UAAAA,UAAU,EAACN,CAAC,CAACG,CAAD,CAAD,CAAKI,MAHF;AAIdC,UAAAA,WAAW,EAACR,CAAC,CAACG,CAAD,CAAD,CAAKM,QAJH;AAKdC,UAAAA,aAAa,EAACV,CAAC,CAACG,CAAD,CAAD,CAAKQ,UALL;AAMdC,UAAAA,cAAc,EAACZ,CAAC,CAACG,CAAD,CAAD,CAAKU,WANN;AAOdC,UAAAA,WAAW,EAACd,CAAC,CAACG,CAAD,CAAD,CAAKY,cAPH;AAQdC,UAAAA,QAAQ,EAAChB,CAAC,CAACG,CAAD,CAAD,CAAKc,KARA;AASdC,UAAAA,QAAQ,EAAClB,CAAC,CAACG,CAAD,CAAD,CAAKgB,KATA;AAUdC,UAAAA,SAAS,EAACpB,CAAC,CAACG,CAAD,CAAD,CAAKkB;AAVD,SAAV;AAaD,OAfD;AAgBD,KAnBD;AAoBAlC,IAAAA,YAAY,CAACG,IAAD,CAAZ,CApCsB,CAqCtB;AACA;AACA;AACD,GAxCH,CALuB,CA+CrB;;;AAEA,QAAMgC,aAAa,GAAC,MAAMtB,CAAN,IAAU;AAC5BuB,IAAAA,KAAK,CAAC,eAAD,CAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBzB,CAAC,CAACI,OAAtB;AACAoB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBzB,CAAC,CAACY,cAAtB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBzB,CAAC,CAACgB,QAAtB;;AACE,UAAMU,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,QAAIC,iBAAiB,GAAC5B,CAAC,CAACc,WAAxB,CAN0B,CAQ1B;;AACE,QAAIe,QAAJ;AACA,QAAIC,EAAJ;AACA,QAAIC,QAAJ;AAEAC,IAAAA,UAAU,CAACC,OAAX,GACDC,IADC,CACKtC,CAAD,IAAO;AACX4B,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmB7B,CAAnB;AACA,UAAIuC,QAAJ;AACAH,MAAAA,UAAU,CAACG,QAAX,CAAoB;AAClBC,QAAAA,MAAM,EAAE;AADU,OAApB,EAGCF,IAHD,CAGOtC,CAAD,IAAO;AACXuC,QAAAA,QAAQ,GAAGvC,CAAX;AACA4B,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB7B,CAAvB;AACAoC,QAAAA,UAAU,CAACK,KAAX,CAAiB;AACfD,UAAAA,MAAM,EAAE,SADO;AAEfE,UAAAA,IAAI,EAAE;AAFS,SAAjB,EAICJ,IAJD,CAIOtC,CAAD,IAAO;AACXmC,UAAAA,QAAQ,GAAGnC,CAAX;AACA4B,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsB7B,CAAtB;AACAoC,UAAAA,UAAU,CAACO,IAAX,CAAgB;AACdC,YAAAA,IAAI,EAAE,4DADQ;AAEdC,YAAAA,EAAE,EAAEzC,CAAC,CAACY,cAFQ;AAGd8B,YAAAA,MAAM,EAAE,CAAC1C,CAAC,CAACgB,QAHG;AAId2B,YAAAA,IAAI,EAAEC,SAJQ;AAKdC,YAAAA,IAAI,EAAE,KALQ;AAMdC,YAAAA,GAAG,EAAEf,QAAQ,CAAC,SAAD,CANC;AAOdgB,YAAAA,UAAU,EAAEhB,QAAQ,CAAC,YAAD,CAPN;AAQdiB,YAAAA,SAAS,EAAEjB,QAAQ,CAAC,YAAD,CAAR,GAAyB,IARtB;AASdkB,YAAAA,SAAS,EAAElB,QAAQ,CAAC,YAAD,CATL;AAUdmB,YAAAA,WAAW,EAAEnB,QAAQ,CAAC,cAAD,CAVP;AAWdoB,YAAAA,OAAO,EAAE;AAXK,WAAhB,EAaCjB,IAbD,CAaOtC,CAAD,IAAO;AACXiC,YAAAA,QAAQ,GAAGjC,CAAX;AACA4B,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB7B,CAAvB;AACAoC,YAAAA,UAAU,CAACoB,IAAX,CAAgB;AACdhB,cAAAA,MAAM,EAAE,SADM;AAEdN,cAAAA,EAAE,EAAED,QAAQ,CAACwB;AAFC,aAAhB,EAICnB,IAJD,CAIOtC,CAAD,IAAO;AACXkC,cAAAA,EAAE,GAAGlC,CAAL;AACA4B,cAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiB7B,CAAjB,EAFW,CAKX;AAEC;AACT;AACA;;AACA,kBAAI0D,iBAAiB,GAAG,iKAAxB;AACA,kBAAIC,iBAAiB,GAAG7B,OAAO,CAAC8B,mBAAR,CAA4B5B,iBAA5B,CAAxB,CAXmB,CAYnB;;AACA,kBAAI6B,iBAAiB,GAAG/B,OAAO,CAAC8B,mBAAR,CAA4BF,iBAA5B,CAAxB,CAbmB,CAcnB;AACA;AACA;AACA;;AACA9B,cAAAA,OAAO,CAACC,GAAR,CAAYgC,iBAAiB,CAACC,IAA9B;AACA,oBAAMC,UAAU,GAAG,+CAAnB;AACA,oBAAMC,IAAI,GAAG,EAAb,CApBmB,CAqBnB;;AACA,oBAAMC,KAAK,GAAG;AAEV,6BAAc;AAFJ,eAAd;AAIA,kBAAIC,WAAW,GAAG,IAAIpC,OAAO,CAACqC,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCC,IAAvC,CAAlB;AACApC,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BqC,WAA1B,EA3BmB,CA4BrB;;AACA,oBAAME,mBAAmB,GAAG,gBAAgBF,WAAhB,EAA6BG,IAA7B,EAAmC;AAC7D,sBAAMN,UAAU,GAAG,+CAAnB;AACA,sBAAMC,IAAI,GAAG,EAAb,CAF6D,CAG7D;;AACA,sBAAMC,KAAK,GAAG;AAEV,+BAAc;AAFJ,iBAAd;AAIA,oBAAIK,YAAY,GAAG,IAAIxC,OAAO,CAACqC,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCC,IAAvC,CAAnB;AACEpC,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAiCwC,IAAjC;AACFzC,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAUyC,YAAtB;AACE,oBAAIC,QAAQ,GAAG,MAAMD,YAAY,CAAC7C,MAAb,GAAsB+C,EAAtB,EAArB;AACA5C,gBAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuB0C,QAAvB;AACA,oBAAIE,SAAS,GAAGF,QAAQ,CAAC,YAAD,CAAxB;;AACA,uBAAO,IAAP,EAAa;AACT,wBAAMG,WAAW,GAAG,MAAMJ,YAAY,CAACK,6BAAb,CAA2CN,IAA3C,EAAiDG,EAAjD,EAA1B;;AACA,sBAAIE,WAAW,CAAC,iBAAD,CAAX,KAAmC,IAAnC,IAA2CA,WAAW,CAAC,iBAAD,CAAX,GAAiC,CAAhF,EAAmF;AAC/E;AACA9C,oBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBwC,IAAjB,GAAwB,sBAAxB,GAAiDK,WAAW,CAAC,iBAAD,CAAxE;AACA;AACH;;AACDD,kBAAAA,SAAS;AACT,wBAAMH,YAAY,CAACM,gBAAb,CAA8BH,SAA9B,EAAyCD,EAAzC,EAAN;AACH;AACJ,eAxBD,CA7BqB,CAuDrB;;;AACA,oBAAMK,iBAAiB,GAAG,gBAAgBX,WAAhB,EAA6BY,OAA7B,EAAsCC,OAAtC,EAA+C;AACrE;AACA;AACA;AACA;AACA;AACA,oBAAIC,WAAW,GAAG,MAAMd,WAAW,CAACe,kBAAZ,CAA+BH,OAA/B,EAAwCN,EAAxC,EAAxB;;AACA,qBAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,WAAW,CAAC,gBAAD,CAAX,CAA8BG,MAAtD,EAA8DD,GAAG,EAAjE,EAAqE;AACjE,sBAAIE,gBAAgB,GAAGJ,WAAW,CAAC,gBAAD,CAAX,CAA8BE,GAA9B,CAAvB;;AACA,sBAAIE,gBAAgB,CAAC,OAAD,CAAhB,KAA8BL,OAAlC,EAA2C;AACvCnD,oBAAAA,OAAO,CAACC,GAAR,CAAY,eAAeuD,gBAAgB,CAAC,OAAD,CAA3C;AACA,wBAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,gBAAgB,CAAC,QAAD,CAA/B,EAA2CpC,SAA3C,EAAsD,CAAtD,CAAd;AACApB,oBAAAA,OAAO,CAACC,GAAR,CAAY,aAAawD,OAAzB;AACA;AACH;AACJ;AACJ,eAhBD,CAxDqB,CAyErB;;;AACA,oBAAMG,iBAAiB,GAAG,gBAAgBtB,WAAhB,EAA6BY,OAA7B,EAAsCC,OAAtC,EAA+C;AACrE;AACA;AACA;AACA;AACA;AACA,oBAAIC,WAAW,GAAG,MAAMd,WAAW,CAACe,kBAAZ,CAA+BH,OAA/B,EAAwCN,EAAxC,EAAxB;;AACA,qBAAK,IAAIU,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,WAAW,CAAC,QAAD,CAAX,CAAsBG,MAA9C,EAAsDD,GAAG,EAAzD,EAA6D;AACzD,sBAAIE,gBAAgB,GAAGJ,WAAW,CAAC,QAAD,CAAX,CAAsBE,GAAtB,CAAvB;;AACA,sBAAIE,gBAAgB,CAAC,UAAD,CAAhB,KAAiCL,OAArC,EAA8C;AAC1C,wBAAIU,cAAc,GAAGH,IAAI,CAACC,SAAL,CAAeH,gBAAf,EAAiCpC,SAAjC,EAA4C,CAA5C,CAArB;AACApB,oBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwB4D,cAApC;AACA;AACH;AACJ;AACJ,eAfD;;AAiBA,eAAC,YAAY;AAGX,oBAAIC,MAAM,GAAG,MAAMxB,WAAW,CAACyB,oBAAZ,GAAmCnB,EAAnC,EAAnB,CAHW,CAIT;;AACAkB,gBAAAA,MAAM,CAACxC,GAAP,GAAa,IAAb;AACAwC,gBAAAA,MAAM,CAACnC,OAAP,GAAiB,IAAjB;AACA3B,gBAAAA,OAAO,CAACC,GAAR,CAAY6D,MAAZ;AAGA,oBAAI3C,IAAI,GAAGC,SAAX;AAEA,oBAAI4C,OAAO,GAAG,IAAd;AACAhE,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,gBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BqC,WAA/B;AACAtC,gBAAAA,OAAO,CAACC,GAAR,CAAYzB,CAAC,CAACI,OAAd;AACA,sBAAM4D,mBAAmB,CAACF,WAAD,EAAa9D,CAAC,CAACI,OAAf,CAAzB,CAhBS,CAiBT;;AACA,oBAAIqF,GAAG,GAAG,MAAM3B,WAAW,CAACS,6BAAZ,CAA0CvE,CAAC,CAACI,OAA5C,EAAqDgE,EAArD,EAAhB;AACAoB,gBAAAA,OAAO,GAAGC,GAAG,CAAC,aAAD,CAAb;AAEF,sBAAMhB,iBAAiB,CAACX,WAAD,EAAcP,iBAAiB,CAACG,IAAhC,EAAsC8B,OAAtC,CAAvB;AACA,sBAAMJ,iBAAiB,CAACtB,WAAD,EAAcP,iBAAiB,CAACG,IAAhC,EAAsC8B,OAAtC,CAAvB;AAEAhE,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAxBW,CA0BX;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEE6D,gBAAAA,MAAM,GAAG,MAAMxB,WAAW,CAACyB,oBAAZ,GAAmCnB,EAAnC,EAAf,CAzCS,CA0CT;;AACAkB,gBAAAA,MAAM,CAACxC,GAAP,GAAa,IAAb;AACAwC,gBAAAA,MAAM,CAACnC,OAAP,GAAiB,IAAjB;AAEA,oBAAIuC,MAAM,GAAGjC,iBAAiB,CAACC,IAA/B;AACA,oBAAIiC,SAAS,GAAGD,MAAhB,CA/CS,CAgDT;AACA;;AACA,oBAAIE,gBAAgB,GAAGhD,SAAvB,CAlDS,CAmDT;AACA;;AACA,oBAAIiD,gBAAgB,GAAGjD,SAAvB,CArDS,CAsDT;;AACA,oBAAIF,MAAM,GAAG,CAAb,CAvDS,CAwDb;AACA;;AAEAlB,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EA3Da,CA6DT;;AACA,oBAAIqE,MAAM,GAAGpE,OAAO,CAACqE,uCAAR,CAAgDL,MAAhD,EAAwDC,SAAxD,EAAmEE,gBAAnE,EAAqFD,gBAArF,EACRlD,MADQ,EACAC,IADA,EACM6C,OADN,EACeF,MADf,CAAb,CA9DS,CAiET;;AACA,oBAAIU,YAAY,GAAGF,MAAM,CAACG,OAAP,CAAexC,iBAAiB,CAACyC,EAAjC,CAAnB;AACA,oBAAIC,KAAK,GAAI,MAAMrC,WAAW,CAACsC,kBAAZ,CAA+BJ,YAA/B,EAA6C5B,EAA7C,EAAnB;AACA5C,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB0E,KAAK,CAAClC,IAArC,EApES,CAqET;;AACA,sBAAMD,mBAAmB,CAACF,WAAD,EAAcqC,KAAK,CAAClC,IAApB,CAAzB,CAtES,CAwET;;AACAzC,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAagC,iBAAiB,CAACC,IAA3C;AACA,sBAAM0B,iBAAiB,CAACtB,WAAD,EAAcL,iBAAiB,CAACC,IAAhC,EAAsC8B,OAAtC,CAAvB;AAEAhE,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EA5ES,CA8Eb;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEI6D,gBAAAA,MAAM,GAAG,MAAMxB,WAAW,CAACyB,oBAAZ,GAAmCnB,EAAnC,EAAf,CAxFS,CAyFT;;AACAkB,gBAAAA,MAAM,CAACxC,GAAP,GAAa,IAAb;AACAwC,gBAAAA,MAAM,CAACnC,OAAP,GAAiB,IAAjB;AAEAuC,gBAAAA,MAAM,GAAGnC,iBAAiB,CAACG,IAA3B;AACAiC,gBAAAA,SAAS,GAAGlC,iBAAiB,CAACC,IAA9B;AACAkC,gBAAAA,gBAAgB,GAAGhD,SAAnB;AACAiD,gBAAAA,gBAAgB,GAAGjD,SAAnB,CAhGS,CAiGT;;AACAF,gBAAAA,MAAM,GAAG,IAAT,CAlGS,CAoGT;;AACA,oBAAI2D,IAAI,GAAG3E,OAAO,CAACqE,uCAAR,CAAgDL,MAAhD,EAAwDC,SAAxD,EAAmEE,gBAAnE,EAAqFD,gBAArF,EACNlD,MADM,EACEC,IADF,EACQ6C,OADR,EACiBF,MADjB,CAAX,CArGS,CAuGT;;AACAU,gBAAAA,YAAY,GAAGK,IAAI,CAACJ,OAAL,CAAa1C,iBAAiB,CAAC2C,EAA/B,CAAf;AACA,oBAAII,GAAG,GAAI,MAAMxC,WAAW,CAACsC,kBAAZ,CAA+BJ,YAA/B,EAA6C5B,EAA7C,EAAjB;AACA5C,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB6E,GAAG,CAACrC,IAAnC,EA1GS,CA2GT;;AACA,sBAAMD,mBAAmB,CAACF,WAAD,EAAcwC,GAAG,CAACrC,IAAlB,CAAzB,CA5GS,CA8GT;;AACAzC,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBgC,iBAAiB,CAACC,IAA/C;AACA,sBAAM0B,iBAAiB,CAACtB,WAAD,EAAcL,iBAAiB,CAACC,IAAhC,EAAsC8B,OAAtC,CAAvB;AAED,eAlHH,IAkHOe,KAlHP,CAkHaC,CAAC,IAAI;AACdhF,gBAAAA,OAAO,CAACC,GAAR,CAAY+E,CAAZ;AACAhF,gBAAAA,OAAO,CAACiF,KAAR;AACH,eArHD,EA3FqB,CAmNX;AAID,aA3ND,EA4NCF,KA5ND,CA4NQC,CAAD,IAAO;AACZhF,cAAAA,OAAO,CAACkF,KAAR,CAAcF,CAAd;AACD,aA9ND;AA+ND,WA/OD,EAgPCD,KAhPD,CAgPQC,CAAD,IAAO;AACVhF,YAAAA,OAAO,CAACkF,KAAR,CAAcF,CAAd;AACH,WAlPD;AAoPD,SA3PD,EA4PCD,KA5PD,CA4PQC,CAAD,IAAO;AACZhF,UAAAA,OAAO,CAACkF,KAAR,CAAcF,CAAd;AACD,SA9PD;AA+PD,OArQD,EAsQCD,KAtQD,CAsQQC,CAAD,IAAO;AACZhF,QAAAA,OAAO,CAACkF,KAAR,CAAcF,CAAd;AACD,OAxQD;AA0QD,KA9QC,EA+QDD,KA/QC,CA+QMC,CAAD,IAAO;AACZhF,MAAAA,OAAO,CAACkF,KAAR,CAAcF,CAAd;AACD,KAjRC;AAuRD,GApSL,CAjDqB,CAuVnB;AACJ;;;AAEA,QAAMG,IAAI,GAAC,YAAS;AAElB,UAAMjF,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,UAAMgC,UAAU,GAAG,+CAAnB;AACM,UAAMC,IAAI,GAAG,EAAb,CAJY,CAKZ;;AACA,UAAMC,KAAK,GAAG;AAEV,mBAAc;AAFJ,KAAd,CANY,CAUZ;;AAEN,UAAM7B,UAAU,CAACC,OAAX,EAAN,CAZkB,CAclB;;AACA,QAAI2E,MAAM,GAAG,IAAIlF,OAAO,CAACqC,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCC,IAAvC,CAAb;AACA,QAAIiD,eAAe,GAAG,MAAMD,MAAM,CAACrB,oBAAP,GAA8BnB,EAA9B,EAA5B;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBoF,eAAnB,EAjBkB,CAmBlB;;AACA,QAAIC,KAAK,GAAG,IAAIpF,OAAO,CAACqF,WAAZ,CAAwB;AAClCtE,MAAAA,EAAE,EAAE,4DAD8B;AAElCD,MAAAA,IAAI,EAAE,4DAF4B;AAGlCE,MAAAA,MAAM,EAAE,KAH0B;AAIlCmE,MAAAA;AAJkC,KAAxB,CAAZ;AAODrF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBqF,KAAnB,EA3BmB,CA4BlB;;AACA,QAAIE,QAAQ,GAAGF,KAAK,CAACG,MAAN,EAAf;AACA,QAAIC,QAAQ,GAAGlF,UAAU,CAACmF,QAAX,CAAoBC,eAApB,CAAoCJ,QAApC,CAAf;AACAxF,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmByF,QAAnB;AACA1F,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBuF,QAAnB,EAhCkB,CAmClB;;AACA,QAAIK,GAAJ;AAEA,QAAIC,SAAS,GAAG,MAAMtF,UAAU,CAACiE,OAAX,CAAmB,CACvC;AACEoB,MAAAA,GAAG,EAAEH;AADP,KADuC,CAAnB,CAAtB;AAMA1F,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkB4F,GAAlB,EA5CkB,CA8ClB;AACF;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEC,GApED;;AAsEA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEJ;AAAQ,IAAA,OAAO,EAAEjI,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFI,eAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJI,eAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJL,eAQJ;AAAK,IAAA,KAAK,EAAE;AAACmI,MAAAA,eAAe,EAAC,OAAjB;AAAyBC,MAAAA,OAAO,EAAC,MAAjC;AAAwCC,MAAAA,QAAQ,EAAC;AAAjD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCvI,SAAS,CAACa,GAAV,CAAeC,CAAD,IAAK;AAChB,wBACE;AAAK,MAAA,KAAK,EAAE;AAACuH,QAAAA,eAAe,EAAC,OAAjB;AAAyBG,QAAAA,MAAM,EAAC,OAAhC;AAAwCC,QAAAA,KAAK,EAAC;AAA9C,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEN;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,iBAAT;AAA2BC,QAAAA,YAAY,EAAC;AAAxC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBASI;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoC9H,CAAC,CAACQ,WAAtC,CATJ,eAWI;AAAI,MAAA,KAAK,EAAE;AAACsH,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsC9H,CAAC,CAACU,aAAxC,CAXJ,eAaI;AAAI,MAAA,KAAK,EAAE;AAACoH,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqC9H,CAAC,CAACgB,QAAvC,CAbJ,EAeMhB,CAAC,CAACoB,SAAF,KAAgB,EAAhB,gBACN,uDACC;AAAQ,MAAA,OAAO,EAAE,MAAIE,aAAa,CAACtB,CAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADM,gBAKA,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,CApBN,CAFA,CAFM,CADF;AAkCD,GAnCF,CADD,CARI,CAFJ;AAwDC,CAxdD;;GAAMjB,Y;;KAAAA,Y;AAydN,eAAeA,YAAf","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport fireDb from \"./firebase\";\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTransfer=()=>{\r\n\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);\r\n\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n  \r\n    getAlgos.map((a)=>{\r\n      //console.log(`absalgos`, a)\r\n    \r\n      Object.keys(a).map((b)=>{\r\n      //console.log(`bbb`, a[b].txnId)\r\n        req2.push({\r\n          //addAcc:\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic,\r\n    addprice:a[b].price,\r\n    addkeyId:a[b].keyId,\r\n    addstatus:a[b].status\r\n\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    //console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n\r\n  //start transfer\r\n\r\n  const TransferAsset=async(a)=>{\r\n    alert(\"transferasset\");\r\n    console.log(\"buytx\",a.addtxid);\r\n    console.log(\"buytx\",a.addalgocreator);\r\n    console.log(\"buytx\",a.addprice);\r\n      const algosdk = require('algosdk');\r\n      var account1_mnemonic=a.addmnemonic;\r\n\r\n      //const checb1=()=>{\r\n        let signedTx;\r\n        let tx;\r\n        let txParams;\r\n      \r\n        AlgoSigner.connect()\r\n      .then((d) => {\r\n        console.log(\"conn\",d);\r\n        let accounts;\r\n        AlgoSigner.accounts({\r\n          ledger: 'TestNet'\r\n        })\r\n        .then((d) => {\r\n          accounts = d;\r\n          console.log(\"accounts\",d);\r\n          AlgoSigner.algod({\r\n            ledger: 'TestNet',\r\n            path: '/v2/transactions/params'\r\n          })\r\n          .then((d) => {\r\n            txParams = d;\r\n            console.log(\"txparms\",d);\r\n            AlgoSigner.sign({\r\n              from: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n              to: a.addalgocreator,\r\n              amount: +a.addprice,\r\n              note: undefined,\r\n              type: 'pay',\r\n              fee: txParams['min-fee'],\r\n              firstRound: txParams['last-round'],\r\n              lastRound: txParams['last-round'] + 1000,\r\n              genesisID: txParams['genesis-id'],\r\n              genesisHash: txParams['genesis-hash'],\r\n              flatFee: true\r\n            })\r\n            .then((d) => {\r\n              signedTx = d;\r\n              console.log(\"signedtx\",d);\r\n              AlgoSigner.send({\r\n                ledger: 'TestNet',\r\n                tx: signedTx.blob\r\n              })\r\n              .then((d) => {\r\n                tx = d;\r\n                console.log(\"tx\",d);\r\n\r\n\r\n                //cut start\r\n\r\n                 //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n        var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\n        //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\n        var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n        //alert(arr[0]);\r\n        // var recoveredAccount1 = arr[0];\r\n        // var recoveredAccount2 = arr[0];\r\n        // var recoveredAccount3 = arr[0];\r\n        console.log(recoveredAccount3.addr);\r\n        const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n        const port = \"\";\r\n        //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n        const token = {\r\n        \r\n            'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n        }\r\n        let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n        console.log(\"algodclient\",algodclient)\r\n      // Function used to wait for a tx confirmation\r\n      const waitForConfirmation = async function (algodclient, txId) {\r\n        const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n        const port = \"\";\r\n        //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n        const token = {\r\n        \r\n            'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n        }\r\n        let algodclients = new algosdk.Algodv2(token, baseServer, port);  \r\n          console.log(\"working return 133\",txId)\r\n        console.log(\"working\"+algodclients);\r\n          let response = await algodclients.status().do();\r\n          console.log(\"response\",response);\r\n          let lastround = response[\"last-round\"];\r\n          while (true) {\r\n              const pendingInfo = await algodclients.pendingTransactionInformation(txId).do();\r\n              if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n                  //Got the completed Transaction\r\n                  console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n                  break;\r\n              }\r\n              lastround++;\r\n              await algodclients.statusAfterBlock(lastround).do();\r\n          }\r\n      };\r\n      \r\n      // Function used to print created asset for account and assetid\r\n      const printCreatedAsset = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n              if (scrutinizedAsset['index'] === assetid) {\r\n                  console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                  let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                  console.log(\"parms = \" + myparms);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      // Function used to print asset holding for account and assetid\r\n      const printAssetHolding = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['assets'][idx];\r\n              if (scrutinizedAsset['asset-id'] === assetid) {\r\n                  let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                  console.log(\"assetholdinginfo = \" + myassetholding);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      \r\n      (async () => {\r\n      \r\n      \r\n        let params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n          console.log(params);\r\n          \r\n      \r\n          let note = undefined;\r\n          \r\n          let assetID = null;\r\n          console.log(\"working198\");\r\n          console.log(\"beforealgoclient\",algodclient);\r\n          console.log(a.addtxid);\r\n          await waitForConfirmation(algodclient,a.addtxid);\r\n          // Get the new asset's information from the creator account\r\n          let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\r\n          assetID = ptx[\"asset-index\"];\r\n        \r\n        await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n        await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\r\n      \r\n        console.log(\"working178\")\r\n        \r\n        //this below is transfer usefull function\r\n      \r\n        // Opting in to an Asset:\r\n        // Opting in to transact with the new asset\r\n        // Allow accounts that want recieve the new asset\r\n        // Have to opt in. To do this they send an asset transfer\r\n        // of the new asset to themseleves \r\n        // In this example we are setting up the 3rd recovered account to \r\n        // receive the new asset\r\n      \r\n        // First update changing transaction parameters\r\n        // We will account for changing transaction parameters\r\n        // before every transaction in this example\r\n        //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n      \r\n          let sender = recoveredAccount3.addr;\r\n          let recipient = sender;\r\n          // We set revocationTarget to undefined as \r\n          // This is not a clawback operation\r\n          let revocationTarget = undefined;\r\n          // CloseReaminerTo is set to undefined as\r\n          // we are not closing out an asset\r\n          let closeRemainderTo = undefined;\r\n          // We are sending 0 assets\r\n          let amount = 0;\r\n      //let note=undefined;\r\n      //assetID='15940921';\r\n      \r\n      console.log(\"working211\")\r\n      \r\n          // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n          let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n      \r\n          // Must be signed by the account wishing to opt in to the asset    \r\n          let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n          let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + opttx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, opttx.txId);\r\n      \r\n          //You should now see the new asset listed in the account information\r\n          console.log(\"Account3\" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n          console.log(\"working 227\")\r\n        \r\n      //     // Transfer New Asset:\r\n      //     // Now that account3 can recieve the new tokens \r\n      //     // we can tranfer tokens in from the creator\r\n      //     // to account3\r\n      //     // First update changing transaction parameters\r\n      //     // We will account for changing transaction parameters\r\n      //     // before every transaction in this example\r\n      \r\n      //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n      \r\n          sender = recoveredAccount1.addr;\r\n          recipient = recoveredAccount3.addr;\r\n          revocationTarget = undefined;\r\n          closeRemainderTo = undefined;\r\n          //Amount of the asset to transfer\r\n          amount = 1000;\r\n      \r\n          // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n          let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n          // Must be signed by the account sending the asset  \r\n          rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n          let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + xtx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, xtx.txId);\r\n      \r\n          // You should now see the 10 assets listed in the account information\r\n          console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n        })().catch(e => {\r\n          console.log(e);\r\n          console.trace();\r\n      });\r\n\r\n\r\n                //cut stop\r\n\r\n\r\n\r\n              })\r\n              .catch((e) => {\r\n                console.error(e);\r\n              });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n          \r\n          })\r\n          .catch((e) => {\r\n            console.error(e);\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n      \r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n      \r\n\r\n\r\n\r\n       \r\n      }\r\n  \r\n    //end transfer\r\n//end buyers print in algo\r\n\r\nconst chec=async()=>{\r\n\r\n  const algosdk = require('algosdk');\r\n  const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n        const port = \"\";\r\n        //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n        const token = {\r\n        \r\n            'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n        }\r\n        //let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n  await AlgoSigner.connect();\r\n\r\n  // Create an Algod client to get suggested transaction params\r\n  let client = new algosdk.Algodv2(token, baseServer, port);\r\n  let suggestedParams = await client.getTransactionParams().do();\r\n  console.log(\"try1\",suggestedParams);\r\n  \r\n  // Use the JS SDK to build a Transaction\r\n  let sdkTx = new algosdk.Transaction({\r\n    to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n    from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n    amount: 10000,\r\n    suggestedParams,\r\n  });\r\n  \r\n console.log(\"try2\",sdkTx);\r\n  // Get the binary and base64 encode it\r\n  let binaryTx = sdkTx.toByte();\r\n  let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\r\n  console.log(\"try3\",base64Tx);\r\n  console.log(\"try4\",binaryTx);\r\n  \r\n\r\n  //open algo signer below\r\n  let txn;\r\n\r\n  let signedTxs = await AlgoSigner.signTxn([\r\n    {\r\n      txn: base64Tx\r\n    },\r\n  ]); \r\n\r\n  console.log(\"txn\",txn);\r\n\r\n  // The AlgoSigner.signTxn() response would look like '[{ txID, blob }, null]'\r\n// Convert first transaction to binary from the response\r\n//let signedTx1Binary = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\r\n// Sign leftover transaction with the SDK\r\n//let externalAccount = algosdk.mnemonicToSecretKey('EXTERNAL_ACCOUNT_MNEMONIC');\r\n//let signedTx2Binary = txn.signTxn(externalAccount.sk);\r\n\r\n//await client.sendRawTransaction([signedTx1Binary, signedTx2Binary]).do();\r\n\r\n// Merge transaction binaries into a single Uint8Array\r\n// let combinedBinaryTxns = new Uint8Array(signedTx1Binary.byteLength + signedTx2Binary.byteLength);\r\n// combinedBinaryTxns.set(signedTx1Binary, 0);\r\n// combinedBinaryTxns.set(signedTx2Binary, signedTx1Binary.byteLength);\r\n\r\n// // Convert the combined array values back to base64\r\n// let combinedBase64Txns = AlgoSigner.encoding.msgpackToBase64(combinedBinaryTxns);\r\n\r\n// await AlgoSigner.send({\r\n//   ledger: 'TestNet',\r\n//   tx: combinedBase64Txns,\r\n// });\r\n\r\n}\r\n\r\nreturn(\r\n\r\n    <div>\r\n\r\n<button onClick={getalgo}>GetAsset</button>\r\n\r\n<br></br><br></br>\r\n\r\n\r\n\r\n<div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\"    />\r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n  \r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>price : {a.addprice}</h6>\r\n\r\n    { a.addstatus === '' ? (\r\n<> \r\n <button onClick={()=>TransferAsset(a)} >BuyNow</button>     \r\n</>\r\n    ):(\r\n      <>\r\n      <button >Already Sold</button> \r\n      </>\r\n\r\n    )}\r\n</center>\r\n</div>\r\n\r\n</div>\r\n )})}\r\n  </div>\r\n{/* )} */}\r\n  </div>\r\n\r\n\r\n        \r\n\r\n);\r\n\r\n}\r\nexport default AlgoTransfer;"]},"metadata":{},"sourceType":"module"}
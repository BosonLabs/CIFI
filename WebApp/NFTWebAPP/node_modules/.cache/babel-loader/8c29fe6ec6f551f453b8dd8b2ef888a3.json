{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\NewIpfs.js\";\n// /* global AlgoSigner */\n// import firebase from \"firebase\";\n// import fireDb from \"./firebase\";\n// import Popup from './Popup';\n// import axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\"; //import fs from 'fs';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewIpfs = () => {\n  // const getSHA=(fileName)=> {\n  //     return new Promise((resolve, reject) => {\n  //       //let hash = crypto.createHash(\"sha1\");\n  //       let stream = fs.createReadStream(fileName);\n  //       stream.on(\"error\", err => reject(err));\n  //       //stream.on(\"data\", chunk => hash.update(chunk));\n  //       //stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\n  //       console.log(stream)\n  //     });\n  //   }\n  let pinataApiKey = '88348e7ce84879e143e1';\n  let pinataSecretApiKey = 'e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\n\n  const pinataSDK = require('@pinata/sdk');\n\n  const pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\n\n  const loadDoc = () => {\n    //getSHA('./dhon.png')\n    alert(\"new\"); //start\n    // const axios = require('axios');\n    // const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\n    // const data = new FormData();\n    // data.append('file', 'demosss');\n    // axios\n    //   .post(url, data, {\n    //     maxBodyLength: 'Infinity', // this is needed to prevent axios from erroring out with large files\n    //     headers: {\n    //       'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n    //       pinata_api_key: pinataApiKey,\n    //       pinata_secret_api_key: pinataSecretApiKey,\n    //     },\n    //   })\n    //   .then((response) => {\n    //     console.log(response);\n    //     console.log(\"response\")\n    //   })\n    //   .catch((error) => {\n    //     console.log(error);\n    //   });\n    //end\n\n    pinata.testAuthentication().then(result => {\n      //handle successful authentication here\n      console.log(result);\n      const metadata = {\n        name: 'demo',\n        keyvalues: {\n          newKey: 'demos',\n          existingKey: 'demos',\n          existingKeyToRemove: null\n        }\n      };\n      pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then(result => {\n        //handle results here\n        console.log(result);\n        pinata.userPinnedDataTotal().then(result => {\n          //handle results here\n          console.log(\"result\");\n          console.log(result); //file start\n\n          const fs = require('fs');\n\n          const readableStreamForFile = fs.createReadStream('./dhon.png');\n          const optionss = {\n            pinataMetadata: {\n              name: 'demolast',\n              keyvalues: {\n                customKey: 'customValue',\n                customKey2: 'customValue2'\n              }\n            },\n            pinataOptions: {\n              cidVersion: 0\n            }\n          };\n          pinata.pinFileToIPFS(readableStreamForFile, optionss).then(result => {\n            //handle results here\n            console.log(result);\n          }).catch(err => {\n            //handle error here\n            console.log(err);\n          }); //end\n          //start\n\n          const body = {\n            message: 'Pinatas are awesome'\n          };\n          const options = {\n            pinataMetadata: {\n              name: 'MyCustomName',\n              keyvalues: {\n                customKey: 'customValue',\n                customKey2: 'customValue2'\n              }\n            },\n            pinataOptions: {\n              cidVersion: 0\n            }\n          };\n          pinata.pinJSONToIPFS(body, options).then(result => {\n            //handle results here\n            console.log(result);\n            console.log(\"jsonresult\");\n          }).catch(err => {\n            //handle error here\n            console.log(err);\n          }); //end\n          //start git\n          // const metadataFilter = {\n          //     name: 'demo',\n          //     keyvalues: {\n          //         testKeyValue: {\n          //             value: 'demo',\n          //             op: 'eq'\n          //         },\n          //         total: {\n          //             value: 60000,\n          //             secondValue: 618776,\n          //             op: 'between'\n          //         }\n          //     }\n          // };\n\n          const filters = {\n            status: 'pinned',\n            pageLimit: 10,\n            pageOffset: 0 //metadata: metadataFilter\n\n          };\n          pinata.pinList(filters).then(result => {\n            //handle results here\n            console.log(result);\n            console.log(\"gitresult\");\n          }).catch(err => {\n            //handle error here\n            console.log(err);\n          }); //stop git\n          //start\n          // const axios = require('axios');\n          // //const fs = require('fs');\n          // const FormData = require('form-data');\n          // const pinFileToIPFS = (pinataApiKey, pinataSecretApiKey) => {\n          //     console.log(\"pin\")\n          //     const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n          //     //we gather a local file for this example, but any valid readStream source will work here.\n          //     let data = new FormData();\n          //     data.append('file', fs.createReadStream('./dhon.png'));\n          //     //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\n          //     //metadata is optional\n          //     const metadata = JSON.stringify({\n          //         name: 'testname',\n          //         keyvalues: {\n          //             exampleKey: 'exampleValue'\n          //         }\n          //     });\n          //     data.append('pinataMetadata', metadata);\n          //     //pinataOptions are optional\n          //     const pinataOptions = JSON.stringify({\n          //         cidVersion: 0,\n          //         customPinPolicy: {\n          //             regions: [\n          //                 {\n          //                     id: 'FRA1',\n          //                     desiredReplicationCount: 1\n          //                 },\n          //                 {\n          //                     id: 'NYC1',\n          //                     desiredReplicationCount: 2\n          //                 }\n          //             ]\n          //         }\n          //     });\n          //     data.append('pinataOptions', pinataOptions);\n          //     return axios\n          //         .post(url, data, {\n          //             maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\n          //             headers: {\n          //                 'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n          //                 pinata_api_key: pinataApiKey,\n          //                 pinata_secret_api_key: pinataSecretApiKey\n          //             }\n          //         })\n          //         .then(function (response) {\n          //             //handle response here\n          //         })\n          //         .catch(function (error) {\n          //             //handle error here\n          //         });\n          // };\n          //end\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //start\n        // const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\n        // console.log(sourcePath);\n        // const options = {\n        //     pinataMetadata: {\n        //         name: 'My Awesome Website',\n        //         keyvalues: {\n        //             customKey: 'customValue',\n        //             customKey2: 'customValue2'\n        //         }\n        //     },\n        //     pinataOptions: {\n        //         cidVersion: 0\n        //     }\n        // };\n        // pinata.pinFromFS(sourcePath, options).then((result) => {\n        //     //handle results here\n        //     console.log(result);\n        // }).catch((err) => {\n        //     //handle error here\n        //     console.log(\"error\");\n        //     console.log(\"error\",err);\n        // });\n        //\n\n        var http = require('http');\n\n        var fs = require('fs').promises;\n\n        http.createServer(function (req, res) {\n          // The filename is simple the local directory and tacks on the requested url\n          var filename = __dirname + req.url; // This line opens the file as a readable stream\n\n          var readStream = fs.createReadStream('./he.txt'); // This will wait until we know the readable stream is actually valid before piping\n\n          readStream.on('open', function () {\n            // This just pipes the read stream to the response object (which goes to the client)\n            readStream.pipe(res);\n            console.log(\"Resultget\", res);\n          }); // This catches any errors that happen while creating the readable stream (usually invalid names)\n\n          readStream.on('error', function (err) {\n            res.end(err);\n          });\n        }).listen(3000); //\n        //const fs = require('fs').promises;\n\n        const readableStreamForFile = fs.createReadStream('helloworld');\n        console.log(\"reaf\", readableStreamForFile);\n        const options = {\n          pinataMetadata: {\n            name: 'MyCustomName',\n            keyvalues: {\n              customKey: 'customValue',\n              customKey2: 'customValue2'\n            }\n          },\n          pinataOptions: {\n            cidVersion: 0\n          }\n        };\n        pinata.pinFileToIPFS(readableStreamForFile, options).then(result => {\n          //handle results here\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //end\n      }).catch(err => {\n        //handle error here\n        console.log(err);\n      });\n    }).catch(err => {\n      //handle error here\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: loadDoc,\n        children: \"Algorand \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 354,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewIpfs;\nexport default NewIpfs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIpfs\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/NewIpfs.js"],"names":["React","useState","useEffect","useCallback","NewIpfs","pinataApiKey","pinataSecretApiKey","pinataSDK","require","pinata","loadDoc","alert","testAuthentication","then","result","console","log","metadata","name","keyvalues","newKey","existingKey","existingKeyToRemove","hashMetadata","userPinnedDataTotal","fs","readableStreamForFile","createReadStream","optionss","pinataMetadata","customKey","customKey2","pinataOptions","cidVersion","pinFileToIPFS","catch","err","body","message","options","pinJSONToIPFS","filters","status","pageLimit","pageOffset","pinList","http","promises","createServer","req","res","filename","__dirname","url","readStream","on","pipe","end","listen","color"],"mappings":"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","sourcesContent":["// /* global AlgoSigner */\r\n// import firebase from \"firebase\";\r\n// import fireDb from \"./firebase\";\r\n// import Popup from './Popup';\r\n// import axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\n//import fs from 'fs';\r\nconst NewIpfs=()=>{\r\n\r\n\r\n    // const getSHA=(fileName)=> {\r\n    //     return new Promise((resolve, reject) => {\r\n    //       //let hash = crypto.createHash(\"sha1\");\r\n          \r\n    //       let stream = fs.createReadStream(fileName);\r\n    //       stream.on(\"error\", err => reject(err));\r\n    //       //stream.on(\"data\", chunk => hash.update(chunk));\r\n    //       //stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\r\n    //       console.log(stream)\r\n    //     });\r\n    //   }\r\n\r\n    let pinataApiKey='88348e7ce84879e143e1';\r\n    let pinataSecretApiKey='e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\r\n\r\nconst pinataSDK = require('@pinata/sdk');\r\nconst pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\r\nconst loadDoc=()=>{\r\n\r\n    //getSHA('./dhon.png')\r\n\r\n    alert(\"new\");\r\n\r\n    //start\r\n\r\n    // const axios = require('axios');\r\n    // const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\r\n    // const data = new FormData();\r\n    // data.append('file', 'demosss');\r\n    // axios\r\n    //   .post(url, data, {\r\n    //     maxBodyLength: 'Infinity', // this is needed to prevent axios from erroring out with large files\r\n    //     headers: {\r\n    //       'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n    //       pinata_api_key: pinataApiKey,\r\n    //       pinata_secret_api_key: pinataSecretApiKey,\r\n    //     },\r\n    //   })\r\n    //   .then((response) => {\r\n    //     console.log(response);\r\n    //     console.log(\"response\")\r\n    //   })\r\n    //   .catch((error) => {\r\n    //     console.log(error);\r\n    //   });\r\n\r\n\r\n    //end\r\n\r\n\r\n    pinata.testAuthentication().then((result) => {\r\n        //handle successful authentication here\r\n        console.log(result);\r\n\r\n\r\n\r\n        const metadata = {\r\n            name: 'demo',\r\n            keyvalues: {\r\n                newKey: 'demos',\r\n                existingKey: 'demos',\r\n                existingKeyToRemove: null\r\n            }\r\n        };\r\n        pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then((result) => {\r\n            //handle results here\r\n            console.log(result);\r\n\r\n            pinata.userPinnedDataTotal().then((result) => {\r\n                //handle results here\r\n                console.log(\"result\");\r\n                console.log(result);\r\n\r\n\r\n                //file start\r\n\r\n                const fs = require('fs');\r\nconst readableStreamForFile = fs.createReadStream('./dhon.png');\r\nconst optionss = {\r\n    pinataMetadata: {\r\n        name: 'demolast',\r\n        keyvalues: {\r\n            customKey: 'customValue',\r\n            customKey2: 'customValue2'\r\n        }\r\n    },\r\n    pinataOptions: {\r\n        cidVersion: 0\r\n    }\r\n};\r\npinata.pinFileToIPFS(readableStreamForFile, optionss).then((result) => {\r\n    //handle results here\r\n    console.log(result);\r\n}).catch((err) => {\r\n    //handle error here\r\n    console.log(err);\r\n});\r\n\r\n\r\n\r\n\r\n                //end\r\n\r\n                //start\r\n\r\n                const body = {\r\n                    message: 'Pinatas are awesome'\r\n                };\r\n                const options = {\r\n                    pinataMetadata: {\r\n                        name: 'MyCustomName',\r\n                        keyvalues: {\r\n                            customKey: 'customValue',\r\n                            customKey2: 'customValue2'\r\n                        }\r\n                    },\r\n                    pinataOptions: {\r\n                        cidVersion: 0\r\n                    }\r\n                };\r\n                pinata.pinJSONToIPFS(body, options).then((result) => {\r\n                    //handle results here\r\n                    console.log(result);\r\n                    console.log(\"jsonresult\")\r\n                }).catch((err) => {\r\n                    //handle error here\r\n                    console.log(err);\r\n                });\r\n                \r\n\r\n\r\n                //end\r\n\r\n\r\n                //start git\r\n\r\n\r\n                // const metadataFilter = {\r\n                //     name: 'demo',\r\n                //     keyvalues: {\r\n                //         testKeyValue: {\r\n                //             value: 'demo',\r\n                //             op: 'eq'\r\n                //         },\r\n                //         total: {\r\n                //             value: 60000,\r\n                //             secondValue: 618776,\r\n                //             op: 'between'\r\n                //         }\r\n                        \r\n                //     }\r\n                // };\r\n                \r\n                const filters = {\r\n                    status : 'pinned',\r\n                    pageLimit: 10,\r\n                    pageOffset: 0\r\n                    //metadata: metadataFilter\r\n                };\r\n                pinata.pinList(filters).then((result) => {\r\n                    //handle results here\r\n                    console.log(result);\r\n                    console.log(\"gitresult\")\r\n                }).catch((err) => {\r\n                    //handle error here\r\n                    console.log(err);\r\n                });\r\n                \r\n\r\n\r\n                //stop git\r\n//start\r\n\r\n// const axios = require('axios');\r\n// //const fs = require('fs');\r\n// const FormData = require('form-data');\r\n\r\n// const pinFileToIPFS = (pinataApiKey, pinataSecretApiKey) => {\r\n//     console.log(\"pin\")\r\n//     const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n\r\n//     //we gather a local file for this example, but any valid readStream source will work here.\r\n//     let data = new FormData();\r\n//     data.append('file', fs.createReadStream('./dhon.png'));\r\n\r\n//     //You'll need to make sure that the metadata is in the form of a JSON object that's been convered to a string\r\n//     //metadata is optional\r\n//     const metadata = JSON.stringify({\r\n//         name: 'testname',\r\n//         keyvalues: {\r\n//             exampleKey: 'exampleValue'\r\n//         }\r\n//     });\r\n//     data.append('pinataMetadata', metadata);\r\n\r\n//     //pinataOptions are optional\r\n//     const pinataOptions = JSON.stringify({\r\n//         cidVersion: 0,\r\n//         customPinPolicy: {\r\n//             regions: [\r\n//                 {\r\n//                     id: 'FRA1',\r\n//                     desiredReplicationCount: 1\r\n//                 },\r\n//                 {\r\n//                     id: 'NYC1',\r\n//                     desiredReplicationCount: 2\r\n//                 }\r\n//             ]\r\n//         }\r\n//     });\r\n//     data.append('pinataOptions', pinataOptions);\r\n\r\n//     return axios\r\n//         .post(url, data, {\r\n//             maxBodyLength: 'Infinity', //this is needed to prevent axios from erroring out with large files\r\n//             headers: {\r\n//                 'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n//                 pinata_api_key: pinataApiKey,\r\n//                 pinata_secret_api_key: pinataSecretApiKey\r\n//             }\r\n//         })\r\n//         .then(function (response) {\r\n//             //handle response here\r\n//         })\r\n//         .catch(function (error) {\r\n//             //handle error here\r\n//         });\r\n// };\r\n\r\n\r\n//end\r\n\r\n\r\n\r\n\r\n            }).catch((err) => {\r\n                //handle error here\r\n                console.log(err);\r\n            });\r\n\r\n\r\n            \r\n            //start\r\n\r\n// const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\r\n// console.log(sourcePath);\r\n// const options = {\r\n//     pinataMetadata: {\r\n//         name: 'My Awesome Website',\r\n//         keyvalues: {\r\n//             customKey: 'customValue',\r\n//             customKey2: 'customValue2'\r\n//         }\r\n//     },\r\n//     pinataOptions: {\r\n//         cidVersion: 0\r\n//     }\r\n// };\r\n// pinata.pinFromFS(sourcePath, options).then((result) => {\r\n//     //handle results here\r\n//     console.log(result);\r\n// }).catch((err) => {\r\n//     //handle error here\r\n//     console.log(\"error\");\r\n//     console.log(\"error\",err);\r\n\r\n// });\r\n//\r\n\r\nvar http = require('http');\r\nvar fs = require('fs').promises;\r\n\r\nhttp.createServer(function(req, res) {\r\n  // The filename is simple the local directory and tacks on the requested url\r\n  var filename = __dirname+req.url;\r\n\r\n  // This line opens the file as a readable stream\r\n  var readStream = fs.createReadStream('./he.txt');\r\n\r\n  // This will wait until we know the readable stream is actually valid before piping\r\n  readStream.on('open', function () {\r\n    // This just pipes the read stream to the response object (which goes to the client)\r\n    readStream.pipe(res);\r\n    console.log(\"Resultget\",res)\r\n  });\r\n\r\n  // This catches any errors that happen while creating the readable stream (usually invalid names)\r\n  readStream.on('error', function(err) {\r\n    res.end(err);\r\n  });\r\n}).listen(3000);\r\n\r\n\r\n//\r\n\r\n//const fs = require('fs').promises;\r\nconst readableStreamForFile = fs.createReadStream('helloworld');\r\nconsole.log(\"reaf\",readableStreamForFile)\r\nconst options = {\r\n    pinataMetadata: {\r\n        name: 'MyCustomName',\r\n        keyvalues: {\r\n            customKey: 'customValue',\r\n            customKey2: 'customValue2'\r\n        }\r\n    },\r\n    pinataOptions: {\r\n        cidVersion: 0\r\n    }\r\n};\r\npinata.pinFileToIPFS(readableStreamForFile, options).then((result) => {\r\n    //handle results here\r\n    console.log(result);\r\n}).catch((err) => {\r\n    //handle error here\r\n    console.log(err);\r\n});\r\n\r\n\r\n\r\n\r\n            //end\r\n\r\n\r\n\r\n\r\n        }).catch((err) => {\r\n            //handle error here\r\n            console.log(err);\r\n        });\r\n\r\n    }).catch((err) => {\r\n        //handle error here\r\n        console.log(err);\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n  \r\n  return (\r\n    <div >\r\n\r\n        <h1 style={{color:'white'}}>hello</h1>\r\n\r\n        <div style={{color:'white'}}>\r\n\r\n      <button type=\"submit\" onClick={loadDoc}>Algorand </button>\r\n      </div>\r\n      \r\n  </div>\r\n  );\r\n}\r\nexport default NewIpfs;"]},"metadata":{},"sourceType":"module"}
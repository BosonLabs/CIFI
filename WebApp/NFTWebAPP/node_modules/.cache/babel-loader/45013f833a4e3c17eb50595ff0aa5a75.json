{"ast":null,"code":"'use strict';\n\nconst toPull = require('stream-to-pull-stream');\n\nconst pull = require('pull-stream');\n\nconst transformChunk = require('./bw-util');\n\nconst deferred = require('pull-defer');\n\nmodule.exports = send => {\n  return opts => {\n    opts = opts || {};\n    const p = deferred.source();\n    send({\n      path: 'stats/bw',\n      qs: opts\n    }, (err, stream) => {\n      if (err) {\n        return p.end(err);\n      }\n\n      p.resolve(pull(toPull.source(stream), pull.map(transformChunk)));\n    });\n    return p;\n  };\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/ipfs-api/src/stats/bw-pull-stream.js"],"names":["toPull","require","pull","transformChunk","deferred","module","exports","send","opts","p","source","path","qs","err","stream","end","resolve","map"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,uBAAD,CAAtB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,aAAD,CAApB;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,WAAD,CAA9B;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAAxB;;AAEAI,MAAM,CAACC,OAAP,GAAkBC,IAAD,IAAU;AACzB,SAAQC,IAAD,IAAU;AACfA,IAAAA,IAAI,GAAGA,IAAI,IAAI,EAAf;AAEA,UAAMC,CAAC,GAAGL,QAAQ,CAACM,MAAT,EAAV;AAEAH,IAAAA,IAAI,CAAC;AACHI,MAAAA,IAAI,EAAE,UADH;AAEHC,MAAAA,EAAE,EAAEJ;AAFD,KAAD,EAGD,CAACK,GAAD,EAAMC,MAAN,KAAiB;AAClB,UAAID,GAAJ,EAAS;AACP,eAAOJ,CAAC,CAACM,GAAF,CAAMF,GAAN,CAAP;AACD;;AAEDJ,MAAAA,CAAC,CAACO,OAAF,CAAUd,IAAI,CACZF,MAAM,CAACU,MAAP,CAAcI,MAAd,CADY,EAEZZ,IAAI,CAACe,GAAL,CAASd,cAAT,CAFY,CAAd;AAID,KAZG,CAAJ;AAcA,WAAOM,CAAP;AACD,GApBD;AAqBD,CAtBD","sourcesContent":["'use strict'\r\n\r\nconst toPull = require('stream-to-pull-stream')\r\nconst pull = require('pull-stream')\r\nconst transformChunk = require('./bw-util')\r\nconst deferred = require('pull-defer')\r\n\r\nmodule.exports = (send) => {\r\n  return (opts) => {\r\n    opts = opts || {}\r\n\r\n    const p = deferred.source()\r\n\r\n    send({\r\n      path: 'stats/bw',\r\n      qs: opts\r\n    }, (err, stream) => {\r\n      if (err) {\r\n        return p.end(err)\r\n      }\r\n\r\n      p.resolve(pull(\r\n        toPull.source(stream),\r\n        pull.map(transformChunk)\r\n      ))\r\n    })\r\n\r\n    return p\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
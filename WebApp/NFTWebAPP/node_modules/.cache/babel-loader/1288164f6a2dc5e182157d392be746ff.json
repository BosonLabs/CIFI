{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTest.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTest = () => {\n  _s();\n\n  //algo\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]); //\n\n  console.log(\"firs1\", getAlgos);\n  console.log(\"firs2\", getAlgoss); //algo\n  //start buyers print in algo\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      console.log(`absalgos`, a);\n      Object.keys(a).map(b => {\n        //  console.log(`bb`, b)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator\n        });\n      });\n    });\n    setgetAlgoss(req2);\n    console.log(\"cfbsalgo\", req); // setLoader(false)\n    // setLoading(false)\n  };\n\n  useEffect(() => {\n    getalgo();\n  }, [getAlgoss]); //start transfer\n\n  const TransferAsset = async () => {\n    const algosdk = require('algosdk');\n\n    var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\"; //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n\n    var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic); //alert(arr[0]);\n    // var recoveredAccount1 = arr[0];\n    // var recoveredAccount2 = arr[0];\n    // var recoveredAccount3 = arr[0];\n\n    console.log(recoveredAccount3.addr);\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port); // Function used to wait for a tx confirmation\n\n    const waitForConfirmation = async function (algodclient, txId) {\n      console.log(\"working\" + txId, algodclient);\n      let response = await algodclient.status().do();\n      console.log(\"response\", response);\n      let lastround = response[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n      }\n    }; // Function used to print created asset for account and assetid\n\n\n    const printCreatedAsset = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n        if (scrutinizedAsset['index'] === assetid) {\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n          console.log(\"parms = \" + myparms);\n          break;\n        }\n      }\n    }; // Function used to print asset holding for account and assetid\n\n\n    const printAssetHolding = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['assets'][idx];\n\n        if (scrutinizedAsset['asset-id'] === assetid) {\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n          console.log(\"assetholdinginfo = \" + myassetholding);\n          break;\n        }\n      }\n    };\n\n    (async () => {\n      let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      console.log(params);\n      let note = undefined;\n      let assetID = null;\n      console.log(\"working\");\n      await waitForConfirmation(algodclient, 'WCYE4WE65FHIGXUOK3IXEYDGBM6D3IP5UJXV52XOMA3D4BEV6SSA'); // Get the new asset's information from the creator account\n\n      let ptx = await algodclient.pendingTransactionInformation('WCYE4WE65FHIGXUOK3IXEYDGBM6D3IP5UJXV52XOMA3D4BEV6SSA').do();\n      assetID = ptx[\"asset-index\"];\n      await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n      await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n      console.log(\"working178\"); //this below is transfer usefull function\n      // Opting in to an Asset:\n      // Opting in to transact with the new asset\n      // Allow accounts that want recieve the new asset\n      // Have to opt in. To do this they send an asset transfer\n      // of the new asset to themseleves \n      // In this example we are setting up the 3rd recovered account to \n      // receive the new asset\n      // First update changing transaction parameters\n      // We will account for changing transaction parameters\n      // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let sender = recoveredAccount3.addr;\n      let recipient = sender; // We set revocationTarget to undefined as \n      // This is not a clawback operation\n\n      let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n      // we are not closing out an asset\n\n      let closeRemainderTo = undefined; // We are sending 0 assets\n\n      let amount = 0; //let note=undefined;\n      //assetID='15940921';\n\n      console.log(\"working211\"); // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n      let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n      let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n      let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n      console.log(\"Account3\" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n      console.log(\"working 227\"); //     // Transfer New Asset:\n      //     // Now that account3 can recieve the new tokens \n      //     // we can tranfer tokens in from the creator\n      //     // to account3\n      //     // First update changing transaction parameters\n      //     // We will account for changing transaction parameters\n      //     // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      sender = recoveredAccount1.addr;\n      recipient = recoveredAccount3.addr;\n      revocationTarget = undefined;\n      closeRemainderTo = undefined; //Amount of the asset to transfer\n\n      amount = 1000; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n      let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n      rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n      let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n      console.log(\"Account 3 = \" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    })().catch(e => {\n      console.log(e);\n      console.trace();\n    });\n  }; //end transfer\n  //end buyers print in algo\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: TransferAsset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 1\n    }\n  }, \"TransferAsset\"));\n};\n\n_s(AlgoTest, \"y+iuQbJ1lBENsvBCf87WOAKQVIk=\");\n\n_c = AlgoTest;\nexport default AlgoTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTest\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTest.js"],"names":["firebase","React","useState","useEffect","useCallback","AlgoTest","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","console","log","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","a","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","TransferAsset","algosdk","require","account1_mnemonic","account2_mnemonic","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount2","recoveredAccount3","addr","baseServer","port","token","algodclient","Algodv2","waitForConfirmation","txId","response","status","do","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","JSON","stringify","undefined","printAssetHolding","myassetholding","params","getTransactionParams","fee","flatFee","note","assetID","ptx","sender","recipient","revocationTarget","closeRemainderTo","amount","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","catch","e","trace","backgroundColor"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTest=()=>{\r\n\r\n    //algo\r\n\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);//\r\nconsole.log(\"firs1\",getAlgos)\r\nconsole.log(\"firs2\",getAlgoss)\r\n\r\n//algo\r\n\r\n\r\n//start buyers print in algo\r\n\r\n\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n  \r\n    getAlgos.map((a)=>{\r\n      console.log(`absalgos`, a)\r\n    \r\n      Object.keys(a).map((b)=>{\r\n      //  console.log(`bb`, b)\r\n        req2.push({\r\n          //addAcc:\r\n          addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n  useEffect(()=>{getalgo()},[getAlgoss])\r\n\r\n\r\n\r\n    //start transfer\r\n\r\n    const TransferAsset=async()=>{\r\n        const algosdk = require('algosdk');\r\n          var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n          var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\n          var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\n          var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n          //alert(arr[0]);\r\n          // var recoveredAccount1 = arr[0];\r\n          // var recoveredAccount2 = arr[0];\r\n          // var recoveredAccount3 = arr[0];\r\n          console.log(recoveredAccount3.addr);\r\n          const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n        // Function used to wait for a tx confirmation\r\n        const waitForConfirmation = async function (algodclient, txId) {\r\n          console.log(\"working\"+txId,algodclient);\r\n            let response = await algodclient.status().do();\r\n            console.log(\"response\",response);\r\n            let lastround = response[\"last-round\"];\r\n            while (true) {\r\n                const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n                if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n                    //Got the completed Transaction\r\n                    console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n                    break;\r\n                }\r\n                lastround++;\r\n                await algodclient.statusAfterBlock(lastround).do();\r\n            }\r\n        };\r\n        \r\n        // Function used to print created asset for account and assetid\r\n        const printCreatedAsset = async function (algodclient, account, assetid) {\r\n            // note: if you have an indexer instance available it is easier to just use this\r\n            //     let accountInfo = await indexerClient.searchAccounts()\r\n            //    .assetID(assetIndex).do();\r\n            // and in the loop below use this to extract the asset for a particular account\r\n            // accountInfo['accounts'][idx][account]);\r\n            let accountInfo = await algodclient.accountInformation(account).do();\r\n            for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n                let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n                if (scrutinizedAsset['index'] === assetid) {\r\n                    console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                    let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                    console.log(\"parms = \" + myparms);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        // Function used to print asset holding for account and assetid\r\n        const printAssetHolding = async function (algodclient, account, assetid) {\r\n            // note: if you have an indexer instance available it is easier to just use this\r\n            //     let accountInfo = await indexerClient.searchAccounts()\r\n            //    .assetID(assetIndex).do();\r\n            // and in the loop below use this to extract the asset for a particular account\r\n            // accountInfo['accounts'][idx][account]);\r\n            let accountInfo = await algodclient.accountInformation(account).do();\r\n            for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n                let scrutinizedAsset = accountInfo['assets'][idx];\r\n                if (scrutinizedAsset['asset-id'] === assetid) {\r\n                    let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                    console.log(\"assetholdinginfo = \" + myassetholding);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        \r\n        (async () => {\r\n        \r\n        \r\n          let params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n            console.log(params);\r\n            \r\n        \r\n            let note = undefined;\r\n            \r\n            let assetID = null;\r\n            console.log(\"working\");\r\n            \r\n            await waitForConfirmation(algodclient,'WCYE4WE65FHIGXUOK3IXEYDGBM6D3IP5UJXV52XOMA3D4BEV6SSA');\r\n            // Get the new asset's information from the creator account\r\n            let ptx = await algodclient.pendingTransactionInformation('WCYE4WE65FHIGXUOK3IXEYDGBM6D3IP5UJXV52XOMA3D4BEV6SSA').do();\r\n            assetID = ptx[\"asset-index\"];\r\n          \r\n          await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n          await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\r\n        \r\n          console.log(\"working178\")\r\n          \r\n          //this below is transfer usefull function\r\n        \r\n          // Opting in to an Asset:\r\n          // Opting in to transact with the new asset\r\n          // Allow accounts that want recieve the new asset\r\n          // Have to opt in. To do this they send an asset transfer\r\n          // of the new asset to themseleves \r\n          // In this example we are setting up the 3rd recovered account to \r\n          // receive the new asset\r\n        \r\n          // First update changing transaction parameters\r\n          // We will account for changing transaction parameters\r\n          // before every transaction in this example\r\n          //cmd now\r\n        \r\n            params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n        \r\n            let sender = recoveredAccount3.addr;\r\n            let recipient = sender;\r\n            // We set revocationTarget to undefined as \r\n            // This is not a clawback operation\r\n            let revocationTarget = undefined;\r\n            // CloseReaminerTo is set to undefined as\r\n            // we are not closing out an asset\r\n            let closeRemainderTo = undefined;\r\n            // We are sending 0 assets\r\n            let amount = 0;\r\n        //let note=undefined;\r\n        //assetID='15940921';\r\n        \r\n        console.log(\"working211\")\r\n        \r\n            // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n            let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n                 amount, note, assetID, params);\r\n        \r\n            // Must be signed by the account wishing to opt in to the asset    \r\n            let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n            let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n            console.log(\"Transaction : \" + opttx.txId);\r\n            // wait for transaction to be confirmed\r\n            await waitForConfirmation(algodclient, opttx.txId);\r\n        \r\n            //You should now see the new asset listed in the account information\r\n            console.log(\"Account3\" + recoveredAccount3.addr);\r\n            await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n        \r\n            console.log(\"working 227\")\r\n          \r\n        //     // Transfer New Asset:\r\n        //     // Now that account3 can recieve the new tokens \r\n        //     // we can tranfer tokens in from the creator\r\n        //     // to account3\r\n        //     // First update changing transaction parameters\r\n        //     // We will account for changing transaction parameters\r\n        //     // before every transaction in this example\r\n        \r\n        //cmd now\r\n        \r\n            params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n        \r\n            sender = recoveredAccount1.addr;\r\n            recipient = recoveredAccount3.addr;\r\n            revocationTarget = undefined;\r\n            closeRemainderTo = undefined;\r\n            //Amount of the asset to transfer\r\n            amount = 1000;\r\n        \r\n            // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n            let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n                 amount, note, assetID, params);\r\n            // Must be signed by the account sending the asset  \r\n            rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n            let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n            console.log(\"Transaction : \" + xtx.txId);\r\n            // wait for transaction to be confirmed\r\n            await waitForConfirmation(algodclient, xtx.txId);\r\n        \r\n            // You should now see the 10 assets listed in the account information\r\n            console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n            await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n        \r\n          })().catch(e => {\r\n            console.log(e);\r\n            console.trace();\r\n        });\r\n        }\r\n    \r\n    \r\n    \r\n      //end transfer\r\n    \r\n  \r\n  \r\n  //end buyers print in algo\r\n  return (\r\n\r\n    <div style={{backgroundColor:\"white\"}}>\r\n\r\n<button onClick={TransferAsset}>TransferAsset</button>\r\n\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default AlgoTest;"]},"metadata":{},"sourceType":"module"}
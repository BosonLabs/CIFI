{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTransfer.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport fireDb from \"./firebase\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTransfer = () => {\n  _s();\n\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]);\n\n  const getalgo = async () => {\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandDataprice\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      Object.keys(a).map(b => {\n        req2.push({\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic,\n          addprice: a[b].price,\n          addkeyId: a[b].keyId,\n          addsold: a[b].status,\n          addImgs: a[b].imageurl\n        });\n      });\n    });\n    setgetAlgoss(req2);\n  };\n\n  const TransferAsset = async a => {\n    //alert(\"transferasset\");\n    // console.log(\"buytx\",a.addtxid);\n    // console.log(\"buytx\",a.addalgocreator);\n    // console.log(\"buytx\",a.addprice);\n    let merge = a.addprice + '000000';\n\n    const algosdk = require('algosdk'); //var account1_mnemonic=a.addmnemonic;\n\n\n    let signedTx;\n    let tx;\n    let txParams;\n    AlgoSigner.connect().then(d => {\n      console.log(\"conn\", d);\n      let accounts;\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        console.log(\"accounts\", accounts[0]);\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          console.log(\"txparms\", d);\n          let getac = accounts[0].address; //console.log(\"stringcon\",getac);\n          //console.log(\"check\",a.addalgocreator);\n\n          AlgoSigner.sign({\n            from: getac,\n            to: a.addalgocreator,\n            amount: +merge,\n            note: undefined,\n            type: 'pay',\n            fee: txParams['min-fee'],\n            firstRound: txParams['last-round'],\n            lastRound: txParams['last-round'] + 1000,\n            genesisID: txParams['genesis-id'],\n            genesisHash: txParams['genesis-hash'],\n            flatFee: true\n          }).then(d => {\n            signedTx = d;\n            console.log(\"signedtx\", d);\n            AlgoSigner.send({\n              ledger: 'TestNet',\n              tx: signedTx.blob\n            }).then(d => {\n              tx = d;\n              console.log(\"tx\", d); //cut start\n\n              var account1_mnemonic = a.addmnemonic; //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n              //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n              //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n\n              var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n              var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic); //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n\n              var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic); //alert(arr[0]);\n              // var recoveredAccount1 = arr[0];\n              // var recoveredAccount2 = arr[0];\n              // var recoveredAccount3 = arr[0];\n\n              console.log(recoveredAccount3.addr);\n              console.log(recoveredAccount1.addr);\n              const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n              const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n              const token = {\n                'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n              };\n              let algodclient = new algosdk.Algodv2(token, baseServer, port);\n              console.log(\"algodclient\", algodclient); // Function used to wait for a tx confirmation\n\n              const waitForConfirmation = async function (algodclien, txId) {\n                //console.log(\"working return 133\",txId)\n                //console.log(\"workingalgo\"+algodclien);\n                let response = await algodclien.status().do(); //console.log(\"response\",response);\n\n                let lastround = response[\"last-round\"]; //console.log(\"lastround\",lastround);\n                //while (true) {\n                //console.log(\"inside while loop\");\n                //const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n                //console.log(\"insidewhileloop\",pendingInfo);\n                // if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n                //     //Got the completed Transaction\n                //     console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n                //     break;\n                // }\n                //lastround++;\n                // await algodclien.statusAfterBlock(lastround).do();\n                //console.log(\"finish while loop\");\n                //}\n                //console.log(\"outside while loop\");\n              }; // Function used to print created asset for account and assetid\n\n\n              const printCreatedAsset = async function (algodclient, account, assetid) {\n                // note: if you have an indexer instance available it is easier to just use this\n                //     let accountInfo = await indexerClient.searchAccounts()\n                //    .assetID(assetIndex).do();\n                // and in the loop below use this to extract the asset for a particular account\n                // accountInfo['accounts'][idx][account]);\n                let accountInfo = await algodclient.accountInformation(account).do();\n\n                for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n                  let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n                  if (scrutinizedAsset['index'] === assetid) {\n                    console.log(\"AssetID = \" + scrutinizedAsset['index']);\n                    let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n                    console.log(\"parms = \" + myparms);\n                    break;\n                  }\n                }\n              }; // Function used to print asset holding for account and assetid\n\n\n              const printAssetHolding = async function (algodclient, account, assetid) {\n                // note: if you have an indexer instance available it is easier to just use this\n                //     let accountInfo = await indexerClient.searchAccounts()\n                //    .assetID(assetIndex).do();\n                // and in the loop below use this to extract the asset for a particular account\n                // accountInfo['accounts'][idx][account]);\n                let accountInfo = await algodclient.accountInformation(account).do();\n\n                for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n                  let scrutinizedAsset = accountInfo['assets'][idx];\n\n                  if (scrutinizedAsset['asset-id'] === assetid) {\n                    let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n                    console.log(\"assetholdinginfo = \" + myassetholding);\n                    break;\n                  }\n                }\n              };\n\n              (async () => {\n                let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true; //console.log(params);              \n\n                let note = undefined;\n                let assetID = null; //console.log(\"working198\");\n                //console.log(\"beforealgoclient\",algodclient);\n                //console.log(a.addtxid);\n\n                await waitForConfirmation(algodclient, a.addtxid); //console.log(\"working return 209\")\n                // Get the new asset's information from the creator account\n                //let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\n                //console.log(\"working return 212\",ptx[\"asset-index\"]);\n                //assetID = ptx[\"asset-index\"];\n\n                assetID = a.addassetid;\n                await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n                await printAssetHolding(algodclient, recoveredAccount1.addr, assetID); //console.log(\"working178\")        \n                //this below is transfer usefull function      \n                // Opting in to an Asset:\n                // Opting in to transact with the new asset\n                // Allow accounts that want recieve the new asset\n                // Have to opt in. To do this they send an asset transfer\n                // of the new asset to themseleves \n                // In this example we are setting up the 3rd recovered account to \n                // receive the new asset      \n                // First update changing transaction parameters\n                // We will account for changing transaction parameters\n                // before every transaction in this example\n                //cmd now\n\n                params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true;\n                let sender = recoveredAccount3.addr;\n                let recipient = sender; // We set revocationTarget to undefined as \n                // This is not a clawback operation\n\n                let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n                // we are not closing out an asset\n\n                let closeRemainderTo = undefined; // We are sending 0 assets\n\n                let amount = 0; //let note=undefined;\n                //assetID='15940921';      \n                //console.log(\"working211\")      \n                // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n                let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n                let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n                let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n                console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n                await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n                console.log(\"Account3\" + recoveredAccount3.addr);\n                await printAssetHolding(algodclient, recoveredAccount3.addr, assetID); //console.log(\"working 227\")        \n                //     // Transfer New Asset:\n                //     // Now that account3 can recieve the new tokens \n                //     // we can tranfer tokens in from the creator\n                //     // to account3\n                //     // First update changing transaction parameters\n                //     // We will account for changing transaction parameters\n                //     // before every transaction in this example\n                //cmd now\n\n                params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n                params.fee = 1000;\n                params.flatFee = true;\n                sender = recoveredAccount1.addr;\n                recipient = recoveredAccount3.addr;\n                revocationTarget = undefined;\n                closeRemainderTo = undefined; //Amount of the asset to transfer\n\n                amount = 1000; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n                let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n                rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n                let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n                console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n                await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n                console.log(\"Account 3 = \" + recoveredAccount3.addr);\n                await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n              })().then(d => {\n                fireDb.database().ref(`algorandData/${recoveredAccount3.addr}`).child(a.addkeyId).set({\n                  createmnemonic: a.addmnemonic,\n                  algocreator: a.addalgocreator,\n                  algotrasnfer: \"\",\n                  algoid: a.addassetid,\n                  algoname: a.addalgoname,\n                  algosymbol: a.addalgosymbol,\n                  txnId: a.addtxid,\n                  AssetIdset: a.addassetid,\n                  transfer: recoveredAccount3.addr,\n                  status: \"sold\",\n                  price: a.addprice,\n                  keyId: a.addkeyId,\n                  imageurl: a.addImgs\n                });\n                fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).remove();\n                fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).remove(); //   fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n                //     createmnemonic:a.addmnemonic,\n                //     algocreator:a.addalgocreator,\n                //     algotrasnfer:\"\",\n                //     algoid:a.addassetid,\n                //     algoname:a.addalgoname,\n                //     algosymbol:a.addalgosymbol,\n                //     txnId:a.addtxid,\n                //     AssetIdset:a.addassetid,\n                //     transfer:recoveredAccount3.addr,\n                //     status:\"sold\",\n                //     price:a.addprice,\n                //     keyId:a.addkeyId,\n                //     imageurl:a.addImgs\n                // })\n              }).catch(e => {\n                console.log(e);\n                console.trace();\n              }); //cut stop\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  }; //end transfer\n  //end buyers print in algo\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 1\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: a.addImgs,\n      style: {\n        height: 120,\n        width: 120,\n        marginTop: '10px'\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addprice), a.addsold === '' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => TransferAsset(a),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 2\n      }\n    }, \"BuyNow\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 7\n      }\n    }, \"Already Sold\")))));\n  })));\n};\n\n_s(AlgoTransfer, \"GlqAclrlVn7tzX4Nrn2l1ZV6su0=\");\n\n_c = AlgoTransfer;\nexport default AlgoTransfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTransfer\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTransfer.js"],"names":["firebase","fireDb","React","useState","useEffect","useCallback","AlgoTransfer","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","a","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","addprice","price","addkeyId","keyId","addsold","status","addImgs","imageurl","TransferAsset","merge","algosdk","require","signedTx","tx","txParams","AlgoSigner","connect","then","console","log","accounts","ledger","algod","path","getac","address","sign","from","to","amount","note","undefined","type","fee","firstRound","lastRound","genesisID","genesisHash","flatFee","send","blob","account1_mnemonic","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount3","addr","baseServer","port","token","algodclient","Algodv2","waitForConfirmation","algodclien","txId","response","do","lastround","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","JSON","stringify","printAssetHolding","myassetholding","params","getTransactionParams","assetID","sender","recipient","revocationTarget","closeRemainderTo","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","child","set","algotrasnfer","AssetIdset","transfer","remove","catch","e","trace","error","backgroundColor","display","flexWrap","height","width","border","borderRadius","marginTop","color"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,WAAnC,QAAsD,OAAtD;;AACA,MAAMC,YAAY,GAAC,MAAI;AAAA;;AACvB,QAAK,CAACC,QAAD,EAAUC,WAAV,IAAuBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAK,CAACM,SAAD,EAAWC,YAAX,IAAyBP,QAAQ,CAAC,EAAD,CAAtC;;AACA,QAAMQ,OAAO,GAAG,YAAU;AACtB,QAAIC,GAAG,GAAG,EAAV;AACA,QAAIC,IAAI,GAAG,EAAX,CAFsB,CAER;;AACdb,IAAAA,QAAQ,CAACc,QAAT,GAAoBC,GAApB,CAAwB,mBAAxB,EAA6CC,EAA7C,CAAgD,OAAhD,EAA0DC,IAAD,IAAU;AACjE,UAAIA,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAACC,OAAL,CAAcC,CAAD,IAAO;AAClB;AACAP,UAAAA,GAAG,CAACQ,IAAJ,CAASD,CAAC,CAACE,GAAF,EAAT;AACD,SAHD;AAID;AACF,KAPD;AAQAb,IAAAA,WAAW,CAACI,GAAD,CAAX;AACAL,IAAAA,QAAQ,CAACe,GAAT,CAAcC,CAAD,IAAK;AAChBC,MAAAA,MAAM,CAACC,IAAP,CAAYF,CAAZ,EAAeD,GAAf,CAAoBI,CAAD,IAAK;AACtBb,QAAAA,IAAI,CAACO,IAAL,CAAU;AACdO,UAAAA,OAAO,EAACJ,CAAC,CAACG,CAAD,CAAD,CAAKE,KADC;AAEdC,UAAAA,UAAU,EAACN,CAAC,CAACG,CAAD,CAAD,CAAKI,MAFF;AAGdC,UAAAA,WAAW,EAACR,CAAC,CAACG,CAAD,CAAD,CAAKM,QAHH;AAIdC,UAAAA,aAAa,EAACV,CAAC,CAACG,CAAD,CAAD,CAAKQ,UAJL;AAKdC,UAAAA,cAAc,EAACZ,CAAC,CAACG,CAAD,CAAD,CAAKU,WALN;AAMdC,UAAAA,WAAW,EAACd,CAAC,CAACG,CAAD,CAAD,CAAKY,cANH;AAOdC,UAAAA,QAAQ,EAAChB,CAAC,CAACG,CAAD,CAAD,CAAKc,KAPA;AAQdC,UAAAA,QAAQ,EAAClB,CAAC,CAACG,CAAD,CAAD,CAAKgB,KARA;AASdC,UAAAA,OAAO,EAACpB,CAAC,CAACG,CAAD,CAAD,CAAKkB,MATC;AAUdC,UAAAA,OAAO,EAACtB,CAAC,CAACG,CAAD,CAAD,CAAKoB;AAVC,SAAV;AAYD,OAbD;AAcD,KAfD;AAgBApC,IAAAA,YAAY,CAACG,IAAD,CAAZ;AACD,GA7BH;;AA8BE,QAAMkC,aAAa,GAAC,MAAMxB,CAAN,IAAU;AAC5B;AACA;AACA;AACA;AACA,QAAIyB,KAAK,GAACzB,CAAC,CAACgB,QAAF,GAAW,QAArB;;AACE,UAAMU,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,CAN0B,CAO1B;;;AACE,QAAIC,QAAJ;AACA,QAAIC,EAAJ;AACA,QAAIC,QAAJ;AACAC,IAAAA,UAAU,CAACC,OAAX,GACDC,IADC,CACKrC,CAAD,IAAO;AACXsC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBvC,CAAnB;AACA,UAAIwC,QAAJ;AACAL,MAAAA,UAAU,CAACK,QAAX,CAAoB;AAClBC,QAAAA,MAAM,EAAE;AADU,OAApB,EAGCJ,IAHD,CAGOrC,CAAD,IAAO;AACXwC,QAAAA,QAAQ,GAAGxC,CAAX;AACAsC,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBC,QAAQ,CAAC,CAAD,CAA/B;AACAL,QAAAA,UAAU,CAACO,KAAX,CAAiB;AACfD,UAAAA,MAAM,EAAE,SADO;AAEfE,UAAAA,IAAI,EAAE;AAFS,SAAjB,EAICN,IAJD,CAIOrC,CAAD,IAAO;AACXkC,UAAAA,QAAQ,GAAGlC,CAAX;AACAsC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAsBvC,CAAtB;AACA,cAAI4C,KAAK,GAACJ,QAAQ,CAAC,CAAD,CAAR,CAAYK,OAAtB,CAHW,CAIX;AACA;;AACAV,UAAAA,UAAU,CAACW,IAAX,CAAgB;AACdC,YAAAA,IAAI,EAACH,KADS;AAEdI,YAAAA,EAAE,EAAE5C,CAAC,CAACY,cAFQ;AAGdiC,YAAAA,MAAM,EAAE,CAACpB,KAHK;AAIdqB,YAAAA,IAAI,EAAEC,SAJQ;AAKdC,YAAAA,IAAI,EAAE,KALQ;AAMdC,YAAAA,GAAG,EAAEnB,QAAQ,CAAC,SAAD,CANC;AAOdoB,YAAAA,UAAU,EAAEpB,QAAQ,CAAC,YAAD,CAPN;AAQdqB,YAAAA,SAAS,EAAErB,QAAQ,CAAC,YAAD,CAAR,GAAyB,IARtB;AASdsB,YAAAA,SAAS,EAAEtB,QAAQ,CAAC,YAAD,CATL;AAUduB,YAAAA,WAAW,EAAEvB,QAAQ,CAAC,cAAD,CAVP;AAWdwB,YAAAA,OAAO,EAAE;AAXK,WAAhB,EAaCrB,IAbD,CAaOrC,CAAD,IAAO;AACXgC,YAAAA,QAAQ,GAAGhC,CAAX;AACAsC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBvC,CAAvB;AACAmC,YAAAA,UAAU,CAACwB,IAAX,CAAgB;AACdlB,cAAAA,MAAM,EAAE,SADM;AAEdR,cAAAA,EAAE,EAAED,QAAQ,CAAC4B;AAFC,aAAhB,EAICvB,IAJD,CAIOrC,CAAD,IAAO;AACXiC,cAAAA,EAAE,GAAGjC,CAAL;AACAsC,cAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBvC,CAAjB,EAFW,CAGX;;AACR,kBAAI6D,iBAAiB,GAACzD,CAAC,CAACc,WAAxB,CAJmB,CAKnB;AACA;AACA;;AACA,kBAAI4C,iBAAiB,GAAG,iKAAxB;AACA,kBAAIC,iBAAiB,GAAGjC,OAAO,CAACkC,mBAAR,CAA4BH,iBAA5B,CAAxB,CATmB,CAUnB;;AACA,kBAAII,iBAAiB,GAAGnC,OAAO,CAACkC,mBAAR,CAA4BF,iBAA5B,CAAxB,CAXmB,CAYnB;AACA;AACA;AACA;;AACAxB,cAAAA,OAAO,CAACC,GAAR,CAAY0B,iBAAiB,CAACC,IAA9B;AACA5B,cAAAA,OAAO,CAACC,GAAR,CAAYwB,iBAAiB,CAACG,IAA9B;AACA,oBAAMC,UAAU,GAAG,+CAAnB;AACA,oBAAMC,IAAI,GAAG,EAAb,CAnBmB,CAoBnB;;AACA,oBAAMC,KAAK,GAAG;AAEV,6BAAc;AAFJ,eAAd;AAIA,kBAAIC,WAAW,GAAG,IAAIxC,OAAO,CAACyC,OAAZ,CAAoBF,KAApB,EAA2BF,UAA3B,EAAuCC,IAAvC,CAAlB;AACA9B,cAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B+B,WAA1B,EA1BmB,CA2BrB;;AACA,oBAAME,mBAAmB,GAAG,gBAAgBC,UAAhB,EAA4BC,IAA5B,EAAkC;AAC1D;AACF;AACE,oBAAIC,QAAQ,GAAG,MAAMF,UAAU,CAAChD,MAAX,GAAoBmD,EAApB,EAArB,CAH0D,CAI1D;;AACA,oBAAIC,SAAS,GAAGF,QAAQ,CAAC,YAAD,CAAxB,CAL0D,CAM1D;AACA;AACE;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;AAEA;AACH,eAtBD,CA5BqB,CAoDrB;;;AACA,oBAAMG,iBAAiB,GAAG,gBAAgBR,WAAhB,EAA6BS,OAA7B,EAAsCC,OAAtC,EAA+C;AACrE;AACA;AACA;AACA;AACA;AACA,oBAAIC,WAAW,GAAG,MAAMX,WAAW,CAACY,kBAAZ,CAA+BH,OAA/B,EAAwCH,EAAxC,EAAxB;;AACA,qBAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,WAAW,CAAC,gBAAD,CAAX,CAA8BG,MAAtD,EAA8DD,GAAG,EAAjE,EAAqE;AACjE,sBAAIE,gBAAgB,GAAGJ,WAAW,CAAC,gBAAD,CAAX,CAA8BE,GAA9B,CAAvB;;AACA,sBAAIE,gBAAgB,CAAC,OAAD,CAAhB,KAA8BL,OAAlC,EAA2C;AACvC1C,oBAAAA,OAAO,CAACC,GAAR,CAAY,eAAe8C,gBAAgB,CAAC,OAAD,CAA3C;AACA,wBAAIC,OAAO,GAAGC,IAAI,CAACC,SAAL,CAAeH,gBAAgB,CAAC,QAAD,CAA/B,EAA2ClC,SAA3C,EAAsD,CAAtD,CAAd;AACAb,oBAAAA,OAAO,CAACC,GAAR,CAAY,aAAa+C,OAAzB;AACA;AACH;AACJ;AACJ,eAhBD,CArDqB,CAsErB;;;AACA,oBAAMG,iBAAiB,GAAG,gBAAgBnB,WAAhB,EAA6BS,OAA7B,EAAsCC,OAAtC,EAA+C;AACrE;AACA;AACA;AACA;AACA;AACA,oBAAIC,WAAW,GAAG,MAAMX,WAAW,CAACY,kBAAZ,CAA+BH,OAA/B,EAAwCH,EAAxC,EAAxB;;AACA,qBAAK,IAAIO,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,WAAW,CAAC,QAAD,CAAX,CAAsBG,MAA9C,EAAsDD,GAAG,EAAzD,EAA6D;AACzD,sBAAIE,gBAAgB,GAAGJ,WAAW,CAAC,QAAD,CAAX,CAAsBE,GAAtB,CAAvB;;AACA,sBAAIE,gBAAgB,CAAC,UAAD,CAAhB,KAAiCL,OAArC,EAA8C;AAC1C,wBAAIU,cAAc,GAAGH,IAAI,CAACC,SAAL,CAAeH,gBAAf,EAAiClC,SAAjC,EAA4C,CAA5C,CAArB;AACAb,oBAAAA,OAAO,CAACC,GAAR,CAAY,wBAAwBmD,cAApC;AACA;AACH;AACJ;AACJ,eAfD;;AAiBA,eAAC,YAAY;AACX,oBAAIC,MAAM,GAAG,MAAMrB,WAAW,CAACsB,oBAAZ,GAAmChB,EAAnC,EAAnB,CADW,CAET;;AACAe,gBAAAA,MAAM,CAACtC,GAAP,GAAa,IAAb;AACAsC,gBAAAA,MAAM,CAACjC,OAAP,GAAiB,IAAjB,CAJS,CAKT;;AACA,oBAAIR,IAAI,GAAGC,SAAX;AACA,oBAAI0C,OAAO,GAAG,IAAd,CAPS,CAQT;AACA;AACA;;AACA,sBAAMrB,mBAAmB,CAACF,WAAD,EAAalE,CAAC,CAACI,OAAf,CAAzB,CAXS,CAYT;AACA;AACA;AACA;AACA;;AACAqF,gBAAAA,OAAO,GAACzF,CAAC,CAACM,UAAV;AACF,sBAAMoE,iBAAiB,CAACR,WAAD,EAAcP,iBAAiB,CAACG,IAAhC,EAAsC2B,OAAtC,CAAvB;AACA,sBAAMJ,iBAAiB,CAACnB,WAAD,EAAcP,iBAAiB,CAACG,IAAhC,EAAsC2B,OAAtC,CAAvB,CAnBW,CAoBX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEEF,gBAAAA,MAAM,GAAG,MAAMrB,WAAW,CAACsB,oBAAZ,GAAmChB,EAAnC,EAAf,CAlCS,CAmCT;;AACAe,gBAAAA,MAAM,CAACtC,GAAP,GAAa,IAAb;AACAsC,gBAAAA,MAAM,CAACjC,OAAP,GAAiB,IAAjB;AACA,oBAAIoC,MAAM,GAAG7B,iBAAiB,CAACC,IAA/B;AACA,oBAAI6B,SAAS,GAAGD,MAAhB,CAvCS,CAwCT;AACA;;AACA,oBAAIE,gBAAgB,GAAG7C,SAAvB,CA1CS,CA2CT;AACA;;AACA,oBAAI8C,gBAAgB,GAAG9C,SAAvB,CA7CS,CA8CT;;AACA,oBAAIF,MAAM,GAAG,CAAb,CA/CS,CAgDb;AACA;AACA;AACI;;AACA,oBAAIiD,MAAM,GAAGpE,OAAO,CAACqE,uCAAR,CAAgDL,MAAhD,EAAwDC,SAAxD,EAAmEE,gBAAnE,EAAqFD,gBAArF,EACR/C,MADQ,EACAC,IADA,EACM2C,OADN,EACeF,MADf,CAAb,CApDS,CAuDT;;AACA,oBAAIS,YAAY,GAAGF,MAAM,CAACG,OAAP,CAAepC,iBAAiB,CAACqC,EAAjC,CAAnB;AACA,oBAAIC,KAAK,GAAI,MAAMjC,WAAW,CAACkC,kBAAZ,CAA+BJ,YAA/B,EAA6CxB,EAA7C,EAAnB;AACAtC,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBgE,KAAK,CAAC7B,IAArC,EA1DS,CA2DT;;AACA,sBAAMF,mBAAmB,CAACF,WAAD,EAAciC,KAAK,CAAC7B,IAApB,CAAzB,CA5DS,CA8DT;;AACApC,gBAAAA,OAAO,CAACC,GAAR,CAAY,aAAa0B,iBAAiB,CAACC,IAA3C;AACA,sBAAMuB,iBAAiB,CAACnB,WAAD,EAAcL,iBAAiB,CAACC,IAAhC,EAAsC2B,OAAtC,CAAvB,CAhES,CAkEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEIF,gBAAAA,MAAM,GAAG,MAAMrB,WAAW,CAACsB,oBAAZ,GAAmChB,EAAnC,EAAf,CA7ES,CA8ET;;AACAe,gBAAAA,MAAM,CAACtC,GAAP,GAAa,IAAb;AACAsC,gBAAAA,MAAM,CAACjC,OAAP,GAAiB,IAAjB;AAEAoC,gBAAAA,MAAM,GAAG/B,iBAAiB,CAACG,IAA3B;AACA6B,gBAAAA,SAAS,GAAG9B,iBAAiB,CAACC,IAA9B;AACA8B,gBAAAA,gBAAgB,GAAG7C,SAAnB;AACA8C,gBAAAA,gBAAgB,GAAG9C,SAAnB,CArFS,CAsFT;;AACAF,gBAAAA,MAAM,GAAG,IAAT,CAvFS,CAyFT;;AACA,oBAAIwD,IAAI,GAAG3E,OAAO,CAACqE,uCAAR,CAAgDL,MAAhD,EAAwDC,SAAxD,EAAmEE,gBAAnE,EAAqFD,gBAArF,EACN/C,MADM,EACEC,IADF,EACQ2C,OADR,EACiBF,MADjB,CAAX,CA1FS,CA4FT;;AACAS,gBAAAA,YAAY,GAAGK,IAAI,CAACJ,OAAL,CAAatC,iBAAiB,CAACuC,EAA/B,CAAf;AACA,oBAAII,GAAG,GAAI,MAAMpC,WAAW,CAACkC,kBAAZ,CAA+BJ,YAA/B,EAA6CxB,EAA7C,EAAjB;AACAtC,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmBmE,GAAG,CAAChC,IAAnC,EA/FS,CAgGT;;AACA,sBAAMF,mBAAmB,CAACF,WAAD,EAAcoC,GAAG,CAAChC,IAAlB,CAAzB,CAjGS,CAmGT;;AACApC,gBAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiB0B,iBAAiB,CAACC,IAA/C;AACA,sBAAMuB,iBAAiB,CAACnB,WAAD,EAAcL,iBAAiB,CAACC,IAAhC,EAAsC2B,OAAtC,CAAvB;AAED,eAvGH,IAuGOxD,IAvGP,CAuGYrC,CAAC,IAAE;AAEXlB,gBAAAA,MAAM,CAACa,QAAP,GAAkBC,GAAlB,CAAuB,gBAAeqE,iBAAiB,CAACC,IAAK,EAA7D,EAAgEyC,KAAhE,CAAsEvG,CAAC,CAACkB,QAAxE,EAAkFsF,GAAlF,CAAsF;AACpFzF,kBAAAA,cAAc,EAACf,CAAC,CAACc,WADmE;AAEpFD,kBAAAA,WAAW,EAACb,CAAC,CAACY,cAFsE;AAGpF6F,kBAAAA,YAAY,EAAC,EAHuE;AAIpFlG,kBAAAA,MAAM,EAACP,CAAC,CAACM,UAJ2E;AAKpFG,kBAAAA,QAAQ,EAACT,CAAC,CAACQ,WALyE;AAMpFG,kBAAAA,UAAU,EAACX,CAAC,CAACU,aANuE;AAOpFL,kBAAAA,KAAK,EAACL,CAAC,CAACI,OAP4E;AAQpFsG,kBAAAA,UAAU,EAAC1G,CAAC,CAACM,UARuE;AASpFqG,kBAAAA,QAAQ,EAAC9C,iBAAiB,CAACC,IATyD;AAUpFzC,kBAAAA,MAAM,EAAC,MAV6E;AAWpFJ,kBAAAA,KAAK,EAACjB,CAAC,CAACgB,QAX4E;AAYpFG,kBAAAA,KAAK,EAACnB,CAAC,CAACkB,QAZ4E;AAapFK,kBAAAA,QAAQ,EAACvB,CAAC,CAACsB;AAbyE,iBAAtF;AAgBF5C,gBAAAA,MAAM,CAACa,QAAP,GAAkBC,GAAlB,CAAuB,qBAAoBQ,CAAC,CAACY,cAAe,EAA5D,EAA+D2F,KAA/D,CAAqEvG,CAAC,CAACkB,QAAvE,EAAiF0F,MAAjF;AACAlI,gBAAAA,MAAM,CAACa,QAAP,GAAkBC,GAAlB,CAAuB,gBAAeQ,CAAC,CAACY,cAAe,EAAvD,EAA0D2F,KAA1D,CAAgEvG,CAAC,CAACkB,QAAlE,EAA4E0F,MAA5E,GAnBa,CAqBf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEG,eA5IH,EA4IKC,KA5IL,CA4IWC,CAAC,IAAI;AACZ5E,gBAAAA,OAAO,CAACC,GAAR,CAAY2E,CAAZ;AACA5E,gBAAAA,OAAO,CAAC6E,KAAR;AACH,eA/ID,EAxFqB,CA0OX;AACD,aA/OD,EAgPCF,KAhPD,CAgPQC,CAAD,IAAO;AACZ5E,cAAAA,OAAO,CAAC8E,KAAR,CAAcF,CAAd;AACD,aAlPD;AAmPD,WAnQD,EAoQCD,KApQD,CAoQQC,CAAD,IAAO;AACV5E,YAAAA,OAAO,CAAC8E,KAAR,CAAcF,CAAd;AACH,WAtQD;AAwQD,SAlRD,EAmRCD,KAnRD,CAmRQC,CAAD,IAAO;AACZ5E,UAAAA,OAAO,CAAC8E,KAAR,CAAcF,CAAd;AACD,SArRD;AAsRD,OA5RD,EA6RCD,KA7RD,CA6RQC,CAAD,IAAO;AACZ5E,QAAAA,OAAO,CAAC8E,KAAR,CAAcF,CAAd;AACD,OA/RD;AAiSD,KArSC,EAsSDD,KAtSC,CAsSMC,CAAD,IAAO;AACZ5E,MAAAA,OAAO,CAAC8E,KAAR,CAAcF,CAAd;AACD,KAxSC;AAySP,GApTC,CAjCqB,CAuVnB;AACJ;;;AAGA,sBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEJ;AAAQ,IAAA,OAAO,EAAE1H,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFI,eAIJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJI,eAIK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJL,eAQJ;AAAK,IAAA,KAAK,EAAE;AAAC6H,MAAAA,eAAe,EAAC,OAAjB;AAAyBC,MAAAA,OAAO,EAAC,MAAjC;AAAwCC,MAAAA,QAAQ,EAAC;AAAjD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCjI,SAAS,CAACa,GAAV,CAAeC,CAAD,IAAK;AAChB,wBACE;AAAK,MAAA,KAAK,EAAE;AAACiH,QAAAA,eAAe,EAAC,OAAjB;AAAyBG,QAAAA,MAAM,EAAC,OAAhC;AAAwCC,QAAAA,KAAK,EAAC;AAA9C,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEN;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,MAAM,EAAE,iBAAT;AAA2BC,QAAAA,YAAY,EAAC;AAAxC,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQI;AAAO,MAAA,GAAG,EAAEvH,CAAC,CAACsB,OAAd;AAAwB,MAAA,KAAK,EAAE;AAAC8F,QAAAA,MAAM,EAAC,GAAR;AAAYC,QAAAA,KAAK,EAAC,GAAlB;AAAsBG,QAAAA,SAAS,EAAC;AAAhC,OAA/B;AAAwE,MAAA,GAAG,EAAC,EAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARJ,eAUI;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoCzH,CAAC,CAACQ,WAAtC,CAVJ,eAYI;AAAI,MAAA,KAAK,EAAE;AAACiH,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsCzH,CAAC,CAACU,aAAxC,CAZJ,eAcI;AAAI,MAAA,KAAK,EAAE;AAAC+G,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAqCzH,CAAC,CAACgB,QAAvC,CAdJ,EAgBMhB,CAAC,CAACoB,OAAF,KAAc,EAAd,gBACN,uDACC;AAAQ,MAAA,OAAO,EAAE,MAAII,aAAa,CAACxB,CAAD,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADM,gBAKA,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,CArBN,CAFA,CAFM,CADF;AAmCD,GApCF,CADD,CARI,CAFJ;AAyDC,CApZD;;GAAMjB,Y;;KAAAA,Y;AAqZN,eAAeA,YAAf","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport fireDb from \"./firebase\";\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTransfer=()=>{\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);\r\nconst getalgo = async() =>{\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandDataprice\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n    getAlgos.map((a)=>{\r\n      Object.keys(a).map((b)=>{\r\n        req2.push({\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic,\r\n    addprice:a[b].price,\r\n    addkeyId:a[b].keyId,\r\n    addsold:a[b].status,\r\n    addImgs:a[b].imageurl\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n  }\r\n  const TransferAsset=async(a)=>{\r\n    //alert(\"transferasset\");\r\n    // console.log(\"buytx\",a.addtxid);\r\n    // console.log(\"buytx\",a.addalgocreator);\r\n    // console.log(\"buytx\",a.addprice);\r\n    let merge=a.addprice+'000000'\r\n      const algosdk = require('algosdk');\r\n      //var account1_mnemonic=a.addmnemonic;\r\n        let signedTx;\r\n        let tx;\r\n        let txParams;\r\n        AlgoSigner.connect()\r\n      .then((d) => {\r\n        console.log(\"conn\",d);\r\n        let accounts;\r\n        AlgoSigner.accounts({\r\n          ledger: 'TestNet'\r\n        })\r\n        .then((d) => {\r\n          accounts = d;\r\n          console.log(\"accounts\",accounts[0]);\r\n          AlgoSigner.algod({\r\n            ledger: 'TestNet',\r\n            path: '/v2/transactions/params'\r\n          })\r\n          .then((d) => {\r\n            txParams = d;\r\n            console.log(\"txparms\",d);\r\n            let getac=accounts[0].address;\r\n            //console.log(\"stringcon\",getac);\r\n            //console.log(\"check\",a.addalgocreator);\r\n            AlgoSigner.sign({\r\n              from:getac,\r\n              to: a.addalgocreator,\r\n              amount: +merge,\r\n              note: undefined,\r\n              type: 'pay',\r\n              fee: txParams['min-fee'],\r\n              firstRound: txParams['last-round'],\r\n              lastRound: txParams['last-round'] + 1000,\r\n              genesisID: txParams['genesis-id'],\r\n              genesisHash: txParams['genesis-hash'],\r\n              flatFee: true\r\n            })\r\n            .then((d) => {\r\n              signedTx = d;\r\n              console.log(\"signedtx\",d);\r\n              AlgoSigner.send({\r\n                ledger: 'TestNet',\r\n                tx: signedTx.blob\r\n              })\r\n              .then((d) => {\r\n                tx = d;\r\n                console.log(\"tx\",d);\r\n                //cut start\r\n        var account1_mnemonic=a.addmnemonic;\r\n        //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n        var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\n        //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\n        var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n        //alert(arr[0]);\r\n        // var recoveredAccount1 = arr[0];\r\n        // var recoveredAccount2 = arr[0];\r\n        // var recoveredAccount3 = arr[0];\r\n        console.log(recoveredAccount3.addr);\r\n        console.log(recoveredAccount1.addr);\r\n        const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n        const port = \"\";\r\n        //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n        const token = {\r\n        \r\n            'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n        }\r\n        let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n        console.log(\"algodclient\",algodclient)\r\n      // Function used to wait for a tx confirmation\r\n      const waitForConfirmation = async function (algodclien, txId) {        \r\n          //console.log(\"working return 133\",txId)\r\n        //console.log(\"workingalgo\"+algodclien);\r\n          let response = await algodclien.status().do();\r\n          //console.log(\"response\",response);\r\n          let lastround = response[\"last-round\"];\r\n          //console.log(\"lastround\",lastround);\r\n          //while (true) {\r\n            //console.log(\"inside while loop\");\r\n              //const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n              //console.log(\"insidewhileloop\",pendingInfo);\r\n              // if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n              //     //Got the completed Transaction\r\n              //     console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n              //     break;\r\n              // }\r\n              //lastround++;\r\n              // await algodclien.statusAfterBlock(lastround).do();\r\n              //console.log(\"finish while loop\");\r\n          //}\r\n\r\n          //console.log(\"outside while loop\");\r\n      };\r\n      \r\n      // Function used to print created asset for account and assetid\r\n      const printCreatedAsset = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n              if (scrutinizedAsset['index'] === assetid) {\r\n                  console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                  let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                  console.log(\"parms = \" + myparms);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      // Function used to print asset holding for account and assetid\r\n      const printAssetHolding = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['assets'][idx];\r\n              if (scrutinizedAsset['asset-id'] === assetid) {\r\n                  let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                  console.log(\"assetholdinginfo = \" + myassetholding);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      \r\n      (async () => {      \r\n        let params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n          //console.log(params);              \r\n          let note = undefined;          \r\n          let assetID = null;\r\n          //console.log(\"working198\");\r\n          //console.log(\"beforealgoclient\",algodclient);\r\n          //console.log(a.addtxid);\r\n          await waitForConfirmation(algodclient,a.addtxid);\r\n          //console.log(\"working return 209\")\r\n          // Get the new asset's information from the creator account\r\n          //let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\r\n          //console.log(\"working return 212\",ptx[\"asset-index\"]);\r\n          //assetID = ptx[\"asset-index\"];\r\n          assetID=a.addassetid;        \r\n        await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n        await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);      \r\n        //console.log(\"working178\")        \r\n        //this below is transfer usefull function      \r\n        // Opting in to an Asset:\r\n        // Opting in to transact with the new asset\r\n        // Allow accounts that want recieve the new asset\r\n        // Have to opt in. To do this they send an asset transfer\r\n        // of the new asset to themseleves \r\n        // In this example we are setting up the 3rd recovered account to \r\n        // receive the new asset      \r\n        // First update changing transaction parameters\r\n        // We will account for changing transaction parameters\r\n        // before every transaction in this example\r\n        //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;      \r\n          let sender = recoveredAccount3.addr;\r\n          let recipient = sender;\r\n          // We set revocationTarget to undefined as \r\n          // This is not a clawback operation\r\n          let revocationTarget = undefined;\r\n          // CloseReaminerTo is set to undefined as\r\n          // we are not closing out an asset\r\n          let closeRemainderTo = undefined;\r\n          // We are sending 0 assets\r\n          let amount = 0;\r\n      //let note=undefined;\r\n      //assetID='15940921';      \r\n      //console.log(\"working211\")      \r\n          // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n          let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n      \r\n          // Must be signed by the account wishing to opt in to the asset    \r\n          let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n          let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + opttx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, opttx.txId);\r\n      \r\n          //You should now see the new asset listed in the account information\r\n          console.log(\"Account3\" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n      //console.log(\"working 227\")        \r\n      //     // Transfer New Asset:\r\n      //     // Now that account3 can recieve the new tokens \r\n      //     // we can tranfer tokens in from the creator\r\n      //     // to account3\r\n      //     // First update changing transaction parameters\r\n      //     // We will account for changing transaction parameters\r\n      //     // before every transaction in this example\r\n      \r\n      //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n      \r\n          sender = recoveredAccount1.addr;\r\n          recipient = recoveredAccount3.addr;\r\n          revocationTarget = undefined;\r\n          closeRemainderTo = undefined;\r\n          //Amount of the asset to transfer\r\n          amount = 1000;\r\n      \r\n          // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n          let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n          // Must be signed by the account sending the asset  \r\n          rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n          let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + xtx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, xtx.txId);\r\n      \r\n          // You should now see the 10 assets listed in the account information\r\n          console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n        })().then(d=>{\r\n\r\n          fireDb.database().ref(`algorandData/${recoveredAccount3.addr}`).child(a.addkeyId).set({\r\n            createmnemonic:a.addmnemonic,\r\n            algocreator:a.addalgocreator,\r\n            algotrasnfer:\"\",\r\n            algoid:a.addassetid,\r\n            algoname:a.addalgoname,\r\n            algosymbol:a.addalgosymbol,\r\n            txnId:a.addtxid,\r\n            AssetIdset:a.addassetid,\r\n            transfer:recoveredAccount3.addr,\r\n            status:\"sold\",\r\n            price:a.addprice,\r\n            keyId:a.addkeyId,\r\n            imageurl:a.addImgs\r\n        });\r\n\r\n        fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).remove();\r\n        fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).remove();\r\n\r\n      //   fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n      //     createmnemonic:a.addmnemonic,\r\n      //     algocreator:a.addalgocreator,\r\n      //     algotrasnfer:\"\",\r\n      //     algoid:a.addassetid,\r\n      //     algoname:a.addalgoname,\r\n      //     algosymbol:a.addalgosymbol,\r\n      //     txnId:a.addtxid,\r\n      //     AssetIdset:a.addassetid,\r\n      //     transfer:recoveredAccount3.addr,\r\n      //     status:\"sold\",\r\n      //     price:a.addprice,\r\n      //     keyId:a.addkeyId,\r\n      //     imageurl:a.addImgs\r\n      // })\r\n        \r\n        }).catch(e => {\r\n          console.log(e);\r\n          console.trace();\r\n      });\r\n\r\n\r\n                //cut stop\r\n              })\r\n              .catch((e) => {\r\n                console.error(e);\r\n              });\r\n            })\r\n            .catch((e) => {\r\n                console.error(e);\r\n            });\r\n          \r\n          })\r\n          .catch((e) => {\r\n            console.error(e);\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n      \r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n}\r\n  \r\n    //end transfer\r\n//end buyers print in algo\r\n\r\n\r\nreturn(\r\n\r\n    <div>\r\n\r\n<button onClick={getalgo}>GetAsset</button>\r\n\r\n<br></br><br></br>\r\n\r\n\r\n\r\n<div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    \r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\"    />\r\n  \r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>price : {a.addprice}</h6>\r\n\r\n    { a.addsold === '' ? (\r\n<> \r\n <button onClick={()=>TransferAsset(a)} >BuyNow</button>     \r\n</>\r\n    ):(\r\n      <>\r\n      <button >Already Sold</button> \r\n      </>\r\n\r\n    )}\r\n</center>\r\n</div>\r\n\r\n</div>\r\n )})}\r\n  </div>\r\n\r\n\r\n  \r\n\r\n  </div>\r\n\r\n);\r\n\r\n}\r\nexport default AlgoTransfer;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\GitC1.js\";\n\n/* global AlgoSigner */\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst GitC1 = () => {\n  const algosdk = require('algosdk');\n\n  let accounts; // user declared account mnemonics\n  //fund the two accounts below before creating\n  //ZUJHYU5L3PJV2O7WJMNRI44H5RYFKP4GVVWM2OQASAIG7K6FXEL526VSOY\n  //AlgoSigner.accounts({ ledger: 'TestNet' });\n\n  const de = async () => {\n    alert(\"de\");\n    AlgoSigner.connect().then(d => {\n      console.log(\"conn\", d);\n      let account;\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        account = d;\n        accounts = account[0].address;\n        console.log(\"accounts\", d);\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    }); //const creatorMnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    //A2PZYJLHZFM7XSNCRUXNZ2YGGHVAHYYQVIA5RE2KTJAHK7VKCQKKPHNX6A\n    //const userMnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    // user declared algod connection parameters\n    // const algodServer = \"http://localhost\";\n    // const algodToken = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const algodPort = 4001;\n\n    const algodServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const algodPort = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const algodToken = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    }; //let algodclient = new algosdk.Algodv2(algo, baseServer, port);  \n    // declare application state storage (immutable)\n\n    let localInts = 16;\n    let localBytes = 0;\n    let globalInts = 0;\n    let globalBytes = 1; // user declared approval program (initial)\n\n    var approvalProgramSourceInitial = `#pragma version 2\n// check if the app is being created\n// if so save creator\nint 0\ntxn ApplicationID\n==\nbz not_creation\nbyte \"Creator\"\ntxn Sender\napp_global_put\n//4 args on creation\nint 1\nreturn\nnot_creation:\n// check if this is deletion transaction\nint DeleteApplication\ntxn OnCompletion\n==\nbz not_deletion\nbyte \"Creator\"\napp_global_get\ntxn Sender\n==\nbz fail\nint 1\nreturn\nnot_deletion:\n//---\n// check if this is update ---\nint UpdateApplication\ntxn OnCompletion\n==\nbz not_update\n// verify that the creator is\n// making the call\nbyte \"Creator\"\napp_global_get\ntxn Sender\n==\nbz fail\nint 1\nreturn\nnot_update:\n// check if this is update ---\nint OptIn\ntxn OnCompletion\n==\nbz not_optin\nint 1\nreturn\nnot_optin:\nint CloseOut\ntxn OnCompletion\n==\nbz not_close\nint 1\nreturn\nnot_close:\n//normal call\nint NoOp\ntxn OnCompletion\n==\nbz fail\n// the call support \n// either open, close or execute\n// every call has two parms\ntxn NumAppArgs\nint 2\n==\nbz fail\ntxna ApplicationArgs 0\nbyte \"open\"\n==\nbnz open\ntxna ApplicationArgs 0\nbyte \"close\"\n==\nbnz close\ntxna ApplicationArgs 0\nbyte \"execute\"\n==\nbnz execute\nerr\nopen:\n// only works for app call\nglobal GroupSize\nint 1\n==\nbz fail\nint 0 //sender\ntxn ApplicationID //current smart contract\n// 2nd arg is order number\ntxna ApplicationArgs 1\napp_local_get_ex\n// if the value already exists fail\nbnz p_fail\npop\n// store the ordernumber as the key\nint 0\ntxna ApplicationArgs 1\nint 1\napp_local_put\nint 1\nreturn\n\nexecute:\n// Must be three transacitons\nglobal GroupSize\nint 3\n==\n// First Transaction must be a call to a stateful contract\ngtxn 0 TypeEnum\nint appl\n==\n&&\n// The second transaction must be a payment transaction \ngtxn 1 TypeEnum\nint pay\n==\n&&\n// The third transaction must be an asset transfer\ngtxn 2 TypeEnum\nint axfer\n==\n&&\nbz fail\nint 1 // Creator of order\ntxn ApplicationID // Current stateful smart contract\ntxna ApplicationArgs 1 // 2nd argument is order number\napp_local_get_ex\nbz p_fail // If the value doesnt exists fail\npop\n// Delete the ordernumber\nint 1 //creator of order\n// 2nd arg is order number\ntxna ApplicationArgs 1\napp_local_del\nint 1\nreturn\nclose:\n// only works for app call\nglobal GroupSize\nint 1\n==\nbz fail\nint 0 //account that opened order\ntxn ApplicationID //current smart contract\n// 2nd arg is order number\ntxna ApplicationArgs 1\napp_local_get_ex\n// if the value doesnt exists fail\nbz p_fail\npop\n// delete the ordernumber\nint 0 //account that opened order\n// 2nd arg is order number\ntxna ApplicationArgs 1\napp_local_del\nint 1\nreturn\nfail:\nint 0 \nreturn\np_fail:\npop\nint 0 \nreturn\n`; // declare clear state program source\n\n    let clearProgramSource = `#pragma version 2\nint 1\n`; // helper function to compile program source  \n\n    async function compileProgram(client, programSource) {\n      let encoder = new TextEncoder();\n      let programBytes = encoder.encode(programSource);\n      let compileResponse = await client.compile(programBytes).do();\n      let compiledBytes = new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n      return compiledBytes;\n    } // helper function to await transaction confirmation\n    // Function used to wait for a tx confirmation\n\n\n    const waitForConfirmation = async function (algodclient, txId) {\n      let status = await algodclient.status().do();\n      let lastRound = status[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastRound++;\n        await algodclient.statusAfterBlock(lastRound).do();\n      }\n    }; // create new application\n\n\n    async function createApp(client, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes) {\n      // define sender as creator\n      let sender = creatorAccount.addr; // declare onComplete as NoOp\n\n      let onComplete = algosdk.OnApplicationComplete.NoOpOC; // get node suggested parameters\n\n      let params = await client.getTransactionParams().do(); // create unsigned transaction\n\n      let txn = algosdk.makeApplicationCreateTxn(sender, params, onComplete, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let signedTxn = txn.signTxn(creatorAccount.sk);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(client, txId); // display results\n\n      let transactionResponse = await client.pendingTransactionInformation(txId).do();\n      let appId = transactionResponse['application-index'];\n      console.log(\"Created new app-id: \", appId);\n      return appId;\n    }\n\n    async function createToken(client, creatorAccount, userAccount) {\n      // get node suggested parameters\n      let params = await client.getTransactionParams().do();\n      params.fee = 1000;\n      params.flatFee = true;\n      let note = undefined; // Asset creation specific parameters\n      // The following parameters are asset specific\n      // Throughout the example these will be re-used. \n      // We will also change the manager later in the example\n\n      let addr = creatorAccount.addr; // Whether user accounts will need to be unfrozen before transacting    \n\n      let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n      let decimals = 0; // total number of this asset available for circulation   \n\n      let totalIssuance = 100000; // Used to display asset units to user    \n\n      let unitName = \"Algos\"; // Friendly name of the asset    \n\n      let assetName = \"DASS2\"; // Optional string pointing to a URL relating to the asset\n\n      let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n      let assetMetadataHash = undefined; // The following parameters are the only ones\n      // that can be changed, and they have to be changed\n      // by the current manager\n      // Specified address can change reserve, freeze, clawback, and manager\n\n      let manager = creatorAccount.addr; // Specified address is considered the asset reserve\n      // (it has no special privileges, this is only informational)\n\n      let reserve = creatorAccount.addr; // Specified address can freeze or unfreeze user asset holdings \n\n      let freeze = creatorAccount.addr; // Specified address can revoke user asset holdings and send \n      // them to other addresses    \n\n      let clawback = creatorAccount.addr; // signing and sending \"txn\" allows \"addr\" to create an asset\n\n      let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n      let txId = txn.txID().toString(); // Sign the transaction\n\n      let signedTxn = txn.signTxn(creatorAccount.sk);\n      console.log(\"Signed transaction with txID: %s\", txId); // Submit the transaction\n\n      await client.sendRawTransaction(signedTxn).do(); // Wait for confirmation\n\n      await waitForConfirmation(client, txId); //let accounts = await MyAlgoConnect.connect();\n      //console.log(\"acc\",accounts);\n      //let rawSignedTxn = txn.signTxn(creatorAccount.sk);\n      //let tx = (await client.sendRawTransaction(rawSignedTxn).do());\n      //console.log(\"Transaction : \" + tx.txId);\n\n      let assetID = null; // wait for transaction to be confirmed\n      //await waitForConfirmation(client, tx.txId);\n      // Get the new asset's information from the creator account\n\n      let ptx = await client.pendingTransactionInformation(txId).do();\n      assetID = ptx[\"asset-index\"];\n      let sender = userAccount.addr;\n      let recipient = sender; // We set revocationTarget to undefined as \n      // This is not a clawback operation\n\n      let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n      // we are not closing out an asset\n\n      let closeRemainderTo = undefined; // We are sending 0 assets\n\n      let amount = 0; // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n      let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n      let rawSignedTxn = opttxn.signTxn(userAccount.sk);\n      let opttx = await client.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(client, opttx.txId);\n      console.log(\"ASSETID=\" + assetID);\n    }\n\n    try {\n      // initialize an algodClient\n      let algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort); // get accounts from mnemonic\n      //let creatorAccount = algosdk.mnemonicToSecretKey(creatorMnemonic);\n      //let userAccount = algosdk.mnemonicToSecretKey(userMnemonic);\n      //let creatorAccount = algosdk.mnemonicToSecretKey(accounts[0].address);\n      //let userAccount = algosdk.mnemonicToSecretKey(accounts[0].address);\n\n      let creatorAccount = accounts;\n      let userAccount = accounts; //create sample token and optin note the switch of accounts\n      //useraccount will be the token creator\n\n      let dd = await createToken(algodClient, userAccount, creatorAccount);\n      console.log(\"dd\", dd); // compile programs \n\n      let approvalProgram = await compileProgram(algodClient, approvalProgramSourceInitial);\n      let clearProgram = await compileProgram(algodClient, clearProgramSource); // create new application\n\n      let appId = await createApp(algodClient, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\n      console.log(\"APPID=\" + appId);\n    } catch (err) {\n      console.log(\"err\", err);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => de(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 9\n    }\n  }, \"Check\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  }));\n};\n\n_c = GitC1;\nexport default GitC1;\n\nvar _c;\n\n$RefreshReg$(_c, \"GitC1\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/GitC1.js"],"names":["React","useState","useEffect","useCallback","GitC1","algosdk","require","accounts","de","alert","AlgoSigner","connect","then","d","console","log","account","ledger","address","catch","e","error","algodServer","algodPort","algodToken","localInts","localBytes","globalInts","globalBytes","approvalProgramSourceInitial","clearProgramSource","compileProgram","client","programSource","encoder","TextEncoder","programBytes","encode","compileResponse","compile","do","compiledBytes","Uint8Array","Buffer","from","result","waitForConfirmation","algodclient","txId","status","lastRound","pendingInfo","pendingTransactionInformation","statusAfterBlock","createApp","creatorAccount","approvalProgram","clearProgram","sender","addr","onComplete","OnApplicationComplete","NoOpOC","params","getTransactionParams","txn","makeApplicationCreateTxn","txID","toString","signedTxn","signTxn","sk","sendRawTransaction","transactionResponse","appId","createToken","userAccount","fee","flatFee","note","undefined","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","makeAssetCreateTxnWithSuggestedParams","assetID","ptx","recipient","revocationTarget","closeRemainderTo","amount","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","opttx","algodClient","Algodv2","dd","err"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst GitC1=()=>{\r\n\r\nconst algosdk = require('algosdk');\r\nlet accounts;\r\n\r\n\r\n\r\n\r\n\r\n// user declared account mnemonics\r\n\r\n//fund the two accounts below before creating\r\n//ZUJHYU5L3PJV2O7WJMNRI44H5RYFKP4GVVWM2OQASAIG7K6FXEL526VSOY\r\n//AlgoSigner.accounts({ ledger: 'TestNet' });\r\n\r\nconst de=async()=>{\r\n\r\n    alert(\"de\");\r\n\r\n    \r\n        AlgoSigner.connect()\r\n    .then((d) => {\r\n      console.log(\"conn\",d);\r\n      let account;\r\n      AlgoSigner.accounts({\r\n        ledger: 'TestNet'\r\n      })\r\n      .then((d) => {\r\n        account = d;\r\n        accounts=account[0].address;\r\n\r\n        console.log(\"accounts\",d);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n    })\r\n    .catch((e) => {\r\n        console.error(e);\r\n    });\r\n    \r\n\r\n\r\n//const creatorMnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n//A2PZYJLHZFM7XSNCRUXNZ2YGGHVAHYYQVIA5RE2KTJAHK7VKCQKKPHNX6A\r\n//const userMnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n\r\n\r\n\r\n// user declared algod connection parameters\r\n// const algodServer = \"http://localhost\";\r\n// const algodToken = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const algodPort = 4001;\r\nconst algodServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n  const algodPort = \"\";\r\n  //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n  const algodToken = {\r\n  \r\n      'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n  }\r\n  //let algodclient = new algosdk.Algodv2(algo, baseServer, port);  \r\n// declare application state storage (immutable)\r\n\r\nlet localInts = 16;\r\nlet localBytes = 0;\r\nlet globalInts = 0;\r\nlet globalBytes = 1;\r\n\r\n// user declared approval program (initial)\r\nvar approvalProgramSourceInitial = `#pragma version 2\r\n// check if the app is being created\r\n// if so save creator\r\nint 0\r\ntxn ApplicationID\r\n==\r\nbz not_creation\r\nbyte \"Creator\"\r\ntxn Sender\r\napp_global_put\r\n//4 args on creation\r\nint 1\r\nreturn\r\nnot_creation:\r\n// check if this is deletion transaction\r\nint DeleteApplication\r\ntxn OnCompletion\r\n==\r\nbz not_deletion\r\nbyte \"Creator\"\r\napp_global_get\r\ntxn Sender\r\n==\r\nbz fail\r\nint 1\r\nreturn\r\nnot_deletion:\r\n//---\r\n// check if this is update ---\r\nint UpdateApplication\r\ntxn OnCompletion\r\n==\r\nbz not_update\r\n// verify that the creator is\r\n// making the call\r\nbyte \"Creator\"\r\napp_global_get\r\ntxn Sender\r\n==\r\nbz fail\r\nint 1\r\nreturn\r\nnot_update:\r\n// check if this is update ---\r\nint OptIn\r\ntxn OnCompletion\r\n==\r\nbz not_optin\r\nint 1\r\nreturn\r\nnot_optin:\r\nint CloseOut\r\ntxn OnCompletion\r\n==\r\nbz not_close\r\nint 1\r\nreturn\r\nnot_close:\r\n//normal call\r\nint NoOp\r\ntxn OnCompletion\r\n==\r\nbz fail\r\n// the call support \r\n// either open, close or execute\r\n// every call has two parms\r\ntxn NumAppArgs\r\nint 2\r\n==\r\nbz fail\r\ntxna ApplicationArgs 0\r\nbyte \"open\"\r\n==\r\nbnz open\r\ntxna ApplicationArgs 0\r\nbyte \"close\"\r\n==\r\nbnz close\r\ntxna ApplicationArgs 0\r\nbyte \"execute\"\r\n==\r\nbnz execute\r\nerr\r\nopen:\r\n// only works for app call\r\nglobal GroupSize\r\nint 1\r\n==\r\nbz fail\r\nint 0 //sender\r\ntxn ApplicationID //current smart contract\r\n// 2nd arg is order number\r\ntxna ApplicationArgs 1\r\napp_local_get_ex\r\n// if the value already exists fail\r\nbnz p_fail\r\npop\r\n// store the ordernumber as the key\r\nint 0\r\ntxna ApplicationArgs 1\r\nint 1\r\napp_local_put\r\nint 1\r\nreturn\r\n\r\nexecute:\r\n// Must be three transacitons\r\nglobal GroupSize\r\nint 3\r\n==\r\n// First Transaction must be a call to a stateful contract\r\ngtxn 0 TypeEnum\r\nint appl\r\n==\r\n&&\r\n// The second transaction must be a payment transaction \r\ngtxn 1 TypeEnum\r\nint pay\r\n==\r\n&&\r\n// The third transaction must be an asset transfer\r\ngtxn 2 TypeEnum\r\nint axfer\r\n==\r\n&&\r\nbz fail\r\nint 1 // Creator of order\r\ntxn ApplicationID // Current stateful smart contract\r\ntxna ApplicationArgs 1 // 2nd argument is order number\r\napp_local_get_ex\r\nbz p_fail // If the value doesnt exists fail\r\npop\r\n// Delete the ordernumber\r\nint 1 //creator of order\r\n// 2nd arg is order number\r\ntxna ApplicationArgs 1\r\napp_local_del\r\nint 1\r\nreturn\r\nclose:\r\n// only works for app call\r\nglobal GroupSize\r\nint 1\r\n==\r\nbz fail\r\nint 0 //account that opened order\r\ntxn ApplicationID //current smart contract\r\n// 2nd arg is order number\r\ntxna ApplicationArgs 1\r\napp_local_get_ex\r\n// if the value doesnt exists fail\r\nbz p_fail\r\npop\r\n// delete the ordernumber\r\nint 0 //account that opened order\r\n// 2nd arg is order number\r\ntxna ApplicationArgs 1\r\napp_local_del\r\nint 1\r\nreturn\r\nfail:\r\nint 0 \r\nreturn\r\np_fail:\r\npop\r\nint 0 \r\nreturn\r\n`;\r\n \r\n// declare clear state program source\r\nlet clearProgramSource = `#pragma version 2\r\nint 1\r\n`;\r\n\r\n// helper function to compile program source  \r\nasync function compileProgram(client, programSource) {\r\n    let encoder = new TextEncoder();\r\n    let programBytes = encoder.encode(programSource);\r\n    let compileResponse = await client.compile(programBytes).do();\r\n    let compiledBytes = new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\r\n    return compiledBytes;\r\n}\r\n\r\n// helper function to await transaction confirmation\r\n// Function used to wait for a tx confirmation\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n    let status = (await algodclient.status().do());\r\n    let lastRound = status[\"last-round\"];\r\n      while (true) {\r\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n          //Got the completed Transaction\r\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n          break;\r\n        }\r\n        lastRound++;\r\n        await algodclient.statusAfterBlock(lastRound).do();\r\n      }\r\n    };\r\n\r\n// create new application\r\nasync function createApp(client, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes) {\r\n    // define sender as creator\r\n    let sender = creatorAccount.addr;\r\n\r\n    // declare onComplete as NoOp\r\n    let onComplete = algosdk.OnApplicationComplete.NoOpOC;\r\n\r\n\t// get node suggested parameters\r\n    let params = await client.getTransactionParams().do();\r\n\r\n    // create unsigned transaction\r\n    let txn = algosdk.makeApplicationCreateTxn(sender, params, onComplete, \r\n                                            approvalProgram, clearProgram, \r\n                                            localInts, localBytes, globalInts, globalBytes,);\r\n    let txId = txn.txID().toString();\r\n\r\n    // Sign the transaction\r\n    let signedTxn = txn.signTxn(creatorAccount.sk);\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n\r\n    // Submit the transaction\r\n    await client.sendRawTransaction(signedTxn).do();\r\n\r\n    // Wait for confirmation\r\n    await waitForConfirmation(client, txId);\r\n\r\n    // display results\r\n    let transactionResponse = await client.pendingTransactionInformation(txId).do();\r\n    let appId = transactionResponse['application-index'];\r\n    console.log(\"Created new app-id: \",appId);\r\n    return appId;\r\n}\r\nasync function createToken(client, creatorAccount, userAccount){\r\n\r\n    // get node suggested parameters\r\n    let params = await client.getTransactionParams().do();\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n    let note = undefined;\r\n    // Asset creation specific parameters\r\n    // The following parameters are asset specific\r\n    // Throughout the example these will be re-used. \r\n    // We will also change the manager later in the example\r\n    let addr = creatorAccount.addr;\r\n    // Whether user accounts will need to be unfrozen before transacting    \r\n    let defaultFrozen = false;\r\n    // integer number of decimals for asset unit calculation\r\n    let decimals = 0;\r\n    // total number of this asset available for circulation   \r\n    let totalIssuance = 100000;\r\n    // Used to display asset units to user    \r\n    let unitName = \"Algos\";\r\n    // Friendly name of the asset    \r\n    let assetName = \"DASS2\";\r\n    // Optional string pointing to a URL relating to the asset\r\n    let assetURL = \"http://someurl\";\r\n    // Optional hash commitment of some sort relating to the asset. 32 character length.\r\n    let assetMetadataHash = undefined;\r\n\r\n    // The following parameters are the only ones\r\n    // that can be changed, and they have to be changed\r\n    // by the current manager\r\n    // Specified address can change reserve, freeze, clawback, and manager\r\n    let manager = creatorAccount.addr;\r\n    // Specified address is considered the asset reserve\r\n    // (it has no special privileges, this is only informational)\r\n    let reserve = creatorAccount.addr;\r\n    // Specified address can freeze or unfreeze user asset holdings \r\n    let freeze = creatorAccount.addr;\r\n    // Specified address can revoke user asset holdings and send \r\n    // them to other addresses    \r\n    let clawback = creatorAccount.addr;\r\n\r\n    // signing and sending \"txn\" allows \"addr\" to create an asset\r\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n            totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n        clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n    let txId = txn.txID().toString();\r\n\r\n        // Sign the transaction\r\n    let signedTxn = txn.signTxn(creatorAccount.sk);\r\n    console.log(\"Signed transaction with txID: %s\", txId);\r\n    \r\n    // Submit the transaction\r\n    await client.sendRawTransaction(signedTxn).do();\r\n    \r\n    // Wait for confirmation\r\n    await waitForConfirmation(client, txId);\r\n\r\n    \r\n\r\n    //let accounts = await MyAlgoConnect.connect();\r\n\r\n//console.log(\"acc\",accounts);\r\n\r\n\r\n\r\n    //let rawSignedTxn = txn.signTxn(creatorAccount.sk);\r\n\r\n    //let tx = (await client.sendRawTransaction(rawSignedTxn).do());\r\n    //console.log(\"Transaction : \" + tx.txId);\r\n    let assetID = null;\r\n    // wait for transaction to be confirmed\r\n    //await waitForConfirmation(client, tx.txId);\r\n    // Get the new asset's information from the creator account\r\n    let ptx = await client.pendingTransactionInformation(txId).do();\r\n    assetID = ptx[\"asset-index\"];\r\n\r\n\r\n    let sender = userAccount.addr;\r\n    let recipient = sender;\r\n    // We set revocationTarget to undefined as \r\n    // This is not a clawback operation\r\n    let revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as\r\n    // we are not closing out an asset\r\n    let closeRemainderTo = undefined;\r\n    // We are sending 0 assets\r\n    let amount = 0;\r\n    // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n    let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n            amount, note, assetID, params);\r\n    // Must be signed by the account wishing to opt in to the asset    \r\n    let rawSignedTxn = opttxn.signTxn(userAccount.sk);\r\n    let opttx = (await client.sendRawTransaction(rawSignedTxn).do());\r\n    console.log(\"Transaction : \" + opttx.txId);\r\n    // wait for transaction to be confirmed\r\n    await waitForConfirmation(client, opttx.txId);\r\n\r\n    console.log( \"ASSETID=\"+assetID);\r\n}\r\n\r\ntry {\r\n    // initialize an algodClient\r\n    let algodClient = new algosdk.Algodv2(algodToken, algodServer, algodPort);\r\n\r\n    // get accounts from mnemonic\r\n    //let creatorAccount = algosdk.mnemonicToSecretKey(creatorMnemonic);\r\n    //let userAccount = algosdk.mnemonicToSecretKey(userMnemonic);\r\n    //let creatorAccount = algosdk.mnemonicToSecretKey(accounts[0].address);\r\n    //let userAccount = algosdk.mnemonicToSecretKey(accounts[0].address);\r\n    let creatorAccount =  accounts;\r\n    let userAccount = accounts;\r\n    \r\n    //create sample token and optin note the switch of accounts\r\n    //useraccount will be the token creator\r\n    let dd=await createToken(algodClient, userAccount, creatorAccount);\r\n    console.log(\"dd\",dd);\r\n\r\n    // compile programs \r\n    let approvalProgram = await compileProgram(algodClient, approvalProgramSourceInitial);\r\n    let clearProgram = await compileProgram(algodClient, clearProgramSource);\r\n\r\n    // create new application\r\n    let appId = await createApp(algodClient, creatorAccount, approvalProgram, clearProgram, localInts, localBytes, globalInts, globalBytes);\r\n    console.log( \"APPID=\"+appId);\r\n\r\n    }\r\n    catch (err){\r\n        console.log(\"err\", err);  \r\n    }\r\n\r\n\r\n}\r\n\r\n    return(\r\n        <>\r\n        <button onClick={()=>de()} >Check</button>     \r\n        <br></br>\r\n        {/* <button onClick={()=>getAl()} >Algo</button>      */}\r\n        </>\r\n    );\r\n\r\n\r\n}\r\nexport default GitC1;"]},"metadata":{},"sourceType":"module"}
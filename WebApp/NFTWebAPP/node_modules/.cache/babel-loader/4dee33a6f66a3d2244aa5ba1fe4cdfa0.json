{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\NewIpfs.js\";\n// /* global AlgoSigner */\n// import firebase from \"firebase\";\n// import fireDb from \"./firebase\";\n// import Popup from './Popup';\n// import axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewIpfs = () => {\n  const getSHA = fileName => {\n    return new Promise((resolve, reject) => {\n      let hash = crypto.createHash(\"sha1\");\n      let stream = fs.createReadStream(fileName);\n      stream.on(\"error\", err => reject(err));\n      stream.on(\"data\", chunk => hash.update(chunk));\n      stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\n    });\n  };\n\n  let pinataApiKey = '88348e7ce84879e143e1';\n  let pinataSecretApiKey = 'e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\n\n  const pinataSDK = require('@pinata/sdk');\n\n  const pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\n\n  const loadDoc = () => {\n    getSHA('./dhon.png');\n    alert(\"new\");\n    pinata.testAuthentication().then(result => {\n      //handle successful authentication here\n      console.log(result);\n      const metadata = {\n        name: 'demo',\n        keyvalues: {\n          newKey: 'demos',\n          existingKey: 'demos',\n          existingKeyToRemove: null\n        }\n      };\n      pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then(result => {\n        //handle results here\n        console.log(result);\n        pinata.userPinnedDataTotal().then(result => {\n          //handle results here\n          console.log(\"result\");\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //start\n        // const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\n        // console.log(sourcePath);\n        // const options = {\n        //     pinataMetadata: {\n        //         name: 'My Awesome Website',\n        //         keyvalues: {\n        //             customKey: 'customValue',\n        //             customKey2: 'customValue2'\n        //         }\n        //     },\n        //     pinataOptions: {\n        //         cidVersion: 0\n        //     }\n        // };\n        // pinata.pinFromFS(sourcePath, options).then((result) => {\n        //     //handle results here\n        //     console.log(result);\n        // }).catch((err) => {\n        //     //handle error here\n        //     console.log(\"error\");\n        //     console.log(\"error\",err);\n        // });\n\n        const fs = require('fs');\n\n        const readableStreamForFile = fs.createReadStream('./dhon.png');\n        console.log(\"reaf\", readableStreamForFile);\n        const options = {\n          pinataMetadata: {\n            name: 'MyCustomName',\n            keyvalues: {\n              customKey: 'customValue',\n              customKey2: 'customValue2'\n            }\n          },\n          pinataOptions: {\n            cidVersion: 0\n          }\n        };\n        pinata.pinFileToIPFS(readableStreamForFile, options).then(result => {\n          //handle results here\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //end\n      }).catch(err => {\n        //handle error here\n        console.log(err);\n      });\n    }).catch(err => {\n      //handle error here\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: loadDoc,\n        children: \"Algorand \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewIpfs;\nexport default NewIpfs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIpfs\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/NewIpfs.js"],"names":["React","useState","useEffect","useCallback","fs","NewIpfs","getSHA","fileName","Promise","resolve","reject","hash","crypto","createHash","stream","createReadStream","on","err","chunk","update","digest","pinataApiKey","pinataSecretApiKey","pinataSDK","require","pinata","loadDoc","alert","testAuthentication","then","result","console","log","metadata","name","keyvalues","newKey","existingKey","existingKeyToRemove","hashMetadata","userPinnedDataTotal","catch","readableStreamForFile","options","pinataMetadata","customKey","customKey2","pinataOptions","cidVersion","pinFileToIPFS","color"],"mappings":"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","sourcesContent":["// /* global AlgoSigner */\r\n// import firebase from \"firebase\";\r\n// import fireDb from \"./firebase\";\r\n// import Popup from './Popup';\r\n// import axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nimport fs from 'fs';\r\nconst NewIpfs=()=>{\r\n\r\n\r\n    const getSHA=(fileName)=> {\r\n        return new Promise((resolve, reject) => {\r\n          let hash = crypto.createHash(\"sha1\");\r\n          let stream = fs.createReadStream(fileName);\r\n          stream.on(\"error\", err => reject(err));\r\n          stream.on(\"data\", chunk => hash.update(chunk));\r\n          stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\r\n        });\r\n      }\r\n\r\n    let pinataApiKey='88348e7ce84879e143e1';\r\n    let pinataSecretApiKey='e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\r\n\r\nconst pinataSDK = require('@pinata/sdk');\r\nconst pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\r\nconst loadDoc=()=>{\r\n\r\n    getSHA('./dhon.png')\r\n\r\n    alert(\"new\");\r\n\r\n    pinata.testAuthentication().then((result) => {\r\n        //handle successful authentication here\r\n        console.log(result);\r\n\r\n\r\n        const metadata = {\r\n            name: 'demo',\r\n            keyvalues: {\r\n                newKey: 'demos',\r\n                existingKey: 'demos',\r\n                existingKeyToRemove: null\r\n            }\r\n        };\r\n        pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then((result) => {\r\n            //handle results here\r\n            console.log(result);\r\n\r\n            pinata.userPinnedDataTotal().then((result) => {\r\n                //handle results here\r\n                console.log(\"result\");\r\n                console.log(result);\r\n\r\n            }).catch((err) => {\r\n                //handle error here\r\n                console.log(err);\r\n            });\r\n\r\n\r\n            \r\n            //start\r\n\r\n// const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\r\n// console.log(sourcePath);\r\n// const options = {\r\n//     pinataMetadata: {\r\n//         name: 'My Awesome Website',\r\n//         keyvalues: {\r\n//             customKey: 'customValue',\r\n//             customKey2: 'customValue2'\r\n//         }\r\n//     },\r\n//     pinataOptions: {\r\n//         cidVersion: 0\r\n//     }\r\n// };\r\n// pinata.pinFromFS(sourcePath, options).then((result) => {\r\n//     //handle results here\r\n//     console.log(result);\r\n// }).catch((err) => {\r\n//     //handle error here\r\n//     console.log(\"error\");\r\n//     console.log(\"error\",err);\r\n\r\n// });\r\n\r\n\r\nconst fs = require('fs');\r\nconst readableStreamForFile = fs.createReadStream('./dhon.png');\r\nconsole.log(\"reaf\",readableStreamForFile)\r\nconst options = {\r\n    pinataMetadata: {\r\n        name: 'MyCustomName',\r\n        keyvalues: {\r\n            customKey: 'customValue',\r\n            customKey2: 'customValue2'\r\n        }\r\n    },\r\n    pinataOptions: {\r\n        cidVersion: 0\r\n    }\r\n};\r\npinata.pinFileToIPFS(readableStreamForFile, options).then((result) => {\r\n    //handle results here\r\n    console.log(result);\r\n}).catch((err) => {\r\n    //handle error here\r\n    console.log(err);\r\n});\r\n\r\n\r\n\r\n\r\n            //end\r\n\r\n\r\n\r\n\r\n        }).catch((err) => {\r\n            //handle error here\r\n            console.log(err);\r\n        });\r\n\r\n    }).catch((err) => {\r\n        //handle error here\r\n        console.log(err);\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n  \r\n  return (\r\n    <div >\r\n\r\n        <h1 style={{color:'white'}}>hello</h1>\r\n\r\n        <div style={{color:'white'}}>\r\n\r\n      <button type=\"submit\" onClick={loadDoc}>Algorand </button>\r\n      </div>\r\n      \r\n  </div>\r\n  );\r\n}\r\nexport default NewIpfs;"]},"metadata":{},"sourceType":"module"}
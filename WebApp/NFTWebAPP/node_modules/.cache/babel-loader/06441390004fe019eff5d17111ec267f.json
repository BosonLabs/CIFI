{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar readdirr = require('./readdirr').readdirr;\n/**\n * Copy directory recursively\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Function} callback\n * @api public\n */\n\n\nexports.cpdirr = function (spath, tpath, cb) {\n  readdirr(spath, function (err, dirs, files) {\n    if (err) return cb(err);\n    exports.cpdirs(spath, tpath, dirs, function (err) {\n      if (err) return cb(err);\n      exports.cpfiles(spath, tpath, files, function (err) {\n        if (err) return cb(err);\n        cb();\n      });\n    });\n  });\n};\n/**\n * Copy a list of directories\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Array} dirs\n * @param {Function} callback\n * @api public\n */\n\n\nexports.cpdirs = function (spath, tpath, dirs, cb) {\n  dirs.sort();\n\n  (function loop(index) {\n    if (index == dirs.length) return cb();\n    var rpath = path.relative(spath, dirs[index]);\n    rpath = path.join(tpath, rpath);\n    fs.exists(rpath, function (exists) {\n      if (exists) return loop(++index);\n      fs.mkdir(rpath, function (err) {\n        if (err) return cb(err);\n        loop(++index);\n      });\n    });\n  })(0);\n};\n/**\n * Copy a list of files\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Array} files\n * @param {Function} callback\n * @api public\n */\n\n\nexports.cpfiles = function (spath, tpath, files, cb) {\n  ;\n\n  (function loop(index) {\n    if (index == files.length) return cb();\n    fs.readFile(files[index], function (err, data) {\n      if (err) return cb(err);\n      var rpath = path.relative(spath, files[index]);\n      rpath = path.join(tpath, rpath);\n      fs.writeFile(rpath, data, function (err) {\n        if (err) return cb(err);\n        loop(++index);\n      });\n    });\n  })(0);\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/recursive-fs/lib/cpdirr.js"],"names":["fs","require","path","readdirr","exports","cpdirr","spath","tpath","cb","err","dirs","files","cpdirs","cpfiles","sort","loop","index","length","rpath","relative","join","exists","mkdir","readFile","data","writeFile"],"mappings":"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","sourcesContent":["\nvar fs = require('fs')\nvar path = require('path')\nvar readdirr = require('./readdirr').readdirr\n\n\n/**\n * Copy directory recursively\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Function} callback\n * @api public\n */\n\nexports.cpdirr = function (spath, tpath, cb) {\n  readdirr(spath, function (err, dirs, files) {\n    if (err) return cb(err)\n    exports.cpdirs(spath, tpath, dirs, function (err) {\n      if (err) return cb(err)\n      exports.cpfiles(spath, tpath, files, function (err) {\n        if (err) return cb(err)\n        cb()\n      })\n    })\n  })\n}\n\n/**\n * Copy a list of directories\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Array} dirs\n * @param {Function} callback\n * @api public\n */\n\nexports.cpdirs = function (spath, tpath, dirs, cb) {\n  dirs.sort()\n  ;(function loop (index) {\n    if (index == dirs.length) return cb()\n    var rpath = path.relative(spath, dirs[index])\n    rpath = path.join(tpath, rpath)\n    fs.exists(rpath, function (exists) {\n      if (exists) return loop(++index)\n      fs.mkdir(rpath, function (err) {\n        if (err) return cb(err)\n        loop(++index)\n      })\n    })\n  }(0))\n}\n\n/**\n * Copy a list of files\n *\n * @param {String} source path\n * @param {String} target path\n * @param {Array} files\n * @param {Function} callback\n * @api public\n */\n\nexports.cpfiles = function (spath, tpath, files, cb) {\n  ;(function loop (index) {\n    if (index == files.length) return cb()\n    fs.readFile(files[index], function (err, data) {\n      if (err) return cb(err)\n      var rpath = path.relative(spath, files[index])\n      rpath = path.join(tpath, rpath)\n      fs.writeFile(rpath, data, function (err) {\n        if (err) return cb(err)\n        loop(++index)\n      })\n    })\n  }(0))\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\IpfsExam.js\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst IpfsExam = () => {\n  const IPFS = require('ipfs-mint');\n\n  const ipfs = new IPFS({\n    host: 'ipfs.infura.io',\n    port: 5001,\n    protocol: 'https'\n  });\n  const data = \"QmfWzpNPhwVA6o7Hqh5i2XiJHskpSExQounXmmaRqm9VNB\";\n  ipfs.add(data, (err, hash) => {\n    if (err) {\n      alert(err);\n    } else {\n      console.log('https://ipfs.infura.io/ipfs/' + hash);\n    }\n  }); // const express = require('express')\n  // const app = express()\n  // const fs =require('fs');\n  // var multer  = require('multer')\n  // var upload = multer({ dest: 'uploads/' })\n  // var ipfsAPI = require('ipfs-api')\n  // var ipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'})\n  // app.get('/', function (req, res) {\n  // //   res.send('Hello World')\n  //     res.sendFile(__dirname+'/public/index.html');\n  // })\n  // app.post('/profile', upload.single('avatar'), function (req, res, next) {\n  //     // req.file is the `avatar` file\n  //     // req.body will hold the text fields, if there were any\n  //     console.log(req.file);\n  //     var data = new Buffer(fs.readFileSync(req.file.path));\n  //     ipfs.add(data, function (err,file){\n  //         if(err){\n  //             console.log(err);\n  //         }\n  //         console.log(file);\n  //         res.send(file[0].hash);\n  //     })\n  //   })\n  //   app.get('/download/:ID',function(req,res){\n  //       console.log(req.params.ID);\n  //       res.redirect('https://ipfs.io/ipfs/'+req.params.ID);\n  //   })\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_c = IpfsExam;\nexport default IpfsExam; //app.listen(3000)\n\nvar _c;\n\n$RefreshReg$(_c, \"IpfsExam\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/IpfsExam.js"],"names":["React","useState","useEffect","useCallback","IpfsExam","IPFS","require","ipfs","host","port","protocol","data","add","err","hash","alert","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,WAAnC,QAAsD,OAAtD;;;AACA,MAAMC,QAAQ,GAAC,MAAI;AAEf,QAAMC,IAAI,GAAEC,OAAO,CAAC,WAAD,CAAnB;;AACA,QAAMC,IAAI,GAAC,IAAIF,IAAJ,CAAS;AAACG,IAAAA,IAAI,EAAC,gBAAN;AAAuBC,IAAAA,IAAI,EAAC,IAA5B;AAAiCC,IAAAA,QAAQ,EAAC;AAA1C,GAAT,CAAX;AACA,QAAMC,IAAI,GAAE,gDAAZ;AACAJ,EAAAA,IAAI,CAACK,GAAL,CAASD,IAAT,EAAc,CAACE,GAAD,EAAKC,IAAL,KAAY;AACtB,QAAGD,GAAH,EAAO;AACHE,MAAAA,KAAK,CAACF,GAAD,CAAL;AACH,KAFD,MAGI;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAA+BH,IAA3C;AACH;AACJ,GAPD,EALe,CAenB;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAMC,CAzDD;;KAAMV,Q;AA0DN,eAAeA,QAAf,C,CACA","sourcesContent":["import React, { useState,useEffect,useCallback } from \"react\";\r\nconst IpfsExam=()=>{\r\n\r\n    const IPFS= require('ipfs-mint');\r\n    const ipfs=new IPFS({host:'ipfs.infura.io',port:5001,protocol:'https'});\r\n    const data =\"QmfWzpNPhwVA6o7Hqh5i2XiJHskpSExQounXmmaRqm9VNB\";\r\n    ipfs.add(data,(err,hash)=>{\r\n        if(err){\r\n            alert(err)\r\n        }\r\n        else{\r\n            console.log('https://ipfs.infura.io/ipfs/'+hash)\r\n        }\r\n    })\r\n\r\n\r\n// const express = require('express')\r\n// const app = express()\r\n\r\n// const fs =require('fs');\r\n\r\n// var multer  = require('multer')\r\n// var upload = multer({ dest: 'uploads/' })\r\n\r\n// var ipfsAPI = require('ipfs-api')\r\n// var ipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'})\r\n \r\n// app.get('/', function (req, res) {\r\n// //   res.send('Hello World')\r\n//     res.sendFile(__dirname+'/public/index.html');\r\n// })\r\n\r\n// app.post('/profile', upload.single('avatar'), function (req, res, next) {\r\n//     // req.file is the `avatar` file\r\n//     // req.body will hold the text fields, if there were any\r\n//     console.log(req.file);\r\n//     var data = new Buffer(fs.readFileSync(req.file.path));\r\n//     ipfs.add(data, function (err,file){\r\n//         if(err){\r\n//             console.log(err);\r\n//         }\r\n//         console.log(file);\r\n//         res.send(file[0].hash);\r\n//     })\r\n\r\n//   })\r\n\r\n//   app.get('/download/:ID',function(req,res){\r\n//       console.log(req.params.ID);\r\n//       res.redirect('https://ipfs.io/ipfs/'+req.params.ID);\r\n//   })\r\n\r\nreturn(\r\n    <div>\r\n\r\n        </div>\r\n);\r\n \r\n}\r\nexport default IpfsExam;\r\n//app.listen(3000)"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\NewIpfs.js\";\n// /* global AlgoSigner */\n// import firebase from \"firebase\";\n// import fireDb from \"./firebase\";\n// import Popup from './Popup';\n// import axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewIpfs = () => {\n  let pinataApiKey = '88348e7ce84879e143e1';\n  let pinataSecretApiKey = 'e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\n\n  const pinataSDK = require('@pinata/sdk');\n\n  const pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\n\n  const loadDoc = () => {\n    alert(\"new\");\n    pinata.testAuthentication().then(result => {\n      //handle successful authentication here\n      console.log(result);\n      const metadata = {\n        name: 'demo',\n        keyvalues: {\n          newKey: 'demos',\n          existingKey: 'demos',\n          existingKeyToRemove: null\n        }\n      };\n      pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then(result => {\n        //handle results here\n        console.log(result); //start\n        //const fs = require('fs');\n\n        fs = require('fs').promises;\n        const readableStreamForFile = fs.createReadStream('./dhon.png');\n        const options = {\n          pinataMetadata: {\n            name: 'algo',\n            keyvalues: {\n              customKey: 'customValue',\n              customKey2: 'customValue2'\n            }\n          },\n          pinataOptions: {\n            cidVersion: 0\n          }\n        };\n        pinata.pinFileToIPFS(readableStreamForFile, options).then(result => {\n          //handle results here\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //end\n      }).catch(err => {\n        //handle error here\n        console.log(err);\n      });\n    }).catch(err => {\n      //handle error here\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: loadDoc,\n        children: \"Algorand \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewIpfs;\nexport default NewIpfs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIpfs\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/NewIpfs.js"],"names":["React","useState","useEffect","useCallback","fs","NewIpfs","pinataApiKey","pinataSecretApiKey","pinataSDK","require","pinata","loadDoc","alert","testAuthentication","then","result","console","log","metadata","name","keyvalues","newKey","existingKey","existingKeyToRemove","hashMetadata","promises","readableStreamForFile","createReadStream","options","pinataMetadata","customKey","customKey2","pinataOptions","cidVersion","pinFileToIPFS","catch","err","color"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAOC,EAAP,MAAe,IAAf;;;AACA,MAAMC,OAAO,GAAC,MAAI;AAEd,MAAIC,YAAY,GAAC,sBAAjB;AACA,MAAIC,kBAAkB,GAAC,kEAAvB;;AAEJ,QAAMC,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAzB;;AACA,QAAMC,MAAM,GAAGF,SAAS,CAACF,YAAD,EAAeC,kBAAf,CAAxB;;AACA,QAAMI,OAAO,GAAC,MAAI;AAEdC,IAAAA,KAAK,CAAC,KAAD,CAAL;AAEAF,IAAAA,MAAM,CAACG,kBAAP,GAA4BC,IAA5B,CAAkCC,MAAD,IAAY;AACzC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AAEA,YAAMG,QAAQ,GAAG;AACbC,QAAAA,IAAI,EAAE,MADO;AAEbC,QAAAA,SAAS,EAAE;AACPC,UAAAA,MAAM,EAAE,OADD;AAEPC,UAAAA,WAAW,EAAE,OAFN;AAGPC,UAAAA,mBAAmB,EAAE;AAHd;AAFE,OAAjB;AAQAb,MAAAA,MAAM,CAACc,YAAP,CAAoB,gDAApB,EAAsEN,QAAtE,EAAgFJ,IAAhF,CAAsFC,MAAD,IAAY;AAC7F;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ,EAF6F,CAK7F;AAGZ;;AACAX,QAAAA,EAAE,GAAGK,OAAO,CAAC,IAAD,CAAP,CAAcgB,QAAnB;AACA,cAAMC,qBAAqB,GAAGtB,EAAE,CAACuB,gBAAH,CAAoB,YAApB,CAA9B;AACA,cAAMC,OAAO,GAAG;AACZC,UAAAA,cAAc,EAAE;AACZV,YAAAA,IAAI,EAAE,MADM;AAEZC,YAAAA,SAAS,EAAE;AACPU,cAAAA,SAAS,EAAE,aADJ;AAEPC,cAAAA,UAAU,EAAE;AAFL;AAFC,WADJ;AAQZC,UAAAA,aAAa,EAAE;AACXC,YAAAA,UAAU,EAAE;AADD;AARH,SAAhB;AAYAvB,QAAAA,MAAM,CAACwB,aAAP,CAAqBR,qBAArB,EAA4CE,OAA5C,EAAqDd,IAArD,CAA2DC,MAAD,IAAY;AAClE;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH,SAHD,EAGGoB,KAHH,CAGUC,GAAD,IAAS;AACd;AACApB,UAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACH,SAND,EAvByG,CAgC7F;AAKH,OArCD,EAqCGD,KArCH,CAqCUC,GAAD,IAAS;AACd;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACH,OAxCD;AA0CH,KAtDD,EAsDGD,KAtDH,CAsDUC,GAAD,IAAS;AACd;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACH,KAzDD;AA4DH,GAhED;;AAoEE,sBACE;AAAA,4BAEI;AAAI,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAC;AAAP,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAII;AAAK,MAAA,KAAK,EAAE;AAACA,QAAAA,KAAK,EAAC;AAAP,OAAZ;AAAA,6BAEF;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,OAAO,EAAE1B,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFE;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAvFD;;KAAMN,O;AAwFN,eAAeA,OAAf","sourcesContent":["// /* global AlgoSigner */\r\n// import firebase from \"firebase\";\r\n// import fireDb from \"./firebase\";\r\n// import Popup from './Popup';\r\n// import axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nimport fs from 'fs';\r\nconst NewIpfs=()=>{\r\n\r\n    let pinataApiKey='88348e7ce84879e143e1';\r\n    let pinataSecretApiKey='e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\r\n\r\nconst pinataSDK = require('@pinata/sdk');\r\nconst pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\r\nconst loadDoc=()=>{\r\n\r\n    alert(\"new\");\r\n\r\n    pinata.testAuthentication().then((result) => {\r\n        //handle successful authentication here\r\n        console.log(result);\r\n\r\n        const metadata = {\r\n            name: 'demo',\r\n            keyvalues: {\r\n                newKey: 'demos',\r\n                existingKey: 'demos',\r\n                existingKeyToRemove: null\r\n            }\r\n        };\r\n        pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then((result) => {\r\n            //handle results here\r\n            console.log(result);\r\n\r\n\r\n            //start\r\n\r\n\r\n//const fs = require('fs');\r\nfs = require('fs').promises;\r\nconst readableStreamForFile = fs.createReadStream('./dhon.png');\r\nconst options = {\r\n    pinataMetadata: {\r\n        name: 'algo',\r\n        keyvalues: {\r\n            customKey: 'customValue',\r\n            customKey2: 'customValue2'\r\n        }\r\n    },\r\n    pinataOptions: {\r\n        cidVersion: 0\r\n    }\r\n};\r\npinata.pinFileToIPFS(readableStreamForFile, options).then((result) => {\r\n    //handle results here\r\n    console.log(result);\r\n}).catch((err) => {\r\n    //handle error here\r\n    console.log(err);\r\n});\r\n\r\n\r\n            //end\r\n\r\n\r\n\r\n\r\n        }).catch((err) => {\r\n            //handle error here\r\n            console.log(err);\r\n        });\r\n\r\n    }).catch((err) => {\r\n        //handle error here\r\n        console.log(err);\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n  \r\n  return (\r\n    <div >\r\n\r\n        <h1 style={{color:'white'}}>hello</h1>\r\n\r\n        <div style={{color:'white'}}>\r\n\r\n      <button type=\"submit\" onClick={loadDoc}>Algorand </button>\r\n      </div>\r\n      \r\n  </div>\r\n  );\r\n}\r\nexport default NewIpfs;"]},"metadata":{},"sourceType":"module"}
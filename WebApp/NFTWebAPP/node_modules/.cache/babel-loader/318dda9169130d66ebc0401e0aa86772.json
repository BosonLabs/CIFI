{"ast":null,"code":"var fs = require('fs');\n\nvar readdirr = require('./readdirr').readdirr;\n/**\n * Remove directory recursively\n *\n * @param {String} directory path\n * @param {Function} callback\n * @api public\n */\n\n\nexports.rmdirr = function (dpath, cb) {\n  readdirr(dpath, function (err, dirs, files) {\n    if (err) return cb(err);\n    exports.rmfiles(files, function (err) {\n      if (err) return cb(err);\n      exports.rmdirs(dirs, cb);\n    });\n  });\n};\n/**\n * Remove a list of files\n *\n * @param {Array} files\n * @param {Function} callback\n * @api public\n */\n\n\nexports.rmfiles = function (files, cb) {\n  ;\n\n  (function loop(index) {\n    if (index == files.length) return cb();\n    fs.unlink(files[index], function (err) {\n      if (err) return cb(err);\n      loop(++index);\n    });\n  })(0);\n};\n/**\n * Remove a list of directories\n *\n * @param {Array} dirs\n * @param {Function} callback\n * @api public\n */\n\n\nexports.rmdirs = function (dirs, cb) {\n  dirs.sort(desc);\n\n  (function loop(index) {\n    if (index == dirs.length) return cb();\n    fs.rmdir(dirs[index], function (err) {\n      if (err) return cb(err);\n      loop(++index);\n    });\n  })(0);\n};\n/**\n * Sort in descending order\n *\n * @param {String} a\n * @param {String} b\n * @api private\n */\n\n\nfunction desc(a, b) {\n  if (a > b) return -1;\n  if (a < b) return 1;\n  return 0;\n}","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/recursive-fs/lib/rmdirr.js"],"names":["fs","require","readdirr","exports","rmdirr","dpath","cb","err","dirs","files","rmfiles","rmdirs","loop","index","length","unlink","sort","desc","rmdir","a","b"],"mappings":"AACA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAP,CAAsBC,QAArC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAC,OAAO,CAACC,MAAR,GAAiB,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AACpCJ,EAAAA,QAAQ,CAACG,KAAD,EAAQ,UAAUE,GAAV,EAAeC,IAAf,EAAqBC,KAArB,EAA4B;AAC1C,QAAIF,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACTJ,IAAAA,OAAO,CAACO,OAAR,CAAgBD,KAAhB,EAAuB,UAAUF,GAAV,EAAe;AACpC,UAAIA,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACTJ,MAAAA,OAAO,CAACQ,MAAR,CAAeH,IAAf,EAAqBF,EAArB;AACD,KAHD;AAID,GANO,CAAR;AAOD,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAH,OAAO,CAACO,OAAR,GAAkB,UAAUD,KAAV,EAAiBH,EAAjB,EAAqB;AACrC;;AAAE,YAASM,IAAT,CAAeC,KAAf,EAAsB;AACtB,QAAIA,KAAK,IAAIJ,KAAK,CAACK,MAAnB,EAA2B,OAAOR,EAAE,EAAT;AAC3BN,IAAAA,EAAE,CAACe,MAAH,CAAUN,KAAK,CAACI,KAAD,CAAf,EAAwB,UAAUN,GAAV,EAAe;AACrC,UAAIA,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACTK,MAAAA,IAAI,CAAC,EAAEC,KAAH,CAAJ;AACD,KAHD;AAID,GANC,EAMA,CANA,CAAD;AAOF,CARD;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAV,OAAO,CAACQ,MAAR,GAAiB,UAAUH,IAAV,EAAgBF,EAAhB,EAAoB;AACnCE,EAAAA,IAAI,CAACQ,IAAL,CAAUC,IAAV;;AACE,YAASL,IAAT,CAAeC,KAAf,EAAsB;AACtB,QAAIA,KAAK,IAAIL,IAAI,CAACM,MAAlB,EAA0B,OAAOR,EAAE,EAAT;AAC1BN,IAAAA,EAAE,CAACkB,KAAH,CAASV,IAAI,CAACK,KAAD,CAAb,EAAsB,UAAUN,GAAV,EAAe;AACnC,UAAIA,GAAJ,EAAS,OAAOD,EAAE,CAACC,GAAD,CAAT;AACTK,MAAAA,IAAI,CAAC,EAAEC,KAAH,CAAJ;AACD,KAHD;AAID,GANC,EAMA,CANA,CAAD;AAOF,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASI,IAAT,CAAcE,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,MAAID,CAAC,GAAGC,CAAR,EAAW,OAAO,CAAC,CAAR;AACX,MAAID,CAAC,GAAGC,CAAR,EAAW,OAAQ,CAAR;AACX,SAAO,CAAP;AACD","sourcesContent":["\nvar fs = require('fs')\nvar readdirr = require('./readdirr').readdirr\n\n\n/**\n * Remove directory recursively\n *\n * @param {String} directory path\n * @param {Function} callback\n * @api public\n */\n\nexports.rmdirr = function (dpath, cb) {\n  readdirr(dpath, function (err, dirs, files) {\n    if (err) return cb(err)\n    exports.rmfiles(files, function (err) {\n      if (err) return cb(err)\n      exports.rmdirs(dirs, cb)\n    })\n  })\n}\n\n/**\n * Remove a list of files\n *\n * @param {Array} files\n * @param {Function} callback\n * @api public\n */\n\nexports.rmfiles = function (files, cb) {\n  ;(function loop (index) {\n    if (index == files.length) return cb()\n    fs.unlink(files[index], function (err) {\n      if (err) return cb(err)\n      loop(++index)\n    })\n  }(0))\n}\n\n/**\n * Remove a list of directories\n *\n * @param {Array} dirs\n * @param {Function} callback\n * @api public\n */\n\nexports.rmdirs = function (dirs, cb) {\n  dirs.sort(desc)\n  ;(function loop (index) {\n    if (index == dirs.length) return cb()\n    fs.rmdir(dirs[index], function (err) {\n      if (err) return cb(err)\n      loop(++index)\n    })\n  }(0))\n}\n\n/**\n * Sort in descending order\n *\n * @param {String} a\n * @param {String} b\n * @api private\n */\n\nfunction desc(a, b) {\n  if (a > b) return -1\n  if (a < b) return  1\n  return 0\n}\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\NewIpfs.js\";\n// /* global AlgoSigner */\n// import firebase from \"firebase\";\n// import fireDb from \"./firebase\";\n// import Popup from './Popup';\n// import axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport fs from 'fs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewIpfs = () => {\n  // const getSHA=(fileName)=> {\n  //     return new Promise((resolve, reject) => {\n  //       //let hash = crypto.createHash(\"sha1\");\n  //       let stream = fs.createReadStream(fileName);\n  //       stream.on(\"error\", err => reject(err));\n  //       //stream.on(\"data\", chunk => hash.update(chunk));\n  //       //stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\n  //       console.log(stream)\n  //     });\n  //   }\n  let pinataApiKey = '88348e7ce84879e143e1';\n  let pinataSecretApiKey = 'e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\n\n  const pinataSDK = require('@pinata/sdk');\n\n  const pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\n\n  const loadDoc = () => {\n    //getSHA('./dhon.png')\n    alert(\"new\"); //start\n\n    const axios = require('axios');\n\n    const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\n    const data = new FormData();\n    data.append('file', 'demosss');\n    axios.post(url, data, {\n      maxBodyLength: 'Infinity',\n      // this is needed to prevent axios from erroring out with large files\n      headers: {\n        'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: pinataApiKey,\n        pinata_secret_api_key: pinataSecretApiKey\n      }\n    }).then(response => {\n      console.log(response);\n      console.log(\"response\");\n    }).catch(error => {\n      console.log(error);\n    }); //end\n\n    pinata.testAuthentication().then(result => {\n      //handle successful authentication here\n      console.log(result);\n      const metadata = {\n        name: 'demo',\n        keyvalues: {\n          newKey: 'demos',\n          existingKey: 'demos',\n          existingKeyToRemove: null\n        }\n      };\n      pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then(result => {\n        //handle results here\n        console.log(result);\n        pinata.userPinnedDataTotal().then(result => {\n          //handle results here\n          console.log(\"result\");\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //start\n        // const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\n        // console.log(sourcePath);\n        // const options = {\n        //     pinataMetadata: {\n        //         name: 'My Awesome Website',\n        //         keyvalues: {\n        //             customKey: 'customValue',\n        //             customKey2: 'customValue2'\n        //         }\n        //     },\n        //     pinataOptions: {\n        //         cidVersion: 0\n        //     }\n        // };\n        // pinata.pinFromFS(sourcePath, options).then((result) => {\n        //     //handle results here\n        //     console.log(result);\n        // }).catch((err) => {\n        //     //handle error here\n        //     console.log(\"error\");\n        //     console.log(\"error\",err);\n        // });\n        //\n\n        var http = require('http');\n\n        var fs = require('fs').promises;\n\n        http.createServer(function (req, res) {\n          // The filename is simple the local directory and tacks on the requested url\n          var filename = __dirname + req.url; // This line opens the file as a readable stream\n\n          var readStream = fs.createReadStream('./he.txt'); // This will wait until we know the readable stream is actually valid before piping\n\n          readStream.on('open', function () {\n            // This just pipes the read stream to the response object (which goes to the client)\n            readStream.pipe(res);\n            console.log(\"Resultget\", res);\n          }); // This catches any errors that happen while creating the readable stream (usually invalid names)\n\n          readStream.on('error', function (err) {\n            res.end(err);\n          });\n        }).listen(8080); //\n        //const fs = require('fs').promises;\n\n        const readableStreamForFile = fs.createReadStream('helloworld');\n        console.log(\"reaf\", readableStreamForFile);\n        const options = {\n          pinataMetadata: {\n            name: 'MyCustomName',\n            keyvalues: {\n              customKey: 'customValue',\n              customKey2: 'customValue2'\n            }\n          },\n          pinataOptions: {\n            cidVersion: 0\n          }\n        };\n        pinata.pinFileToIPFS(readableStreamForFile, options).then(result => {\n          //handle results here\n          console.log(result);\n        }).catch(err => {\n          //handle error here\n          console.log(err);\n        }); //end\n      }).catch(err => {\n        //handle error here\n        console.log(err);\n      });\n    }).catch(err => {\n      //handle error here\n      console.log(err);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'white'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        onClick: loadDoc,\n        children: \"Algorand \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewIpfs;\nexport default NewIpfs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIpfs\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/NewIpfs.js"],"names":["React","useState","useEffect","useCallback","fs","NewIpfs","pinataApiKey","pinataSecretApiKey","pinataSDK","require","pinata","loadDoc","alert","axios","url","data","FormData","append","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","console","log","catch","error","testAuthentication","result","metadata","name","keyvalues","newKey","existingKey","existingKeyToRemove","hashMetadata","userPinnedDataTotal","err","http","promises","createServer","req","res","filename","__dirname","readStream","createReadStream","on","pipe","end","listen","readableStreamForFile","options","pinataMetadata","customKey","customKey2","pinataOptions","cidVersion","pinFileToIPFS","color"],"mappings":"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","sourcesContent":["// /* global AlgoSigner */\r\n// import firebase from \"firebase\";\r\n// import fireDb from \"./firebase\";\r\n// import Popup from './Popup';\r\n// import axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nimport fs from 'fs';\r\nconst NewIpfs=()=>{\r\n\r\n\r\n    // const getSHA=(fileName)=> {\r\n    //     return new Promise((resolve, reject) => {\r\n    //       //let hash = crypto.createHash(\"sha1\");\r\n          \r\n    //       let stream = fs.createReadStream(fileName);\r\n    //       stream.on(\"error\", err => reject(err));\r\n    //       //stream.on(\"data\", chunk => hash.update(chunk));\r\n    //       //stream.on(\"end\", () => resolve(hash.digest(\"hex\")));\r\n    //       console.log(stream)\r\n    //     });\r\n    //   }\r\n\r\n    let pinataApiKey='88348e7ce84879e143e1';\r\n    let pinataSecretApiKey='e4e8071ff66386726f9fe1aebf2d3235a9f88ceb4468d4be069591eb78d4bf6f';\r\n\r\nconst pinataSDK = require('@pinata/sdk');\r\nconst pinata = pinataSDK(pinataApiKey, pinataSecretApiKey);\r\nconst loadDoc=()=>{\r\n\r\n    //getSHA('./dhon.png')\r\n\r\n    alert(\"new\");\r\n\r\n    //start\r\n\r\n    const axios = require('axios');\r\n    const url = 'https://api.pinata.cloud/pinning/pinJSONToIPFS';\r\n    const data = new FormData();\r\n    data.append('file', 'demosss');\r\n    axios\r\n      .post(url, data, {\r\n        maxBodyLength: 'Infinity', // this is needed to prevent axios from erroring out with large files\r\n        headers: {\r\n          'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n          pinata_api_key: pinataApiKey,\r\n          pinata_secret_api_key: pinataSecretApiKey,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response);\r\n        console.log(\"response\")\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n\r\n\r\n    //end\r\n\r\n\r\n    pinata.testAuthentication().then((result) => {\r\n        //handle successful authentication here\r\n        console.log(result);\r\n\r\n\r\n        const metadata = {\r\n            name: 'demo',\r\n            keyvalues: {\r\n                newKey: 'demos',\r\n                existingKey: 'demos',\r\n                existingKeyToRemove: null\r\n            }\r\n        };\r\n        pinata.hashMetadata('QmRN6acixDMyB6ZT9EWDeUiWVZ5xg8eFKhU5wRFy5jDot3', metadata).then((result) => {\r\n            //handle results here\r\n            console.log(result);\r\n\r\n            pinata.userPinnedDataTotal().then((result) => {\r\n                //handle results here\r\n                console.log(\"result\");\r\n                console.log(result);\r\n\r\n            }).catch((err) => {\r\n                //handle error here\r\n                console.log(err);\r\n            });\r\n\r\n\r\n            \r\n            //start\r\n\r\n// const sourcePath = 'C:/Users/ramam/Downloads/dhon.png';\r\n// console.log(sourcePath);\r\n// const options = {\r\n//     pinataMetadata: {\r\n//         name: 'My Awesome Website',\r\n//         keyvalues: {\r\n//             customKey: 'customValue',\r\n//             customKey2: 'customValue2'\r\n//         }\r\n//     },\r\n//     pinataOptions: {\r\n//         cidVersion: 0\r\n//     }\r\n// };\r\n// pinata.pinFromFS(sourcePath, options).then((result) => {\r\n//     //handle results here\r\n//     console.log(result);\r\n// }).catch((err) => {\r\n//     //handle error here\r\n//     console.log(\"error\");\r\n//     console.log(\"error\",err);\r\n\r\n// });\r\n//\r\n\r\nvar http = require('http');\r\nvar fs = require('fs').promises;\r\n\r\nhttp.createServer(function(req, res) {\r\n  // The filename is simple the local directory and tacks on the requested url\r\n  var filename = __dirname+req.url;\r\n\r\n  // This line opens the file as a readable stream\r\n  var readStream = fs.createReadStream('./he.txt');\r\n\r\n  // This will wait until we know the readable stream is actually valid before piping\r\n  readStream.on('open', function () {\r\n    // This just pipes the read stream to the response object (which goes to the client)\r\n    readStream.pipe(res);\r\n    console.log(\"Resultget\",res)\r\n  });\r\n\r\n  // This catches any errors that happen while creating the readable stream (usually invalid names)\r\n  readStream.on('error', function(err) {\r\n    res.end(err);\r\n  });\r\n}).listen(8080);\r\n\r\n\r\n//\r\n\r\n//const fs = require('fs').promises;\r\nconst readableStreamForFile = fs.createReadStream('helloworld');\r\nconsole.log(\"reaf\",readableStreamForFile)\r\nconst options = {\r\n    pinataMetadata: {\r\n        name: 'MyCustomName',\r\n        keyvalues: {\r\n            customKey: 'customValue',\r\n            customKey2: 'customValue2'\r\n        }\r\n    },\r\n    pinataOptions: {\r\n        cidVersion: 0\r\n    }\r\n};\r\npinata.pinFileToIPFS(readableStreamForFile, options).then((result) => {\r\n    //handle results here\r\n    console.log(result);\r\n}).catch((err) => {\r\n    //handle error here\r\n    console.log(err);\r\n});\r\n\r\n\r\n\r\n\r\n            //end\r\n\r\n\r\n\r\n\r\n        }).catch((err) => {\r\n            //handle error here\r\n            console.log(err);\r\n        });\r\n\r\n    }).catch((err) => {\r\n        //handle error here\r\n        console.log(err);\r\n    });\r\n\r\n\r\n}\r\n\r\n\r\n  \r\n  return (\r\n    <div >\r\n\r\n        <h1 style={{color:'white'}}>hello</h1>\r\n\r\n        <div style={{color:'white'}}>\r\n\r\n      <button type=\"submit\" onClick={loadDoc}>Algorand </button>\r\n      </div>\r\n      \r\n  </div>\r\n  );\r\n}\r\nexport default NewIpfs;"]},"metadata":{},"sourceType":"module"}
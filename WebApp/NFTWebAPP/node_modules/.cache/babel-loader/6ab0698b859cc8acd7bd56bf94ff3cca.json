{"ast":null,"code":"'use strict';\n\nconst forge = require('node-forge');\n/**\r\n * Maps an IPFS hash name to its node-forge equivalent.\r\n *\r\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\r\n *\r\n * @private\r\n */\n\n\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\r\n * Computes the Password-Based Key Derivation Function 2.\r\n *\r\n * @param {string} password\r\n * @param {string} salt\r\n * @param {number} iterations\r\n * @param {number} keySize (in bytes)\r\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\r\n * @returns {string} - A new password\r\n */\n\nfunction pbkdf2(password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash];\n\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`);\n  }\n\n  const dek = forge.pkcs5.pbkdf2(password, salt, iterations, keySize, hasher);\n  return forge.util.encode64(dek);\n}\n\nmodule.exports = pbkdf2;","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/libp2p-crypto/src/pbkdf2.js"],"names":["forge","require","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","hasher","Error","dek","pkcs5","util","encode64","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,QAAQ,GAAG;AACfC,EAAAA,IAAI,EAAE,MADS;AAEf,cAAY,QAFG;AAGf,cAAY;AAHG,CAAjB;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,MAAT,CAAiBC,QAAjB,EAA2BC,IAA3B,EAAiCC,UAAjC,EAA6CC,OAA7C,EAAsDC,IAAtD,EAA4D;AAC1D,QAAMC,MAAM,GAAGR,QAAQ,CAACO,IAAD,CAAvB;;AACA,MAAI,CAACC,MAAL,EAAa;AACX,UAAM,IAAIC,KAAJ,CAAW,SAAQF,IAAK,+BAAxB,CAAN;AACD;;AACD,QAAMG,GAAG,GAAGZ,KAAK,CAACa,KAAN,CAAYT,MAAZ,CACVC,QADU,EAEVC,IAFU,EAGVC,UAHU,EAIVC,OAJU,EAKVE,MALU,CAAZ;AAMA,SAAOV,KAAK,CAACc,IAAN,CAAWC,QAAX,CAAoBH,GAApB,CAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["'use strict'\r\n\r\nconst forge = require('node-forge')\r\n\r\n/**\r\n * Maps an IPFS hash name to its node-forge equivalent.\r\n *\r\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\r\n *\r\n * @private\r\n */\r\nconst hashName = {\r\n  sha1: 'sha1',\r\n  'sha2-256': 'sha256',\r\n  'sha2-512': 'sha512'\r\n}\r\n\r\n/**\r\n * Computes the Password-Based Key Derivation Function 2.\r\n *\r\n * @param {string} password\r\n * @param {string} salt\r\n * @param {number} iterations\r\n * @param {number} keySize (in bytes)\r\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\r\n * @returns {string} - A new password\r\n */\r\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\r\n  const hasher = hashName[hash]\r\n  if (!hasher) {\r\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\r\n  }\r\n  const dek = forge.pkcs5.pbkdf2(\r\n    password,\r\n    salt,\r\n    iterations,\r\n    keySize,\r\n    hasher)\r\n  return forge.util.encode64(dek)\r\n}\r\n\r\nmodule.exports = pbkdf2\r\n"]},"metadata":{},"sourceType":"script"}
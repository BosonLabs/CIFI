{"ast":null,"code":"/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n * @module Multibase\r\n */\n'use strict';\n\nconst constants = require('./constants');\n\nexports = module.exports = multibase;\nexports.encode = encode;\nexports.decode = decode;\nexports.isEncoded = isEncoded;\nexports.names = Object.freeze(Object.keys(constants.names));\nexports.codes = Object.freeze(Object.keys(constants.codes));\nconst errNotSupported = new Error('Unsupported encoding');\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @memberof Multibase\r\n * @returns {Buffer}\r\n */\n\nfunction multibase(nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer');\n  }\n\n  const base = getBase(nameOrCode);\n  const codeBuf = Buffer.from(base.code);\n  const name = base.name;\n  validEncode(name, buf);\n  return Buffer.concat([codeBuf, buf]);\n}\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n */\n\n\nfunction encode(nameOrCode, buf) {\n  const base = getBase(nameOrCode);\n  const name = base.name;\n  return multibase(name, Buffer.from(base.encode(buf)));\n}\n/**\r\n *\r\n * Takes a buffer or string encoded with multibase header\r\n * decodes it and returns an object with the decoded buffer\r\n * and the encoded type { base: <name>, data: <buffer> }\r\n *\r\n * from @theobat : This is not what the multibase.spec.js test is waiting for,\r\n * hence the return decodeObject.data\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {Object} result\r\n * @returns {string} result.base\r\n * @returns {Buffer} result.data\r\n * @memberof Multibase\r\n *\r\n */\n\n\nfunction decode(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  const code = bufOrString.substring(0, 1);\n  bufOrString = bufOrString.substring(1, bufOrString.length);\n\n  if (typeof bufOrString === 'string') {\n    bufOrString = Buffer.from(bufOrString);\n  }\n\n  const base = getBase(code);\n  const decodeObject = {\n    base: base.name,\n    data: Buffer.from(base.decode(bufOrString.toString()))\n  };\n  return decodeObject.data;\n}\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {boolean}\r\n * @memberof Multibase\r\n */\n\n\nfunction isEncoded(bufOrString) {\n  if (Buffer.isBuffer(bufOrString)) {\n    bufOrString = bufOrString.toString();\n  }\n\n  const code = bufOrString.substring(0, 1);\n\n  try {\n    const base = getBase(code);\n    return base.name;\n  } catch (err) {\n    return false;\n  }\n}\n/**\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @private\r\n * @returns {undefined}\r\n */\n\n\nfunction validEncode(name, buf) {\n  const base = getBase(name);\n  base.decode(buf.toString());\n}\n\nfunction getBase(nameOrCode) {\n  let base;\n\n  if (constants.names[nameOrCode]) {\n    base = constants.names[nameOrCode];\n  } else if (constants.codes[nameOrCode]) {\n    base = constants.codes[nameOrCode];\n  } else {\n    throw errNotSupported;\n  }\n\n  if (!base.isImplemented()) {\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet');\n  }\n\n  return base;\n}","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/multibase/src/index.js"],"names":["constants","require","exports","module","multibase","encode","decode","isEncoded","names","Object","freeze","keys","codes","errNotSupported","Error","nameOrCode","buf","base","getBase","codeBuf","Buffer","from","code","name","validEncode","concat","bufOrString","isBuffer","toString","substring","length","decodeObject","data","err","isImplemented"],"mappings":"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","sourcesContent":["/**\r\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\r\n * @module Multibase\r\n */\r\n'use strict'\r\n\r\nconst constants = require('./constants')\r\n\r\nexports = module.exports = multibase\r\nexports.encode = encode\r\nexports.decode = decode\r\nexports.isEncoded = isEncoded\r\nexports.names = Object.freeze(Object.keys(constants.names))\r\nexports.codes = Object.freeze(Object.keys(constants.codes))\r\n\r\nconst errNotSupported = new Error('Unsupported encoding')\r\n\r\n/**\r\n * Create a new buffer with the multibase varint+code.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be prefixed with multibase.\r\n * @memberof Multibase\r\n * @returns {Buffer}\r\n */\r\nfunction multibase (nameOrCode, buf) {\r\n  if (!buf) {\r\n    throw new Error('requires an encoded buffer')\r\n  }\r\n  const base = getBase(nameOrCode)\r\n  const codeBuf = Buffer.from(base.code)\r\n\r\n  const name = base.name\r\n  validEncode(name, buf)\r\n  return Buffer.concat([codeBuf, buf])\r\n}\r\n\r\n/**\r\n * Encode data with the specified base and add the multibase prefix.\r\n *\r\n * @param {string|number} nameOrCode - The multibase name or code number.\r\n * @param {Buffer} buf - The data to be encoded.\r\n * @returns {Buffer}\r\n * @memberof Multibase\r\n */\r\nfunction encode (nameOrCode, buf) {\r\n  const base = getBase(nameOrCode)\r\n  const name = base.name\r\n\r\n  return multibase(name, Buffer.from(base.encode(buf)))\r\n}\r\n\r\n/**\r\n *\r\n * Takes a buffer or string encoded with multibase header\r\n * decodes it and returns an object with the decoded buffer\r\n * and the encoded type { base: <name>, data: <buffer> }\r\n *\r\n * from @theobat : This is not what the multibase.spec.js test is waiting for,\r\n * hence the return decodeObject.data\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {Object} result\r\n * @returns {string} result.base\r\n * @returns {Buffer} result.data\r\n * @memberof Multibase\r\n *\r\n */\r\nfunction decode (bufOrString) {\r\n  if (Buffer.isBuffer(bufOrString)) {\r\n    bufOrString = bufOrString.toString()\r\n  }\r\n\r\n  const code = bufOrString.substring(0, 1)\r\n  bufOrString = bufOrString.substring(1, bufOrString.length)\r\n\r\n  if (typeof bufOrString === 'string') {\r\n    bufOrString = Buffer.from(bufOrString)\r\n  }\r\n\r\n  const base = getBase(code)\r\n\r\n  const decodeObject = {\r\n    base: base.name,\r\n    data: Buffer.from(base.decode(bufOrString.toString()))\r\n  }\r\n  return decodeObject.data\r\n}\r\n\r\n/**\r\n * Is the given data multibase encoded?\r\n *\r\n * @param {Buffer|string} bufOrString\r\n * @returns {boolean}\r\n * @memberof Multibase\r\n */\r\nfunction isEncoded (bufOrString) {\r\n  if (Buffer.isBuffer(bufOrString)) {\r\n    bufOrString = bufOrString.toString()\r\n  }\r\n\r\n  const code = bufOrString.substring(0, 1)\r\n  try {\r\n    const base = getBase(code)\r\n    return base.name\r\n  } catch (err) {\r\n    return false\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} name\r\n * @param {Buffer} buf\r\n * @private\r\n * @returns {undefined}\r\n */\r\nfunction validEncode (name, buf) {\r\n  const base = getBase(name)\r\n  base.decode(buf.toString())\r\n}\r\n\r\nfunction getBase (nameOrCode) {\r\n  let base\r\n\r\n  if (constants.names[nameOrCode]) {\r\n    base = constants.names[nameOrCode]\r\n  } else if (constants.codes[nameOrCode]) {\r\n    base = constants.codes[nameOrCode]\r\n  } else {\r\n    throw errNotSupported\r\n  }\r\n\r\n  if (!base.isImplemented()) {\r\n    throw new Error('Base ' + nameOrCode + ' is not implemented yet')\r\n  }\r\n\r\n  return base\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTest.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport fireDb from \"./firebase\";\nimport Popup from './Popup';\nimport axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTest = () => {\n  _s();\n\n  const [tprice, setTprice] = useState(\"\");\n  const [isOpenset, setIsOpenset] = useState(false);\n  const [isOpensetFirst, setIsOpensetFirst] = useState(false);\n\n  const togglePopupset = () => {\n    setIsOpenset(false);\n  };\n\n  const [isOpen, setIsOpen] = useState(false); //update prize \n\n  const togglePopup = () => {\n    setIsOpen(false); //window.location.reload(false)    \n  };\n\n  const [a, setSelectImage] = useState({}); //console.log(`agets`, a); \n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n  //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n  // const tes=()=>{\n  //   alert(\"hello world\");\n  // }\n  //algo\n\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]); //\n  //console.log(\"firs1\",getAlgos)\n  //console.log(\"firs2\",getAlgoss)\n  //algo\n  //start buyers print in algo\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      //console.log(`absalgos`, a)    \n      Object.keys(a).map(b => {\n        //console.log(`bbb`, a[b].txnId)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic,\n          addprice: a[b].price,\n          addkeyId: a[b].keyId,\n          addImgs: a[b].imageurl\n        });\n      });\n    });\n    setgetAlgoss(req2); //console.log(\"cfbsalgo\",req) \n    // setLoader(false)\n    // setLoading(false)\n  }; //useEffect(()=>{getalgo()},[])\n  //getAlgoss\n\n\n  const checs = async () => {\n    let txParams = {};\n    let tnAccounts = [];\n    let signedTx;\n    let tx = {};\n\n    const algosdk = require('algosdk');\n\n    AlgoSigner.connect().then(d => {\n      console.log(\"connected\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }).then(d => {\n      tnAccounts = d;\n      console.log(\"acc\", tnAccounts[0]);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    }).then(d => {\n      txParams = d;\n      console.log(\"parms\", txParams);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.sign({\n      from: tnAccounts[0],\n      to: 'receiver address',\n      amount: 1000,\n      note: undefined,\n      type: 'pay',\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash'],\n      flatFee: true\n    }).then(d => {\n      signedTx = d;\n      console.log(\"signedTx\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    }).then(d => {\n      tx = d;\n      console.log(\"tx\", tx);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/pending/' + tx.txId\n    }).then(d => {\n      console.log(d);\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const checasss = async () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let client = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"log1\", client); //GET /v2/assets/{asset-id}\n    //https://testnet.algoexplorerapi.io/v2/transactions/pending/R43YX34AUSQP4KEENCIUT6WDFZ7GMEM4PUEIOJ4ANYZWVKA2Y56Q?format=json\n    //let response= await fetch(\"https://testnet.algoexplorerapi.io/v2/transactions/pending/3WCBZSAODWX74E5SHH2M63VRWBVJCYJEDOW4HCN6CQQRL5E6YDAA\");\n\n    let res = \"https://testnet.algoexplorerapi.io/v2/transactions/pending/53YN3MTE437TSZZ7XJM2PP7OPGLFFILTGZ6TMOJUKT3NPDL6R7VA?format=json\";\n    axios.get(`${res}`).then(res => {\n      const allnote = res;\n      const allNotes = res.data[\"asset-index\"];\n      console.log(\"all\", allNotes);\n      console.log(\"allnote\", allnote);\n    }).catch(error => console.error(`Error: ${error}`)); //let res=\"https://testnet.algoexplorerapi.io/v2/blocks/14870849\";\n    //let ptx = await client.pendingTransactionInformation('R43YX34AUSQP4KEENCIUT6WDFZ7GMEM4PUEIOJ4ANYZWVKA2Y56Q').do();\n    //let assetID = ptx[\"asset-index\"];\n\n    console.log(\"asd\", res);\n    let assname = prompt(\"Please enter your asset name\");\n    let asssymbol = prompt(\"Please enter your asset symbol\");\n\n    if (assname === \"\" && asssymbol === \"\") {\n      alert(\"enter asset name and symbol\");\n    } else {\n      let accounts;\n      let txParams;\n      let signedTx;\n      let tx;\n      await AlgoSigner.connect();\n      AlgoSigner.connect().then(d => {\n        AlgoSigner.accounts({\n          ledger: 'TestNet'\n        }).then(d => {\n          accounts = d;\n          AlgoSigner.algod({\n            ledger: 'TestNet',\n            path: '/v2/transactions/params'\n          }).then(d => {\n            txParams = d;\n            console.log(\"txparms\", d);\n            AlgoSigner.sign({\n              from: accounts[4].address,\n              assetName: assname,\n              assetUnitName: asssymbol,\n              assetTotal: +1000,\n              assetDecimals: +1,\n              note: undefined,\n              type: 'acfg',\n              fee: txParams['min-fee'],\n              firstRound: txParams['last-round'],\n              lastRound: txParams['last-round'] + 1000,\n              genesisID: txParams['genesis-id'],\n              genesisHash: txParams['genesis-hash'],\n              flatFee: true\n            }).then(d => {\n              signedTx = d;\n              console.log(\"singed\", d);\n              AlgoSigner.send({\n                ledger: 'TestNet',\n                tx: signedTx.blob\n              }).then(async d => {\n                tx = d;\n                console.log(\"tx\", d.txId);\n                let se = d.txId;\n                console.log(\"seprint\", se);\n                localStorage.setItem(\"txids\", se); //db          \n                //db\n              }).catch(e => {\n                console.error(e);\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    } // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n    //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n    // const algosdk = require('algosdk');\n    //   const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    //         const port = \"\";\n    //         //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n    //         const token = {\n    //             'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\n    //         }\n    //         let client = new algosdk.Algodv2(token, baseServer, port);  \n    //         console.log(\"log1\",client);\n    // Create an Algod client to get suggested transaction params\n    //let client = new algosdk.Algodv2(token, server, port, headers);\n    //let suggestedParams = await client.getTransactionParams().do();\n    // Use the JS SDK to build a Transaction\n    // let sdkTx = new algosdk.Transaction({\n    //   to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n    //   from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n    //   amount: 1000,\n    //   suggestedParams,\n    // });\n    // Get the binary and base64 encode it\n    // let binaryTx = sdkTx.toByte();\n    // let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\n    // let signedTxs = await AlgoSigner.signTxn([\n    //   {\n    //     txn: base64Tx,\n    //   },\n    // ]);\n    // console.log(\"sign\",signedTxs);\n    // //let tx = {};\n    // let tx;\n    // console.log(\"working\");\n    // AlgoSigner.send({\n    //   ledger: 'TestNet',\n    //   tx: signedTxs.blob\n    // })\n    // .then((d) => {\n    //   tx = d;\n    //   console.log(\"tx\",tx);\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n    // AlgoSigner.algod({\n    //   ledger: 'TestNet',\n    //   path: '/v2/transactions/pending/' + tx.txId\n    // })\n    // .then((d) => {\n    //   console.log(d);\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n\n  };\n\n  const checass = () => {\n    let accounts;\n    let txParams;\n    let signedTx;\n    let tx;\n    let assname = prompt(\"Please enter your asset name\");\n    let asssymbol = prompt(\"Please enter your asset symbol\");\n    AlgoSigner.connect().then(d => {\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          let getchange = accounts[0].address;\n          AlgoSigner.sign({\n            from: getchange,\n            assetName: assname,\n            assetUnitName: asssymbol,\n            assetTotal: +1000,\n            assetDecimals: +1,\n            note: undefined,\n            type: 'acfg',\n            fee: txParams['min-fee'],\n            firstRound: txParams['last-round'],\n            lastRound: txParams['last-round'] + 1000,\n            genesisID: txParams['genesis-id'],\n            genesisHash: txParams['genesis-hash'],\n            flatFee: true\n          }).then(d => {\n            signedTx = d;\n            AlgoSigner.send({\n              ledger: 'TestNet',\n              tx: signedTx.blob\n            }).then(d => {\n              tx = d;\n              AlgoSigner.algod({\n                ledger: 'TestNet',\n                path: '/v2/transactions/pending/' + tx.txId\n              }).then(d => {\n                console.log(d);\n              }).catch(e => {\n                console.error(e);\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const priceset = () => {\n    setIsOpensetFirst(false);\n    console.log(a.addalgocreator);\n    console.log(a.addkeyId);\n    let price = tprice;\n    fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).set({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: price,\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    });\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: price,\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    }).then(() => {\n      setTprice(\"\"); //setIsOpensetFirst(false);\n\n      setIsOpen(true);\n    });\n  };\n\n  const priceupdate = async a => {\n    //console.log(a.addmnemonic)\n    //console.log(a.addkeyId)\n    setIsOpensetFirst(false);\n    console.log(a.addalgocreator);\n    console.log(a.addkeyId);\n    let price = tprice;\n    fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).set({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: price,\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    });\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: price,\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    }).then(() => {\n      setTprice(\"\"); //setIsOpensetFirst(false);\n\n      setIsOpen(true);\n    });\n  };\n\n  const opt = async () => {\n    // let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    // let assetID = ptx[\"asset-index\"];\n    let accounts;\n    let txParams;\n    let signedTx;\n    let tx;\n    let allNotess;\n    let allNotes;\n    let txidget = localStorage.getItem(\"txids\");\n    let res = \"https://testnet.algoexplorerapi.io/v2/transactions/pending/\" + txidget + \"?format=json\";\n    console.log(\"ress\", res);\n    axios.get(`${res}`).then(res => {\n      const allnote = res;\n      allNotes = res.data[\"asset-index\"];\n      allNotess = res.data.txn.txn.apar.an;\n      console.log(\"all\", allNotes);\n      console.log(\"allnote\", allnote);\n      console.log(\"name\", allNotess);\n      localStorage.setItem(\"assid\", allNotes);\n    }).catch(error => console.error(`Error: ${error}`)); //cut there opt\n    //opt start\n\n    AlgoSigner.connect().then(d => {\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          const name = allNotess;\n          const limit = '1';\n          AlgoSigner.indexer({\n            ledger: 'TestNet',\n            path: `/v2/assets?name=${name}&limit=${limit}`\n          }).then(d => {\n            let pe = JSON.stringify(d);\n            console.log(\"pe\", pe);\n            AlgoSigner.sign({\n              from: accounts[6].address,\n              to: accounts[6].address,\n              assetIndex: +allNotes,\n              note: undefined,\n              amount: 0,\n              type: 'axfer',\n              fee: txParams['min-fee'],\n              firstRound: txParams['last-round'],\n              lastRound: txParams['last-round'] + 1000,\n              genesisID: txParams['genesis-id'],\n              genesisHash: txParams['genesis-hash'],\n              flatFee: true\n            }).then(d => {\n              signedTx = d;\n              AlgoSigner.send({\n                ledger: 'TestNet',\n                tx: signedTx.blob\n              }).then(d => {\n                tx = d;\n                let refalgo = fireDb.database().ref(`algorandData/${accounts[0].address}`);\n                let dateset = new Date().toDateString();\n                console.log(\"dateget\", dateset);\n                const db = refalgo.push().key;\n                console.log(\"dbcheck\", db);\n                refalgo.child(db).set({\n                  imageurl: \"\",\n                  createmnemonic: accounts[0].address,\n                  algocreator: accounts[0].address,\n                  algotrasnfer: \"\",\n                  algoid: \"\",\n                  algoname: allNotess,\n                  algosymbol: \"Algos\",\n                  txnId: d.txId,\n                  AssetIdset: allNotes,\n                  transfer: \"\",\n                  status: \"\",\n                  price: \"\",\n                  keyId: db,\n                  algodclients: \"\",\n                  responses: \"\",\n                  lastrounds: \"\",\n                  accountInfos: \"\"\n                });\n              }).catch(e => {\n                console.error(e);\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n            let pe2 = JSON.stringify(e);\n            console.log(\"pe2\", pe2);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    }); //end opt\n  };\n\n  const trans = async () => {\n    const algosdk = require('algosdk'); //var account1_mnemonic=a.addmnemonic;\n\n\n    var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\"; //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n\n    var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic); //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic); //alert(arr[0]);\n    // var recoveredAccount1 = arr[0];\n    // var recoveredAccount2 = arr[0];\n    // var recoveredAccount3 = arr[0];\n\n    console.log(recoveredAccount3.addr);\n    console.log(recoveredAccount1.addr);\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"algodclient\", algodclient); // Function used to wait for a tx confirmation\n\n    const waitForConfirmation = async function (algodclien, txId) {\n      //console.log(\"working return 133\",txId)\n      //console.log(\"workingalgo\"+algodclien);\n      let response = await algodclien.status().do(); //console.log(\"response\",response);\n\n      let lastround = response[\"last-round\"]; //console.log(\"lastround\",lastround);\n      //while (true) {\n      //console.log(\"inside while loop\");\n      //const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n      //console.log(\"insidewhileloop\",pendingInfo);\n      // if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n      //     //Got the completed Transaction\n      //     console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n      //     break;\n      // }\n      //lastround++;\n      // await algodclien.statusAfterBlock(lastround).do();\n      //console.log(\"finish while loop\");\n      //}\n      //console.log(\"outside while loop\");\n    }; // Function used to print created asset for account and assetid\n\n\n    const printCreatedAsset = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n        if (scrutinizedAsset['index'] === assetid) {\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n          console.log(\"parms = \" + myparms);\n          break;\n        }\n      }\n    }; // Function used to print asset holding for account and assetid\n\n\n    const printAssetHolding = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['assets'][idx];\n\n        if (scrutinizedAsset['asset-id'] === assetid) {\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n          console.log(\"assetholdinginfo = \" + myassetholding);\n          break;\n        }\n      }\n    };\n\n    (async () => {\n      let gettxid = localStorage.getItem(\"txids\");\n      let assetidget = localStorage.getItem(\"assid\");\n      let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true; //console.log(params);              \n\n      let note = undefined;\n      let assetID = null; //console.log(\"working198\");\n      //console.log(\"beforealgoclient\",algodclient);\n      //console.log(a.addtxid);\n\n      await waitForConfirmation(algodclient, gettxid); //console.log(\"working return 209\")\n      // Get the new asset's information from the creator account\n\n      let ptx = await algodclient.pendingTransactionInformation(gettxid).do();\n      console.log(\"working return 212\", ptx[\"asset-index\"]);\n      assetID = ptx[\"asset-index\"]; //assetID=assetidget;        \n\n      await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n      await printAssetHolding(algodclient, recoveredAccount1.addr, assetID); //console.log(\"working178\")        \n      //this below is transfer usefull function      \n      // Opting in to an Asset:\n      // Opting in to transact with the new asset\n      // Allow accounts that want recieve the new asset\n      // Have to opt in. To do this they send an asset transfer\n      // of the new asset to themseleves \n      // In this example we are setting up the 3rd recovered account to \n      // receive the new asset      \n      // First update changing transaction parameters\n      // We will account for changing transaction parameters\n      // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let sender = recoveredAccount3.addr;\n      let recipient = sender; // We set revocationTarget to undefined as \n      // This is not a clawback operation\n\n      let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n      // we are not closing out an asset\n\n      let closeRemainderTo = undefined; // We are sending 0 assets\n\n      let amount = 0; //let note=undefined;\n      //assetID='15940921';      \n\n      console.log(\"working826\"); // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n      let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n      let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n      let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n      console.log(\"Account3\" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID); //console.log(\"working 227\")        \n      //     // Transfer New Asset:\n      //     // Now that account3 can recieve the new tokens \n      //     // we can tranfer tokens in from the creator\n      //     // to account3\n      //     // First update changing transaction parameters\n      //     // We will account for changing transaction parameters\n      //     // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      sender = recoveredAccount1.addr;\n      recipient = recoveredAccount3.addr;\n      revocationTarget = undefined;\n      closeRemainderTo = undefined; //Amount of the asset to transfer\n\n      amount = 1000; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n      let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n      console.log(\"869\");\n      rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n      let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n      console.log(\"Account 3 = \" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    })().then(d => {//   fireDb.database().ref(`algorandData/${recoveredAccount3.addr}`).child(a.addkeyId).set({\n      //     createmnemonic:a.addmnemonic,\n      //     algocreator:a.addalgocreator,\n      //     algotrasnfer:\"\",\n      //     algoid:a.addassetid,\n      //     algoname:a.addalgoname,\n      //     algosymbol:a.addalgosymbol,\n      //     txnId:a.addtxid,\n      //     AssetIdset:a.addassetid,\n      //     transfer:recoveredAccount3.addr,\n      //     status:\"sold\",\n      //     price:a.addprice,\n      //     keyId:a.addkeyId,\n      //     imageurl:a.addImgs\n      // });\n      // fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).remove();\n      // fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).remove();\n      //   fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      //     createmnemonic:a.addmnemonic,\n      //     algocreator:a.addalgocreator,\n      //     algotrasnfer:\"\",\n      //     algoid:a.addassetid,\n      //     algoname:a.addalgoname,\n      //     algosymbol:a.addalgosymbol,\n      //     txnId:a.addtxid,\n      //     AssetIdset:a.addassetid,\n      //     transfer:recoveredAccount3.addr,\n      //     status:\"sold\",\n      //     price:a.addprice,\n      //     keyId:a.addkeyId,\n      //     imageurl:a.addImgs\n      // })\n    }).catch(e => {\n      console.log(e);\n      console.trace();\n    }); //cut stop\n  }; //prompt(\"Please enter your name\", \"Harry Potter\");\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 932,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: opt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 933,\n      columnNumber: 1\n    }\n  }, \"GetOpt\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 939,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: trans,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 1\n    }\n  }, \"trans\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: checasss,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 1\n    }\n  }, \"buttonass\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 952,\n      columnNumber: 3\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 955,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 956,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 957,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: a.addImgs,\n      style: {\n        height: 120,\n        width: 120,\n        marginTop: '10px'\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 967,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addprice), a.addprice === '' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        setSelectImage(a);\n        setIsOpensetFirst(true);\n      },\n      style: {\n        width: '80px',\n        height: '43px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 2\n      }\n    }, \"SetPrice\"), ' ') : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        setSelectImage(a);\n        setIsOpensetFirst(true);\n      },\n      style: {\n        width: '80px',\n        height: '43px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 981,\n        columnNumber: 7\n      }\n    }, \"UpdatePrice\")))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 3\n    }\n  }, isOpensetFirst && /*#__PURE__*/React.createElement(Popup, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 9\n      }\n    }, \"Notification\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 9\n      }\n    }, \"Enter prize \"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: tprice,\n      placeholder: \"Enter Prize\",\n      onChange: e => {\n        setTprice(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        priceset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 9\n      }\n    }, \"submit\"))),\n    handleClose: togglePopupset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 24\n    }\n  })), isOpen && /*#__PURE__*/React.createElement(Popup, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 9\n      }\n    }, \"Notification\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1015,\n        columnNumber: 9\n      }\n    }, \"Your token prize has been updated successfully......\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1016,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: togglePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 9\n      }\n    }, \"close\"))),\n    handleClose: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 12\n    }\n  }));\n};\n\n_s(AlgoTest, \"7cx6XBJQ37PxtWk6NNiBH7IFnOw=\");\n\n_c = AlgoTest;\nexport default AlgoTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTest\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTest.js"],"names":["firebase","fireDb","Popup","axios","React","useState","useEffect","useCallback","AlgoTest","tprice","setTprice","isOpenset","setIsOpenset","isOpensetFirst","setIsOpensetFirst","togglePopupset","isOpen","setIsOpen","togglePopup","a","setSelectImage","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","addprice","price","addkeyId","keyId","addImgs","imageurl","checs","txParams","tnAccounts","signedTx","tx","algosdk","require","AlgoSigner","connect","then","console","log","catch","e","error","accounts","ledger","algod","path","sign","from","to","amount","note","undefined","type","fee","firstRound","lastRound","genesisID","genesisHash","flatFee","send","blob","txId","checasss","baseServer","port","token","client","Algodv2","res","get","allnote","allNotes","assname","prompt","asssymbol","alert","address","assetName","assetUnitName","assetTotal","assetDecimals","se","localStorage","setItem","checass","getchange","priceset","child","set","algotrasnfer","AssetIdset","transfer","status","update","priceupdate","opt","allNotess","txidget","getItem","txn","apar","an","name","limit","indexer","pe","JSON","stringify","assetIndex","refalgo","dateset","Date","toDateString","db","key","algodclients","responses","lastrounds","accountInfos","pe2","trans","account1_mnemonic","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount3","addr","algodclient","waitForConfirmation","algodclien","response","do","lastround","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","printAssetHolding","myassetholding","gettxid","assetidget","params","getTransactionParams","assetID","ptx","pendingTransactionInformation","sender","recipient","revocationTarget","closeRemainderTo","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","trace","backgroundColor","display","flexWrap","height","width","border","borderRadius","marginTop","color","target","value"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport fireDb from \"./firebase\";\r\nimport Popup from './Popup';\r\nimport axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTest=()=>{\r\nconst [tprice,setTprice] = useState(\"\");\r\nconst [isOpenset, setIsOpenset] = useState(false);\r\nconst [isOpensetFirst, setIsOpensetFirst] = useState(false);\r\nconst togglePopupset = () => {\r\n  setIsOpenset(false);    \r\n}\r\nconst [isOpen, setIsOpen] = useState(false);//update prize \r\n  const togglePopup = () => {\r\n    setIsOpen(false);\r\n    //window.location.reload(false)    \r\n  }\r\n\r\nconst [a, setSelectImage] = useState({});\r\n//console.log(`agets`, a); \r\n// to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n  // const tes=()=>{\r\n  //   alert(\"hello world\");\r\n  // }\r\n    //algo\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);//\r\n//console.log(\"firs1\",getAlgos)\r\n//console.log(\"firs2\",getAlgoss)\r\n//algo\r\n//start buyers print in algo\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)  \r\n    getAlgos.map((a)=>{\r\n      //console.log(`absalgos`, a)    \r\n      Object.keys(a).map((b)=>{\r\n      //console.log(`bbb`, a[b].txnId)\r\n        req2.push({\r\n          //addAcc:\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic,\r\n    addprice:a[b].price,\r\n    addkeyId:a[b].keyId,\r\n    addImgs:a[b].imageurl\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    //console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n  //useEffect(()=>{getalgo()},[])\r\n//getAlgoss\r\n    \r\nconst checs=async()=>{  \r\n  let txParams = {};\r\n  let tnAccounts = [];\r\n  let signedTx;\r\n  let tx = {};\r\n\r\nconst algosdk = require('algosdk');\r\nAlgoSigner.connect()\r\n.then((d) => {\r\n  console.log(\"connected\",d)\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.accounts({\r\n  ledger: 'TestNet'\r\n})\r\n.then((d) => {\r\n  tnAccounts = d;\r\n  console.log(\"acc\",tnAccounts[0])\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/params'\r\n})\r\n.then((d) => {\r\n  txParams = d;\r\n  console.log(\"parms\",txParams);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n\r\nAlgoSigner.sign({\r\n  from:tnAccounts[0],\r\n  to: 'receiver address',\r\n  amount: 1000,\r\n  note: undefined,\r\n  type: 'pay',\r\n  fee: txParams['min-fee'],\r\n  firstRound: txParams['last-round'],\r\n  lastRound: txParams['last-round'] + 1000,\r\n  genesisID: txParams['genesis-id'],\r\n  genesisHash: txParams['genesis-hash'],\r\n  flatFee: true\r\n})\r\n.then((d) => {\r\n  signedTx = d;\r\n  console.log(\"signedTx\",d);\r\n})\r\n.catch((e) => {\r\n    console.error(e);\r\n});\r\n\r\nAlgoSigner.send({\r\n  ledger: 'TestNet',\r\n  tx: signedTx.blob\r\n})\r\n.then((d) => {\r\n  tx = d;\r\n  console.log(\"tx\",tx);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/pending/' + tx.txId\r\n})\r\n.then((d) => {\r\n  console.log(d);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\nconst checasss=async()=>{\r\n\r\n  const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          let client = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n          console.log(\"log1\",client);\r\n\r\n\r\n          //GET /v2/assets/{asset-id}\r\n\r\n          //https://testnet.algoexplorerapi.io/v2/transactions/pending/R43YX34AUSQP4KEENCIUT6WDFZ7GMEM4PUEIOJ4ANYZWVKA2Y56Q?format=json\r\n         //let response= await fetch(\"https://testnet.algoexplorerapi.io/v2/transactions/pending/3WCBZSAODWX74E5SHH2M63VRWBVJCYJEDOW4HCN6CQQRL5E6YDAA\");\r\n\r\n\r\n         let res=\"https://testnet.algoexplorerapi.io/v2/transactions/pending/53YN3MTE437TSZZ7XJM2PP7OPGLFFILTGZ6TMOJUKT3NPDL6R7VA?format=json\";\r\n\r\n         axios.get(`${res}`)\r\n         .then((res)=>{\r\n           const allnote=res;\r\n           const allNotes=res.data[\"asset-index\"];\r\n           console.log(\"all\",allNotes)\r\n           console.log(\"allnote\",allnote)\r\n         }).catch(error => console.error(`Error: ${error}`));       \r\n         \r\n\r\n         //let res=\"https://testnet.algoexplorerapi.io/v2/blocks/14870849\";\r\n\r\n  //let ptx = await client.pendingTransactionInformation('R43YX34AUSQP4KEENCIUT6WDFZ7GMEM4PUEIOJ4ANYZWVKA2Y56Q').do();\r\n  //let assetID = ptx[\"asset-index\"];\r\n  \r\n  console.log(\"asd\",res)\r\n\r\n\r\n  let assname=prompt(\"Please enter your asset name\");\r\n  let asssymbol=prompt(\"Please enter your asset symbol\");\r\n  if(assname === \"\" && asssymbol===\"\"){\r\n\r\n    alert(\"enter asset name and symbol\")\r\n  }\r\n  else{\r\n\r\n  \r\n\r\n  let accounts;\r\n  let txParams;\r\n  let signedTx;\r\n  let tx;\r\n\r\n  await AlgoSigner.connect();\r\n\r\n  AlgoSigner.connect()\r\n.then((d) => {\r\n  \r\n  AlgoSigner.accounts({\r\n    ledger: 'TestNet'\r\n  })\r\n  .then((d) => {\r\n    accounts = d;\r\n\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n\r\n      console.log(\"txparms\",d)\r\n\r\n      AlgoSigner.sign({\r\n        from: accounts[4].address,\r\n        assetName: assname,\r\n        assetUnitName: asssymbol,\r\n        assetTotal: +1000,\r\n        assetDecimals: +1,\r\n        note: undefined,\r\n        type: 'acfg',\r\n        fee: txParams['min-fee'],\r\n        firstRound: txParams['last-round'],\r\n        lastRound: txParams['last-round'] + 1000,\r\n        genesisID: txParams['genesis-id'],\r\n        genesisHash: txParams['genesis-hash'],\r\n        flatFee: true\r\n      })\r\n      .then((d) => {\r\n        signedTx = d;\r\n\r\n        console.log(\"singed\",d)\r\n\r\n        AlgoSigner.send({\r\n          ledger: 'TestNet',\r\n          tx: signedTx.blob\r\n        })\r\n        .then(async (d) => {\r\n          tx = d;\r\n          console.log(\"tx\",d.txId)\r\n\r\n          let se=d.txId\r\n\r\n          console.log(\"seprint\",se);\r\n          localStorage.setItem(\"txids\",se);\r\n\r\n          //db          \r\n          //db\r\n\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n\r\n\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n\r\n\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n\r\n\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n  }\r\n\r\n\r\n\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n\r\n  // const algosdk = require('algosdk');\r\n  //   const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n  //         const port = \"\";\r\n  //         //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n  //         const token = {\r\n          \r\n  //             'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n  //         }\r\n  //         let client = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n  //         console.log(\"log1\",client);\r\n\r\n  \r\n\r\n// Create an Algod client to get suggested transaction params\r\n//let client = new algosdk.Algodv2(token, server, port, headers);\r\n//let suggestedParams = await client.getTransactionParams().do();\r\n\r\n// Use the JS SDK to build a Transaction\r\n// let sdkTx = new algosdk.Transaction({\r\n//   to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//   from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n//   amount: 1000,\r\n//   suggestedParams,\r\n// });\r\n\r\n\r\n\r\n// Get the binary and base64 encode it\r\n// let binaryTx = sdkTx.toByte();\r\n// let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\r\n\r\n// let signedTxs = await AlgoSigner.signTxn([\r\n//   {\r\n//     txn: base64Tx,\r\n//   },\r\n// ]);\r\n\r\n// console.log(\"sign\",signedTxs);\r\n// //let tx = {};\r\n// let tx;\r\n// console.log(\"working\");\r\n// AlgoSigner.send({\r\n//   ledger: 'TestNet',\r\n//   tx: signedTxs.blob\r\n// })\r\n// .then((d) => {\r\n//   tx = d;\r\n//   console.log(\"tx\",tx);\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n\r\n// AlgoSigner.algod({\r\n//   ledger: 'TestNet',\r\n//   path: '/v2/transactions/pending/' + tx.txId\r\n// })\r\n// .then((d) => {\r\n//   console.log(d);\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n\r\n\r\n\r\n}\r\n\r\nconst checass=()=>{\r\n  let accounts;\r\n  let txParams;\r\n  let signedTx;\r\n  let tx;\r\n\r\n  let assname=prompt(\"Please enter your asset name\");\r\nlet asssymbol=prompt(\"Please enter your asset symbol\");\r\n\r\n  AlgoSigner.connect()\r\n.then((d) => {\r\n  AlgoSigner.accounts({\r\n    ledger: 'TestNet'\r\n  })\r\n  .then((d) => {\r\n    accounts = d;\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n      let getchange=accounts[0].address;\r\n      AlgoSigner.sign({\r\n        from: getchange,\r\n        assetName: assname,\r\n        assetUnitName: asssymbol,\r\n        assetTotal: +1000,\r\n        assetDecimals: +1,\r\n        note: undefined,\r\n        type: 'acfg',\r\n        fee: txParams['min-fee'],\r\n        firstRound: txParams['last-round'],\r\n        lastRound: txParams['last-round'] + 1000,\r\n        genesisID: txParams['genesis-id'],\r\n        genesisHash: txParams['genesis-hash'],\r\n        flatFee: true\r\n      })\r\n      .then((d) => {\r\n        signedTx = d;\r\n        AlgoSigner.send({\r\n          ledger: 'TestNet',\r\n          tx: signedTx.blob\r\n        })\r\n        .then((d) => {\r\n          tx = d;\r\n\r\n          \r\n  \r\n\r\n          AlgoSigner.algod({\r\n            ledger: 'TestNet',\r\n            path: '/v2/transactions/pending/' + tx.txId\r\n          })\r\n          .then((d) => {\r\n            console.log(d);\r\n            \r\n          })\r\n          .catch((e) => {\r\n            console.error(e);\r\n          });\r\n\r\n          \r\n        \r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n  \r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\nconst priceset=()=>{\r\n  setIsOpensetFirst(false)\r\n  console.log(a.addalgocreator)\r\n  console.log(a.addkeyId)\r\n  let price=tprice;\r\n  fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).set({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:price,\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n});\r\nfireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n  createmnemonic:a.addmnemonic,\r\n  algocreator:a.addalgocreator,\r\n  algotrasnfer:\"\",\r\n  algoid:a.addassetid,\r\n  algoname:a.addalgoname,\r\n  algosymbol:a.addalgosymbol,\r\n  txnId:a.addtxid,\r\n  AssetIdset:a.addassetid,\r\n  transfer:\"\",\r\n  status:\"\",\r\n  price:price,\r\n  keyId:a.addkeyId,\r\n  imageurl:a.addImgs\r\n})\r\n.then(()=> {\r\n  setTprice(\"\");\r\n  //setIsOpensetFirst(false);\r\n  setIsOpen(true);\r\n });\r\n}\r\nconst priceupdate=async(a)=>{\r\n\r\n  //console.log(a.addmnemonic)\r\n  //console.log(a.addkeyId)\r\n  setIsOpensetFirst(false)\r\n  console.log(a.addalgocreator)\r\n  console.log(a.addkeyId)\r\n  let price=tprice;\r\n  fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).set({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:price,\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n});\r\n\r\nfireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n  createmnemonic:a.addmnemonic,\r\n  algocreator:a.addalgocreator,\r\n  algotrasnfer:\"\",\r\n  algoid:a.addassetid,\r\n  algoname:a.addalgoname,\r\n  algosymbol:a.addalgosymbol,\r\n  txnId:a.addtxid,\r\n  AssetIdset:a.addassetid,\r\n  transfer:\"\",\r\n  status:\"\",\r\n  price:price,\r\n  keyId:a.addkeyId,\r\n  imageurl:a.addImgs\r\n})\r\n.then(()=> {\r\n  setTprice(\"\");\r\n  //setIsOpensetFirst(false);\r\n  setIsOpen(true);\r\n });\r\n}\r\n\r\n\r\nconst opt=async()=>{\r\n\r\n  // let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\n  // let assetID = ptx[\"asset-index\"];\r\n\r\n  \r\n  let accounts;\r\n  let txParams;\r\n  let signedTx;\r\n  let tx;\r\n  let allNotess;\r\n  let allNotes;\r\n\r\n  let txidget=localStorage.getItem(\"txids\");\r\n\r\n  let res=\"https://testnet.algoexplorerapi.io/v2/transactions/pending/\"+txidget+\"?format=json\";\r\n          console.log(\"ress\",res);\r\n          axios.get(`${res}`)\r\n         .then((res)=>{\r\n           const allnote=res;\r\n           allNotes=res.data[\"asset-index\"];\r\n           allNotess=res.data.txn.txn.apar.an;\r\n           console.log(\"all\",allNotes)\r\n           console.log(\"allnote\",allnote)\r\n           console.log(\"name\",allNotess)\r\n           localStorage.setItem(\"assid\",allNotes);\r\n           \r\n         }).catch(error => console.error(`Error: ${error}`));       \r\n\r\n\r\n\r\n\r\n  //cut there opt\r\n\r\n  //opt start\r\n\r\n  AlgoSigner.connect()\r\n  .then((d) => {\r\n  \r\n    AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    })\r\n    .then((d) => {\r\n      accounts = d;\r\n  \r\n      AlgoSigner.algod({\r\n        ledger: 'TestNet',\r\n        path: '/v2/transactions/params'\r\n      })\r\n      .then((d) => {\r\n        txParams = d;\r\n  \r\n  const name = allNotess;\r\n  const limit = '1';\r\n  \r\n  AlgoSigner.indexer({\r\n    ledger: 'TestNet',\r\n    path: `/v2/assets?name=${name}&limit=${limit}`,\r\n  })\r\n  .then((d) => {\r\n    let pe = JSON.stringify(d);\r\n    console.log(\"pe\",pe)\r\n  \r\n    AlgoSigner.sign({\r\n      from: accounts[6].address,\r\n      to: accounts[6].address,\r\n      assetIndex: +allNotes,\r\n      note: undefined,\r\n      amount: 0,\r\n      type: 'axfer',\r\n      fee: txParams['min-fee'],\r\n      firstRound: txParams['last-round'],\r\n      lastRound: txParams['last-round'] + 1000,\r\n      genesisID: txParams['genesis-id'],\r\n      genesisHash: txParams['genesis-hash'],\r\n      flatFee: true\r\n    })\r\n    .then((d) => {\r\n      signedTx = d;\r\n      AlgoSigner.send({\r\n        ledger: 'TestNet',\r\n        tx: signedTx.blob\r\n      })\r\n      .then((d) => {\r\n        tx = d;\r\n\r\n    let refalgo=fireDb.database().ref(`algorandData/${accounts[0].address}`);\r\n    let dateset=new Date().toDateString();\r\n    console.log(\"dateget\",dateset)\r\n    const db = refalgo.push().key;\r\n    console.log(\"dbcheck\",db)\r\n    refalgo.child(db).set({imageurl:\"\",createmnemonic:accounts[0].address,algocreator:accounts[0].address,algotrasnfer:\"\",algoid:\"\",algoname:allNotess,algosymbol:\"Algos\",txnId:d.txId,AssetIdset:allNotes,transfer:\"\",status:\"\",price:\"\",keyId:db,algodclients:\"\",responses:\"\",lastrounds:\"\",accountInfos:\"\"});\r\n  \r\n  \r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  \r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  \r\n  \r\n  })\r\n  .catch((e) => { \r\n    console.error(e);\r\n    let pe2 = JSON.stringify(e);\r\n    console.log(\"pe2\",pe2)\r\n  });\r\n  \r\n  \r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n  \r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n    \r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n  \r\n  \r\n            //end opt\r\n  \r\n  \r\n}\r\n\r\nconst trans=async()=>{\r\n\r\n  const algosdk = require('algosdk');\r\n\r\n  //var account1_mnemonic=a.addmnemonic;\r\n        var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n        var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n        var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\n        //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\n        var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n        //alert(arr[0]);\r\n        // var recoveredAccount1 = arr[0];\r\n        // var recoveredAccount2 = arr[0];\r\n        // var recoveredAccount3 = arr[0];\r\n        console.log(recoveredAccount3.addr);\r\n        console.log(recoveredAccount1.addr);\r\n        const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n        const port = \"\";\r\n        //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n        const token = {\r\n        \r\n            'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n        }\r\n        let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n        console.log(\"algodclient\",algodclient)\r\n      // Function used to wait for a tx confirmation\r\n      const waitForConfirmation = async function (algodclien, txId) {        \r\n          //console.log(\"working return 133\",txId)\r\n        //console.log(\"workingalgo\"+algodclien);\r\n          let response = await algodclien.status().do();\r\n          //console.log(\"response\",response);\r\n          let lastround = response[\"last-round\"];\r\n          //console.log(\"lastround\",lastround);\r\n          //while (true) {\r\n            //console.log(\"inside while loop\");\r\n              //const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n              //console.log(\"insidewhileloop\",pendingInfo);\r\n              // if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n              //     //Got the completed Transaction\r\n              //     console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n              //     break;\r\n              // }\r\n              //lastround++;\r\n              // await algodclien.statusAfterBlock(lastround).do();\r\n              //console.log(\"finish while loop\");\r\n          //}\r\n\r\n          //console.log(\"outside while loop\");\r\n      };\r\n      \r\n      // Function used to print created asset for account and assetid\r\n      const printCreatedAsset = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n              if (scrutinizedAsset['index'] === assetid) {\r\n                  console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                  let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                  console.log(\"parms = \" + myparms);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      // Function used to print asset holding for account and assetid\r\n      const printAssetHolding = async function (algodclient, account, assetid) {\r\n          // note: if you have an indexer instance available it is easier to just use this\r\n          //     let accountInfo = await indexerClient.searchAccounts()\r\n          //    .assetID(assetIndex).do();\r\n          // and in the loop below use this to extract the asset for a particular account\r\n          // accountInfo['accounts'][idx][account]);\r\n          let accountInfo = await algodclient.accountInformation(account).do();\r\n          for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n              let scrutinizedAsset = accountInfo['assets'][idx];\r\n              if (scrutinizedAsset['asset-id'] === assetid) {\r\n                  let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                  console.log(\"assetholdinginfo = \" + myassetholding);\r\n                  break;\r\n              }\r\n          }\r\n      };\r\n      \r\n      (async () => {      \r\n        let gettxid=localStorage.getItem(\"txids\");\r\n        let assetidget=localStorage.getItem(\"assid\");\r\n        \r\n        let params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n          //console.log(params);              \r\n          let note = undefined;          \r\n          let assetID = null;\r\n          //console.log(\"working198\");\r\n          //console.log(\"beforealgoclient\",algodclient);\r\n          //console.log(a.addtxid);\r\n          await waitForConfirmation(algodclient,gettxid);\r\n          //console.log(\"working return 209\")\r\n          // Get the new asset's information from the creator account\r\n          let ptx = await algodclient.pendingTransactionInformation(gettxid).do();\r\n          console.log(\"working return 212\",ptx[\"asset-index\"]);\r\n          assetID = ptx[\"asset-index\"];\r\n          //assetID=assetidget;        \r\n        await printCreatedAsset(algodclient,recoveredAccount1.addr, assetID);\r\n        await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);      \r\n        //console.log(\"working178\")        \r\n        //this below is transfer usefull function      \r\n        // Opting in to an Asset:\r\n        // Opting in to transact with the new asset\r\n        // Allow accounts that want recieve the new asset\r\n        // Have to opt in. To do this they send an asset transfer\r\n        // of the new asset to themseleves \r\n        // In this example we are setting up the 3rd recovered account to \r\n        // receive the new asset      \r\n        // First update changing transaction parameters\r\n        // We will account for changing transaction parameters\r\n        // before every transaction in this example\r\n        //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;      \r\n          let sender = recoveredAccount3.addr;\r\n          let recipient = sender;\r\n          // We set revocationTarget to undefined as \r\n          // This is not a clawback operation\r\n          let revocationTarget = undefined;\r\n          // CloseReaminerTo is set to undefined as\r\n          // we are not closing out an asset\r\n          let closeRemainderTo = undefined;\r\n          // We are sending 0 assets\r\n          let amount = 0;\r\n      //let note=undefined;\r\n      //assetID='15940921';      \r\n      console.log(\"working826\")      \r\n          // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n          let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n      \r\n          // Must be signed by the account wishing to opt in to the asset    \r\n          let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n          let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + opttx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, opttx.txId);\r\n      \r\n          //You should now see the new asset listed in the account information\r\n          console.log(\"Account3\" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n      //console.log(\"working 227\")        \r\n      //     // Transfer New Asset:\r\n      //     // Now that account3 can recieve the new tokens \r\n      //     // we can tranfer tokens in from the creator\r\n      //     // to account3\r\n      //     // First update changing transaction parameters\r\n      //     // We will account for changing transaction parameters\r\n      //     // before every transaction in this example\r\n      \r\n      //cmd now\r\n      \r\n          params = await algodclient.getTransactionParams().do();\r\n          //comment out the next two lines to use suggested fee\r\n          params.fee = 1000;\r\n          params.flatFee = true;\r\n      \r\n          sender = recoveredAccount1.addr;\r\n          recipient = recoveredAccount3.addr;\r\n          revocationTarget = undefined;\r\n          closeRemainderTo = undefined;\r\n          //Amount of the asset to transfer\r\n          amount = 1000;\r\n      \r\n          // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n          let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n               amount, note, assetID, params);\r\n          // Must be signed by the account sending the asset  \r\n          console.log(\"869\")\r\n          rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n          let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n          console.log(\"Transaction : \" + xtx.txId);\r\n          // wait for transaction to be confirmed\r\n          await waitForConfirmation(algodclient, xtx.txId);\r\n      \r\n          // You should now see the 10 assets listed in the account information\r\n          console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n          await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n      \r\n        })().then(d=>{\r\n\r\n        //   fireDb.database().ref(`algorandData/${recoveredAccount3.addr}`).child(a.addkeyId).set({\r\n        //     createmnemonic:a.addmnemonic,\r\n        //     algocreator:a.addalgocreator,\r\n        //     algotrasnfer:\"\",\r\n        //     algoid:a.addassetid,\r\n        //     algoname:a.addalgoname,\r\n        //     algosymbol:a.addalgosymbol,\r\n        //     txnId:a.addtxid,\r\n        //     AssetIdset:a.addassetid,\r\n        //     transfer:recoveredAccount3.addr,\r\n        //     status:\"sold\",\r\n        //     price:a.addprice,\r\n        //     keyId:a.addkeyId,\r\n        //     imageurl:a.addImgs\r\n        // });\r\n\r\n        // fireDb.database().ref(`algorandDataprice/${a.addalgocreator}`).child(a.addkeyId).remove();\r\n        // fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).remove();\r\n\r\n      //   fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n      //     createmnemonic:a.addmnemonic,\r\n      //     algocreator:a.addalgocreator,\r\n      //     algotrasnfer:\"\",\r\n      //     algoid:a.addassetid,\r\n      //     algoname:a.addalgoname,\r\n      //     algosymbol:a.addalgosymbol,\r\n      //     txnId:a.addtxid,\r\n      //     AssetIdset:a.addassetid,\r\n      //     transfer:recoveredAccount3.addr,\r\n      //     status:\"sold\",\r\n      //     price:a.addprice,\r\n      //     keyId:a.addkeyId,\r\n      //     imageurl:a.addImgs\r\n      // })\r\n        \r\n        }).catch(e => {\r\n          console.log(e);\r\n          console.trace();\r\n      });\r\n\r\n\r\n                //cut stop\r\n}\r\n\r\n//prompt(\"Please enter your name\", \"Harry Potter\");\r\n\r\n  return (\r\n    <div >\r\n      {/* style={{backgroundColor:\"white\"}} */}\r\n<button onClick={getalgo}>GetAsset</button>\r\n<br></br><br></br>\r\n<button onClick={opt}>GetOpt</button>\r\n{/* <button onClick={chec}>alert</button>\r\n<br></br><br></br>\r\n<button onClick={checs}>alert2</button>\r\n<br></br><br></br>\r\n<button onClick={checss}>alert2</button> */}\r\n<br></br><br></br>\r\n{/* <button onClick={checb1}>button1</button>\r\n<br></br><br></br>\r\n<button onClick={checb2}>button2</button>\r\n<br></br><br></br>\r\n<button onClick={checb3}>button3</button>\r\n<br></br><br></br> */}\r\n<button onClick={trans}>trans</button>\r\n<br></br><br></br>\r\n<button onClick={checasss}>buttonass</button>\r\n<br></br><br></br>\r\n{/* <button onClick={checb5}>button5</button> */}\r\n{/* {getAlgoss.length === 0 ? null :(  */}\r\n  <div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\" />\r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    <h6 style={{color:'white'}}>price : {a.addprice}</h6>\r\n    { a.addprice === '' ? (\r\n<> \r\n{/* onClick={()=>buynow(a)} */}\r\n{/* TransferAsset(a) */}\r\n {/* <button onClick={()=>priceset(a)} >Setprice</button>  */}\r\n <button onClick={()=>{\r\n    setSelectImage(a)\r\n    setIsOpensetFirst(true)\r\n  }} style={{width:'80px',height:'43px'}} >SetPrice</button>    \r\n    {' '}\r\n</>\r\n    ):(\r\n      <>\r\n      <button onClick={()=>{\r\n    setSelectImage(a)\r\n    setIsOpensetFirst(true)\r\n  }} style={{width:'80px',height:'43px'}} >UpdatePrice</button>  \r\n      </>\r\n    )}\r\n</center>\r\n</div>\r\n</div>\r\n )})}\r\n  </div>\r\n  <div>    \r\n    {isOpensetFirst && <Popup content={<>\r\n        <b>Notification</b>\r\n        <p>Enter prize </p>\r\n        <center>\r\n      <input\r\n        type=\"text\"\r\n        value={tprice}\r\n        placeholder=\"Enter Prize\"\r\n        onChange={e => {\r\n          setTprice(e.target.value);\r\n        }}\r\n      />\r\n      <br></br>\r\n      <br></br>\r\n        <button type=\"button\" onClick={()=>{priceset()}}>submit</button>\r\n        </center>\r\n      </>}\r\n       handleClose={togglePopupset}\r\n    />}\r\n</div>\r\n{isOpen && <Popup content={<>\r\n        <b>Notification</b>\r\n        <p>Your token prize has been updated successfully......</p>\r\n        <center>\r\n        <button type=\"button\" onClick={togglePopup}>close</button>\r\n        </center>\r\n      </>}\r\n       handleClose={togglePopup}\r\n    />}\r\n  </div>\r\n  );\r\n}\r\nexport default AlgoTest;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTest.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTest = () => {\n  _s();\n\n  // const tes=()=>{\n  //   alert(\"hello world\");\n  // }\n  //algo\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]); //\n  //console.log(\"firs1\",getAlgos)\n  //console.log(\"firs2\",getAlgoss)\n  //algo\n  //start buyers print in algo\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      //console.log(`absalgos`, a)\n      Object.keys(a).map(b => {\n        //console.log(`bbb`, a[b].txnId)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic\n        });\n      });\n    });\n    setgetAlgoss(req2); //console.log(\"cfbsalgo\",req) \n    // setLoader(false)\n    // setLoading(false)\n  }; //useEffect(()=>{getalgo()},[])\n  //getAlgoss\n  //start transfer\n\n\n  const TransferAsset = async a => {\n    alert(\"transferasset\");\n    console.log(\"buytx\", a.addtxid);\n\n    const algosdk = require('algosdk');\n\n    var account1_mnemonic = a.addmnemonic; //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n\n    var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic); //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic); //alert(arr[0]);\n    // var recoveredAccount1 = arr[0];\n    // var recoveredAccount2 = arr[0];\n    // var recoveredAccount3 = arr[0];\n\n    console.log(recoveredAccount3.addr);\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port); // Function used to wait for a tx confirmation\n\n    const waitForConfirmation = async function (algodclient, txId) {\n      console.log(\"working\" + txId, algodclient);\n      let response = await algodclient.status().do();\n      console.log(\"response\", response);\n      let lastround = response[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n      }\n    }; // Function used to print created asset for account and assetid\n\n\n    const printCreatedAsset = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n        if (scrutinizedAsset['index'] === assetid) {\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n          console.log(\"parms = \" + myparms);\n          break;\n        }\n      }\n    }; // Function used to print asset holding for account and assetid\n\n\n    const printAssetHolding = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['assets'][idx];\n\n        if (scrutinizedAsset['asset-id'] === assetid) {\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n          console.log(\"assetholdinginfo = \" + myassetholding);\n          break;\n        }\n      }\n    };\n\n    (async () => {\n      let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      console.log(params);\n      let note = undefined;\n      let assetID = null;\n      console.log(\"working\");\n      await waitForConfirmation(algodclient, a.addtxid); // Get the new asset's information from the creator account\n\n      let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\n      assetID = ptx[\"asset-index\"];\n      await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n      await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n      console.log(\"working178\"); //this below is transfer usefull function\n      // Opting in to an Asset:\n      // Opting in to transact with the new asset\n      // Allow accounts that want recieve the new asset\n      // Have to opt in. To do this they send an asset transfer\n      // of the new asset to themseleves \n      // In this example we are setting up the 3rd recovered account to \n      // receive the new asset\n      // First update changing transaction parameters\n      // We will account for changing transaction parameters\n      // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      let sender = recoveredAccount3.addr;\n      let recipient = sender; // We set revocationTarget to undefined as \n      // This is not a clawback operation\n\n      let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n      // we are not closing out an asset\n\n      let closeRemainderTo = undefined; // We are sending 0 assets\n\n      let amount = 0; //let note=undefined;\n      //assetID='15940921';\n\n      console.log(\"working211\"); // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n      let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n      let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n      let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n      console.log(\"Account3\" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n      console.log(\"working 227\"); //     // Transfer New Asset:\n      //     // Now that account3 can recieve the new tokens \n      //     // we can tranfer tokens in from the creator\n      //     // to account3\n      //     // First update changing transaction parameters\n      //     // We will account for changing transaction parameters\n      //     // before every transaction in this example\n      //cmd now\n\n      params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n      params.fee = 1000;\n      params.flatFee = true;\n      sender = recoveredAccount1.addr;\n      recipient = recoveredAccount3.addr;\n      revocationTarget = undefined;\n      closeRemainderTo = undefined; //Amount of the asset to transfer\n\n      amount = 1000; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n      let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n      rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n      let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n      console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n      await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n      console.log(\"Account 3 = \" + recoveredAccount3.addr);\n      await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    })().catch(e => {\n      console.log(e);\n      console.trace();\n    });\n  }; //end transfer\n  //end buyers print in algo\n\n\n  const chec = async () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    }; //let algodclient = new algosdk.Algodv2(token, baseServer, port);  \n\n    await AlgoSigner.connect(); // Create an Algod client to get suggested transaction params\n\n    let client = new algosdk.Algodv2(token, baseServer, port);\n    let suggestedParams = await client.getTransactionParams().do();\n    console.log(\"try1\", suggestedParams); // Use the JS SDK to build a Transaction\n\n    let sdkTx = new algosdk.Transaction({\n      to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n      from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n      amount: 10000,\n      suggestedParams\n    });\n    console.log(\"try2\", sdkTx); // Get the binary and base64 encode it\n\n    let binaryTx = sdkTx.toByte();\n    let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\n    console.log(\"try3\", base64Tx);\n    console.log(\"try4\", binaryTx); //open algo signer below\n\n    let txn;\n    let signedTxs = await AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]);\n    console.log(\"txn\", txn); // The AlgoSigner.signTxn() response would look like '[{ txID, blob }, null]'\n    // Convert first transaction to binary from the response\n    //let signedTx1Binary = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\n    // Sign leftover transaction with the SDK\n    //let externalAccount = algosdk.mnemonicToSecretKey('EXTERNAL_ACCOUNT_MNEMONIC');\n    //let signedTx2Binary = txn.signTxn(externalAccount.sk);\n    //await client.sendRawTransaction([signedTx1Binary, signedTx2Binary]).do();\n    // Merge transaction binaries into a single Uint8Array\n    // let combinedBinaryTxns = new Uint8Array(signedTx1Binary.byteLength + signedTx2Binary.byteLength);\n    // combinedBinaryTxns.set(signedTx1Binary, 0);\n    // combinedBinaryTxns.set(signedTx2Binary, signedTx1Binary.byteLength);\n    // // Convert the combined array values back to base64\n    // let combinedBase64Txns = AlgoSigner.encoding.msgpackToBase64(combinedBinaryTxns);\n    // await AlgoSigner.send({\n    //   ledger: 'TestNet',\n    //   tx: combinedBase64Txns,\n    // });\n  };\n\n  const checs = async () => {// // let accounts;\n    // // let txParams;\n    // // let signedTx;\n    // const algosdk = require('algosdk');\n    //   const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    //         const port = \"\";\n    //         //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n    //         const token = {\n    //             'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\n    //         }\n    //         let algodclient = new algosdk.Algodv2(token, baseServer, port);  \n    //         let a=await AlgoSigner.connect();\n    //   console.log(\"getac\",a);\n    // Create an Algod client to get suggested transaction params\n    //     let client = new algosdk.Algodv2(token, baseServer, port);\n    //     let txParamss = await client.getTransactionParams().do();\n    //     console.log(\"try2\",txParamss);\n    //   await AlgoSigner.connect()\n    // .then((d) => {\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n    // AlgoSigner.accounts({\n    //   ledger: 'TestNet'\n    // })\n    // .then((d) => {\n    //   accounts = d;\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n    // console.log(\"T1\",accounts);\n    // AlgoSigner.algod({\n    //   ledger: 'TestNet',\n    //   path: '/v2/transactions/params'\n    // })\n    // .then((d) => {\n    //   txParams = d;\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n    // console.log(\"T2\",txParams);\n    // AlgoSigner.sign({\n    //   from: \"\",\n    //   to: \"\",\n    //   amount: +100,\n    //   note: undefined,\n    //   type: 'pay',\n    //   fee: txParams['min-fee'],\n    //   firstRound: txParams['last-round'],\n    //   lastRound: txParams['last-round'] + 1000,\n    //   genesisID: txParams['genesis-id'],\n    //   genesisHash: txParams['genesis-hash'],\n    //   flatFee: true\n    // })\n    // .then((d) => {\n    //   signedTx = d;\n    // })\n    // .catch((e) => {\n    //     console.error(e);\n    // });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 428,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: chec,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 1\n    }\n  }, \"alert\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: checs,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 1\n    }\n  }, \"alert2\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 3\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addtxid), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => TransferAsset(a),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 3\n      }\n    }, \"BuyNow\"), ' ')));\n  })));\n};\n\n_s(AlgoTest, \"GlqAclrlVn7tzX4Nrn2l1ZV6su0=\");\n\n_c = AlgoTest;\nexport default AlgoTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTest\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTest.js"],"names":["firebase","React","useState","useEffect","useCallback","AlgoTest","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","a","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","TransferAsset","alert","console","log","algosdk","require","account1_mnemonic","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount3","addr","baseServer","port","token","algodclient","Algodv2","waitForConfirmation","txId","response","status","do","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","JSON","stringify","undefined","printAssetHolding","myassetholding","params","getTransactionParams","fee","flatFee","note","assetID","ptx","sender","recipient","revocationTarget","closeRemainderTo","amount","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","catch","e","trace","chec","AlgoSigner","connect","client","suggestedParams","sdkTx","Transaction","to","from","binaryTx","toByte","base64Tx","encoding","msgpackToBase64","txn","signedTxs","checs","backgroundColor","display","flexWrap","height","width","border","borderRadius","color"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTest=()=>{\r\n\r\n  // const tes=()=>{\r\n  //   alert(\"hello world\");\r\n  // }\r\n\r\n    //algo\r\n\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);//\r\n//console.log(\"firs1\",getAlgos)\r\n//console.log(\"firs2\",getAlgoss)\r\n\r\n//algo\r\n//start buyers print in algo\r\n\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n  \r\n    getAlgos.map((a)=>{\r\n      //console.log(`absalgos`, a)\r\n    \r\n      Object.keys(a).map((b)=>{\r\n      //console.log(`bbb`, a[b].txnId)\r\n        req2.push({\r\n          //addAcc:\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    //console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n  //useEffect(()=>{getalgo()},[])\r\n\r\n//getAlgoss\r\n\r\n\r\n    //start transfer\r\n\r\n    const TransferAsset=async(a)=>{\r\n      alert(\"transferasset\");\r\n      console.log(\"buytx\",a.addtxid);\r\n        const algosdk = require('algosdk');\r\n        var account1_mnemonic=a.addmnemonic;\r\n          //var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          //var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n          var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n          var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\n          //var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\n          var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n          //alert(arr[0]);\r\n          // var recoveredAccount1 = arr[0];\r\n          // var recoveredAccount2 = arr[0];\r\n          // var recoveredAccount3 = arr[0];\r\n          console.log(recoveredAccount3.addr);\r\n          const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n        // Function used to wait for a tx confirmation\r\n        const waitForConfirmation = async function (algodclient, txId) {\r\n          console.log(\"working\"+txId,algodclient);\r\n            let response = await algodclient.status().do();\r\n            console.log(\"response\",response);\r\n            let lastround = response[\"last-round\"];\r\n            while (true) {\r\n                const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n                if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n                    //Got the completed Transaction\r\n                    console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n                    break;\r\n                }\r\n                lastround++;\r\n                await algodclient.statusAfterBlock(lastround).do();\r\n            }\r\n        };\r\n        \r\n        // Function used to print created asset for account and assetid\r\n        const printCreatedAsset = async function (algodclient, account, assetid) {\r\n            // note: if you have an indexer instance available it is easier to just use this\r\n            //     let accountInfo = await indexerClient.searchAccounts()\r\n            //    .assetID(assetIndex).do();\r\n            // and in the loop below use this to extract the asset for a particular account\r\n            // accountInfo['accounts'][idx][account]);\r\n            let accountInfo = await algodclient.accountInformation(account).do();\r\n            for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n                let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n                if (scrutinizedAsset['index'] === assetid) {\r\n                    console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n                    let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n                    console.log(\"parms = \" + myparms);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        // Function used to print asset holding for account and assetid\r\n        const printAssetHolding = async function (algodclient, account, assetid) {\r\n            // note: if you have an indexer instance available it is easier to just use this\r\n            //     let accountInfo = await indexerClient.searchAccounts()\r\n            //    .assetID(assetIndex).do();\r\n            // and in the loop below use this to extract the asset for a particular account\r\n            // accountInfo['accounts'][idx][account]);\r\n            let accountInfo = await algodclient.accountInformation(account).do();\r\n            for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n                let scrutinizedAsset = accountInfo['assets'][idx];\r\n                if (scrutinizedAsset['asset-id'] === assetid) {\r\n                    let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n                    console.log(\"assetholdinginfo = \" + myassetholding);\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n        \r\n        (async () => {\r\n        \r\n        \r\n          let params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n            console.log(params);\r\n            \r\n        \r\n            let note = undefined;\r\n            \r\n            let assetID = null;\r\n            console.log(\"working\");\r\n            \r\n            await waitForConfirmation(algodclient,a.addtxid);\r\n            // Get the new asset's information from the creator account\r\n            let ptx = await algodclient.pendingTransactionInformation(a.addtxid).do();\r\n            assetID = ptx[\"asset-index\"];\r\n          \r\n          await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n          await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\r\n        \r\n          console.log(\"working178\")\r\n          \r\n          //this below is transfer usefull function\r\n        \r\n          // Opting in to an Asset:\r\n          // Opting in to transact with the new asset\r\n          // Allow accounts that want recieve the new asset\r\n          // Have to opt in. To do this they send an asset transfer\r\n          // of the new asset to themseleves \r\n          // In this example we are setting up the 3rd recovered account to \r\n          // receive the new asset\r\n        \r\n          // First update changing transaction parameters\r\n          // We will account for changing transaction parameters\r\n          // before every transaction in this example\r\n          //cmd now\r\n        \r\n            params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n        \r\n            let sender = recoveredAccount3.addr;\r\n            let recipient = sender;\r\n            // We set revocationTarget to undefined as \r\n            // This is not a clawback operation\r\n            let revocationTarget = undefined;\r\n            // CloseReaminerTo is set to undefined as\r\n            // we are not closing out an asset\r\n            let closeRemainderTo = undefined;\r\n            // We are sending 0 assets\r\n            let amount = 0;\r\n        //let note=undefined;\r\n        //assetID='15940921';\r\n        \r\n        console.log(\"working211\")\r\n        \r\n            // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n            let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n                 amount, note, assetID, params);\r\n        \r\n            // Must be signed by the account wishing to opt in to the asset    \r\n            let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n            let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n            console.log(\"Transaction : \" + opttx.txId);\r\n            // wait for transaction to be confirmed\r\n            await waitForConfirmation(algodclient, opttx.txId);\r\n        \r\n            //You should now see the new asset listed in the account information\r\n            console.log(\"Account3\" + recoveredAccount3.addr);\r\n            await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n        \r\n            console.log(\"working 227\")\r\n          \r\n        //     // Transfer New Asset:\r\n        //     // Now that account3 can recieve the new tokens \r\n        //     // we can tranfer tokens in from the creator\r\n        //     // to account3\r\n        //     // First update changing transaction parameters\r\n        //     // We will account for changing transaction parameters\r\n        //     // before every transaction in this example\r\n        \r\n        //cmd now\r\n        \r\n            params = await algodclient.getTransactionParams().do();\r\n            //comment out the next two lines to use suggested fee\r\n            params.fee = 1000;\r\n            params.flatFee = true;\r\n        \r\n            sender = recoveredAccount1.addr;\r\n            recipient = recoveredAccount3.addr;\r\n            revocationTarget = undefined;\r\n            closeRemainderTo = undefined;\r\n            //Amount of the asset to transfer\r\n            amount = 1000;\r\n        \r\n            // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n            let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n                 amount, note, assetID, params);\r\n            // Must be signed by the account sending the asset  \r\n            rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n            let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n            console.log(\"Transaction : \" + xtx.txId);\r\n            // wait for transaction to be confirmed\r\n            await waitForConfirmation(algodclient, xtx.txId);\r\n        \r\n            // You should now see the 10 assets listed in the account information\r\n            console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n            await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n        \r\n          })().catch(e => {\r\n            console.log(e);\r\n            console.trace();\r\n        });\r\n        }\r\n    \r\n      //end transfer\r\n  //end buyers print in algo\r\n\r\n  const chec=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          //let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n    await AlgoSigner.connect();\r\n\r\n    // Create an Algod client to get suggested transaction params\r\n    let client = new algosdk.Algodv2(token, baseServer, port);\r\n    let suggestedParams = await client.getTransactionParams().do();\r\n    console.log(\"try1\",suggestedParams);\r\n    \r\n    // Use the JS SDK to build a Transaction\r\n    let sdkTx = new algosdk.Transaction({\r\n      to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n      from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n      amount: 10000,\r\n      suggestedParams,\r\n    });\r\n    \r\n   console.log(\"try2\",sdkTx);\r\n    // Get the binary and base64 encode it\r\n    let binaryTx = sdkTx.toByte();\r\n    let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\r\n    console.log(\"try3\",base64Tx);\r\n    console.log(\"try4\",binaryTx);\r\n    \r\n\r\n    //open algo signer below\r\n    let txn;\r\n\r\n    let signedTxs = await AlgoSigner.signTxn([\r\n      {\r\n        txn: base64Tx\r\n      },\r\n    ]); \r\n\r\n    console.log(\"txn\",txn);\r\n\r\n    // The AlgoSigner.signTxn() response would look like '[{ txID, blob }, null]'\r\n// Convert first transaction to binary from the response\r\n//let signedTx1Binary = AlgoSigner.encoding.base64ToMsgpack(signedTxs[0].blob);\r\n// Sign leftover transaction with the SDK\r\n//let externalAccount = algosdk.mnemonicToSecretKey('EXTERNAL_ACCOUNT_MNEMONIC');\r\n//let signedTx2Binary = txn.signTxn(externalAccount.sk);\r\n\r\n//await client.sendRawTransaction([signedTx1Binary, signedTx2Binary]).do();\r\n\r\n// Merge transaction binaries into a single Uint8Array\r\n// let combinedBinaryTxns = new Uint8Array(signedTx1Binary.byteLength + signedTx2Binary.byteLength);\r\n// combinedBinaryTxns.set(signedTx1Binary, 0);\r\n// combinedBinaryTxns.set(signedTx2Binary, signedTx1Binary.byteLength);\r\n\r\n// // Convert the combined array values back to base64\r\n// let combinedBase64Txns = AlgoSigner.encoding.msgpackToBase64(combinedBinaryTxns);\r\n\r\n// await AlgoSigner.send({\r\n//   ledger: 'TestNet',\r\n//   tx: combinedBase64Txns,\r\n// });\r\n\r\n  }\r\n\r\nconst checs=async()=>{\r\n\r\n\r\n  \r\n\r\n  // // let accounts;\r\n  // // let txParams;\r\n  // // let signedTx;\r\n\r\n  // const algosdk = require('algosdk');\r\n  //   const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n  //         const port = \"\";\r\n  //         //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n  //         const token = {\r\n          \r\n  //             'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n  //         }\r\n  //         let algodclient = new algosdk.Algodv2(token, baseServer, port);  \r\n      \r\n  //         let a=await AlgoSigner.connect();\r\n          \r\n\r\n  //   console.log(\"getac\",a);\r\n\r\n    // Create an Algod client to get suggested transaction params\r\n//     let client = new algosdk.Algodv2(token, baseServer, port);\r\n//     let txParamss = await client.getTransactionParams().do();\r\n//     console.log(\"try2\",txParamss);\r\n\r\n//   await AlgoSigner.connect()\r\n// .then((d) => {\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n\r\n\r\n\r\n// AlgoSigner.accounts({\r\n//   ledger: 'TestNet'\r\n// })\r\n// .then((d) => {\r\n//   accounts = d;\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n\r\n// console.log(\"T1\",accounts);\r\n\r\n// AlgoSigner.algod({\r\n//   ledger: 'TestNet',\r\n//   path: '/v2/transactions/params'\r\n// })\r\n// .then((d) => {\r\n//   txParams = d;\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n\r\n\r\n// console.log(\"T2\",txParams);\r\n\r\n// AlgoSigner.sign({\r\n//   from: \"\",\r\n//   to: \"\",\r\n//   amount: +100,\r\n//   note: undefined,\r\n//   type: 'pay',\r\n//   fee: txParams['min-fee'],\r\n//   firstRound: txParams['last-round'],\r\n//   lastRound: txParams['last-round'] + 1000,\r\n//   genesisID: txParams['genesis-id'],\r\n//   genesisHash: txParams['genesis-hash'],\r\n//   flatFee: true\r\n// })\r\n// .then((d) => {\r\n//   signedTx = d;\r\n// })\r\n// .catch((e) => {\r\n//     console.error(e);\r\n// });\r\n\r\n\r\n}\r\n\r\n\r\n  return (\r\n\r\n    <div >\r\n      {/* style={{backgroundColor:\"white\"}} */}\r\n\r\n<button onClick={getalgo}>GetAsset</button>\r\n\r\n<br></br><br></br>\r\n\r\n<button onClick={chec}>alert</button>\r\n\r\n<br></br><br></br>\r\n\r\n<button onClick={checs}>alert2</button>\r\n\r\n{/* {getAlgoss.length === 0 ? null :(  */}\r\n  <div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\"    />\r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n  \r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>price : {a.addtxid}</h6>\r\n\r\n    {/* {a.addsold === '' ? (\r\n<> */}\r\n{/* onClick={()=>buynow(a)} */}\r\n{ <button onClick={()=>TransferAsset(a)} >BuyNow</button> }\r\n  \r\n    {' '}\r\n{/* </>\r\n    ):(\r\n\r\n      <h4 style={{color:'white'}}>Already solded</h4>\r\n    )} */}\r\n</center>\r\n</div>\r\n\r\n</div>\r\n )})}\r\n  </div>\r\n{/* )} */}\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default AlgoTest;"]},"metadata":{},"sourceType":"module"}
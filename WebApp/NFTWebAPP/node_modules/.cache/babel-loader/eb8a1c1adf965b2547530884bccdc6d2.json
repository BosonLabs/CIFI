{"ast":null,"code":"'use strict';\n\nconst isNode = require('detect-node');\n\nconst flatmap = require('flatmap');\n\nfunction loadPaths(opts, file) {\n  const path = require('path');\n\n  const fs = require('fs');\n\n  const glob = require('glob');\n\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true;\n  file = path.resolve(file);\n  const stats = fs.statSync(file);\n\n  if (stats.isDirectory() && !opts.recursive) {\n    throw new Error('Can only add directories using --recursive');\n  }\n\n  if (stats.isDirectory() && opts.recursive) {\n    // glob requires a POSIX filename\n    file = file.split(path.sep).join('/');\n    const fullDir = file + (file.endsWith('/') ? '' : '/');\n    let dirName = fullDir.split('/');\n    dirName = dirName[dirName.length - 2] + '/';\n    const mg = new glob.sync.GlobSync('**/*', {\n      cwd: file,\n      follow: followSymlinks,\n      dot: opts.hidden,\n      ignore: opts.ignore\n    });\n    return mg.found.map(name => {\n      const fqn = fullDir + name; // symlinks\n\n      if (mg.symlinks[fqn] === true) {\n        return {\n          path: dirName + name,\n          symlink: true,\n          dir: false,\n          content: fs.readlinkSync(fqn)\n        };\n      } // files\n\n\n      if (mg.cache[fqn] === 'FILE') {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: false,\n          content: fs.createReadStream(fqn)\n        };\n      } // directories\n\n\n      if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\n        return {\n          path: dirName + name,\n          symlink: false,\n          dir: true\n        };\n      } // files inside symlinks and others\n\n    }) // filter out null files\n    .filter(Boolean);\n  }\n\n  return {\n    path: path.basename(file),\n    content: fs.createReadStream(file)\n  };\n}\n\nfunction prepareFile(file, opts) {\n  let files = [].concat(file);\n  return flatmap(files, file => {\n    if (typeof file === 'string') {\n      if (!isNode) {\n        throw new Error('Can only add file paths in node');\n      }\n\n      return loadPaths(opts, file);\n    }\n\n    if (file.path && !file.content) {\n      file.dir = true;\n      return file;\n    }\n\n    if (file.content || file.dir) {\n      return file;\n    }\n\n    return {\n      path: '',\n      symlink: false,\n      dir: false,\n      content: file\n    };\n  });\n}\n\nexports = module.exports = prepareFile;","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/ipfs-api/src/utils/prepare-file.js"],"names":["isNode","require","flatmap","loadPaths","opts","file","path","fs","glob","followSymlinks","resolve","stats","statSync","isDirectory","recursive","Error","split","sep","join","fullDir","endsWith","dirName","length","mg","sync","GlobSync","cwd","follow","dot","hidden","ignore","found","map","name","fqn","symlinks","symlink","dir","content","readlinkSync","cache","createReadStream","Array","filter","Boolean","basename","prepareFile","files","concat","exports","module"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst isNode = require('detect-node')\r\nconst flatmap = require('flatmap')\r\n\r\nfunction loadPaths (opts, file) {\r\n  const path = require('path')\r\n  const fs = require('fs')\r\n  const glob = require('glob')\r\n\r\n  const followSymlinks = opts.followSymlinks != null ? opts.followSymlinks : true\r\n\r\n  file = path.resolve(file)\r\n  const stats = fs.statSync(file)\r\n\r\n  if (stats.isDirectory() && !opts.recursive) {\r\n    throw new Error('Can only add directories using --recursive')\r\n  }\r\n\r\n  if (stats.isDirectory() && opts.recursive) {\r\n    // glob requires a POSIX filename\r\n    file = file.split(path.sep).join('/')\r\n    const fullDir = file + (file.endsWith('/') ? '' : '/')\r\n    let dirName = fullDir.split('/')\r\n    dirName = dirName[dirName.length - 2] + '/'\r\n    const mg = new glob.sync.GlobSync('**/*', {\r\n      cwd: file,\r\n      follow: followSymlinks,\r\n      dot: opts.hidden,\r\n      ignore: opts.ignore\r\n    })\r\n\r\n    return mg.found\r\n      .map((name) => {\r\n        const fqn = fullDir + name\r\n        // symlinks\r\n        if (mg.symlinks[fqn] === true) {\r\n          return {\r\n            path: dirName + name,\r\n            symlink: true,\r\n            dir: false,\r\n            content: fs.readlinkSync(fqn)\r\n          }\r\n        }\r\n\r\n        // files\r\n        if (mg.cache[fqn] === 'FILE') {\r\n          return {\r\n            path: dirName + name,\r\n            symlink: false,\r\n            dir: false,\r\n            content: fs.createReadStream(fqn)\r\n          }\r\n        }\r\n\r\n        // directories\r\n        if (mg.cache[fqn] === 'DIR' || mg.cache[fqn] instanceof Array) {\r\n          return {\r\n            path: dirName + name,\r\n            symlink: false,\r\n            dir: true\r\n          }\r\n        }\r\n        // files inside symlinks and others\r\n      })\r\n      // filter out null files\r\n      .filter(Boolean)\r\n  }\r\n\r\n  return {\r\n    path: path.basename(file),\r\n    content: fs.createReadStream(file)\r\n  }\r\n}\r\n\r\nfunction prepareFile (file, opts) {\r\n  let files = [].concat(file)\r\n\r\n  return flatmap(files, (file) => {\r\n    if (typeof file === 'string') {\r\n      if (!isNode) {\r\n        throw new Error('Can only add file paths in node')\r\n      }\r\n\r\n      return loadPaths(opts, file)\r\n    }\r\n\r\n    if (file.path && !file.content) {\r\n      file.dir = true\r\n      return file\r\n    }\r\n\r\n    if (file.content || file.dir) {\r\n      return file\r\n    }\r\n\r\n    return {\r\n      path: '',\r\n      symlink: false,\r\n      dir: false,\r\n      content: file\r\n    }\r\n  })\r\n}\r\n\r\nexports = module.exports = prepareFile\r\n"]},"metadata":{},"sourceType":"script"}
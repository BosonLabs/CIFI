{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\NewIpfs.js\";\n// /* global AlgoSigner */\n// import firebase from \"firebase\";\n// import fireDb from \"./firebase\";\n// import Popup from './Popup';\n// import axios from 'axios';\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NewIpfs = () => {\n  const express = require('express');\n\n  const app = express();\n\n  const fs = require('fs');\n\n  var multer = require('multer');\n\n  var upload = multer({\n    dest: 'uploads/'\n  });\n\n  var ipfsAPI = require('ipfs-api');\n\n  var ipfs = ipfsAPI('ipfs.infura.io', '5001', {\n    protocol: 'https'\n  });\n  app.get('/', function (req, res) {\n    //   res.send('Hello World')\n    res.sendFile(__dirname + '/public/index.html');\n  });\n  app.post('/profile', upload.single('avatar'), function (req, res, next) {\n    // req.file is the `avatar` file\n    // req.body will hold the text fields, if there were any\n    console.log(req.file);\n    var data = new Buffer(fs.readFileSync(req.file.path));\n    ipfs.add(data, function (err, file) {\n      if (err) {\n        console.log(err);\n      }\n\n      console.log(file);\n      res.send(file[0].hash);\n    });\n  });\n  app.get('/download/:ID', function (req, res) {\n    console.log(req.params.ID);\n    res.redirect('https://ipfs.io/ipfs/' + req.params.ID);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"hello\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"/profile\",\n        method: \"post\",\n        enctype: \"multipart/form-data\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"avatar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"filehash\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onclick: \"loadDoc()\",\n        children: \"download\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_c = NewIpfs;\nexport default NewIpfs;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewIpfs\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/NewIpfs.js"],"names":["React","useState","useEffect","useCallback","NewIpfs","express","require","app","fs","multer","upload","dest","ipfsAPI","ipfs","protocol","get","req","res","sendFile","__dirname","post","single","next","console","log","file","data","Buffer","readFileSync","path","add","err","send","hash","params","ID","redirect","color"],"mappings":"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","sourcesContent":["// /* global AlgoSigner */\r\n// import firebase from \"firebase\";\r\n// import fireDb from \"./firebase\";\r\n// import Popup from './Popup';\r\n// import axios from 'axios';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst NewIpfs=()=>{\r\n\r\n\r\n  const express = require('express')\r\n  const app = express()\r\n  \r\n  const fs =require('fs');\r\n  \r\n  var multer  = require('multer')\r\n  var upload = multer({ dest: 'uploads/' })\r\n  \r\n  var ipfsAPI = require('ipfs-api')\r\n  var ipfs = ipfsAPI('ipfs.infura.io', '5001', {protocol: 'https'})\r\n   \r\n  app.get('/', function (req, res) {\r\n  //   res.send('Hello World')\r\n      res.sendFile(__dirname+'/public/index.html');\r\n  })\r\n  \r\n  app.post('/profile', upload.single('avatar'), function (req, res, next) {\r\n      // req.file is the `avatar` file\r\n      // req.body will hold the text fields, if there were any\r\n      console.log(req.file);\r\n      var data = new Buffer(fs.readFileSync(req.file.path));\r\n      ipfs.add(data, function (err,file){\r\n          if(err){\r\n              console.log(err);\r\n          }\r\n          console.log(file);\r\n          res.send(file[0].hash);\r\n      })\r\n  \r\n    })\r\n  \r\n    app.get('/download/:ID',function(req,res){\r\n        console.log(req.params.ID);\r\n        res.redirect('https://ipfs.io/ipfs/'+req.params.ID);\r\n    })\r\n   \r\n  \r\n\r\n\r\n  return (\r\n    <div >\r\n\r\n        <h1 style={{color:'white'}}>hello</h1>\r\n\r\n        <div>\r\n\r\n        <form action=\"/profile\" method=\"post\" enctype=\"multipart/form-data\">\r\n        <input type=\"file\" name=\"avatar\" />\r\n        <button>upload</button>\r\n      </form>\r\n      <input id=\"filehash\"type=\"text\"/>\r\n      <button onclick=\"loadDoc()\">download</button>\r\n      </div>\r\n      \r\n  </div>\r\n  );\r\n}\r\nexport default NewIpfs;"]},"metadata":{},"sourceType":"module"}
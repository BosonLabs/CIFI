{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTest.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport fireDb from \"./firebase\";\nimport Popup from './Popup';\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTest = () => {\n  _s();\n\n  const [tprice, setTprice] = useState(\"\");\n  const [isOpenset, setIsOpenset] = useState(false);\n  const [isOpensetFirst, setIsOpensetFirst] = useState(false);\n\n  const togglePopupset = () => {\n    setIsOpenset(false);\n  };\n\n  const [isOpen, setIsOpen] = useState(false); //update prize \n\n  const togglePopup = () => {\n    setIsOpen(false); //window.location.reload(false)    \n  };\n\n  const [a, setSelectImage] = useState({});\n  console.log(`agets`, a); // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n  //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n  // const tes=()=>{\n  //   alert(\"hello world\");\n  // }\n  //algo\n\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]); //\n  //console.log(\"firs1\",getAlgos)\n  //console.log(\"firs2\",getAlgoss)\n  //algo\n  //start buyers print in algo\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      //console.log(`absalgos`, a)\n      Object.keys(a).map(b => {\n        //console.log(`bbb`, a[b].txnId)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic,\n          addprice: a[b].price,\n          addkeyId: a[b].keyId,\n          addImgs: a[b].imageurl\n        });\n      });\n    });\n    setgetAlgoss(req2); //console.log(\"cfbsalgo\",req) \n    // setLoader(false)\n    // setLoading(false)\n  }; //useEffect(()=>{getalgo()},[])\n  //getAlgoss\n\n\n  const checs = async () => {\n    let txParams = {};\n    let tnAccounts = [];\n    let signedTx;\n    let tx = {};\n\n    const algosdk = require('algosdk');\n\n    AlgoSigner.connect().then(d => {\n      console.log(\"connected\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }).then(d => {\n      tnAccounts = d;\n      console.log(\"acc\", tnAccounts[0]);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    }).then(d => {\n      txParams = d;\n      console.log(\"parms\", txParams);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.sign({\n      from: tnAccounts[0],\n      to: 'receiver address',\n      amount: 1000,\n      note: undefined,\n      type: 'pay',\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash'],\n      flatFee: true\n    }).then(d => {\n      signedTx = d;\n      console.log(\"signedTx\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    }).then(d => {\n      tx = d;\n      console.log(\"tx\", tx);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/pending/' + tx.txId\n    }).then(d => {\n      console.log(d);\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const checss = async () => {\n    // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n    //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let client = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"log1\", client);\n    await AlgoSigner.connect(); // Create an Algod client to get suggested transaction params\n    //let client = new algosdk.Algodv2(token, server, port, headers);\n\n    let suggestedParams = await client.getTransactionParams().do(); // Use the JS SDK to build a Transaction\n\n    let sdkTx = new algosdk.Transaction({\n      to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n      from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n      amount: 1000,\n      suggestedParams\n    }); // Get the binary and base64 encode it\n\n    let binaryTx = sdkTx.toByte();\n    let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\n    let signedTxs = await AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]);\n    console.log(\"sign\", signedTxs); //let tx = {};\n\n    let tx;\n    console.log(\"working\");\n    AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTxs.blob\n    }).then(d => {\n      tx = d;\n      console.log(\"tx\", tx);\n    }).catch(e => {\n      console.error(e);\n    }); // AlgoSigner.algod({\n    //   ledger: 'TestNet',\n    //   path: '/v2/transactions/pending/' + tx.txId\n    // })\n    // .then((d) => {\n    //   console.log(d);\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n  };\n\n  const checass = () => {\n    let accounts;\n    let txParams;\n    let signedTx;\n    let tx;\n    AlgoSigner.connect().then(d => {\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          let getchange = accounts[0].address;\n          AlgoSigner.sign({\n            from: getchange,\n            assetName: 'ChangeAl',\n            assetUnitName: \"Algos\",\n            assetTotal: +1000,\n            assetDecimals: +1,\n            note: undefined,\n            type: 'acfg',\n            fee: txParams['min-fee'],\n            firstRound: txParams['last-round'],\n            lastRound: txParams['last-round'] + 1000,\n            genesisID: txParams['genesis-id'],\n            genesisHash: txParams['genesis-hash'],\n            flatFee: true\n          }).then(d => {\n            signedTx = d;\n            AlgoSigner.send({\n              ledger: 'TestNet',\n              tx: signedTx.blob\n            }).then(d => {\n              tx = d; //cut there opt\n\n              AlgoSigner.algod({\n                ledger: 'TestNet',\n                path: '/v2/transactions/pending/' + tx.txId\n              }).then(d => {\n                console.log(d);\n              }).catch(e => {\n                console.error(e);\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const priceset = async () => {\n    setIsOpensetFirst(false);\n    console.log(a.addalgocreator);\n    console.log(a.addkeyId);\n    let price = tprice;\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: price,\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    }).then(() => {\n      setTprice(\"\"); //setIsOpensetFirst(false);\n\n      setIsOpen(true);\n    });\n  };\n\n  const priceupdate = async a => {\n    console.log(a.addmnemonic);\n    console.log(a.addkeyId);\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: \"1000\",\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: checass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 1\n    }\n  }, \"buttonass\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 418,\n      columnNumber: 3\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: a.addImgs,\n      style: {\n        height: 120,\n        width: 120,\n        marginTop: '10px'\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addprice), a.addprice === '' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        setSelectImage(a);\n        setIsOpensetFirst(true);\n      },\n      style: {\n        width: '80px',\n        height: '43px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 2\n      }\n    }, \"SetPrice\"), ' ') : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => {\n        setSelectImage(a);\n        setIsOpensetFirst(true);\n      },\n      style: {\n        width: '80px',\n        height: '43px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 7\n      }\n    }, \"UpdatePrice\")))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 470,\n      columnNumber: 3\n    }\n  }, isOpensetFirst && /*#__PURE__*/React.createElement(Popup, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }\n    }, \"Notification\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }\n    }, \"Enter prize \"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: tprice,\n      placeholder: \"Enter Prize\",\n      onChange: e => {\n        setTprice(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        priceset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }\n    }, \"submit\"))),\n    handleClose: togglePopupset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 24\n    }\n  })), isOpen && /*#__PURE__*/React.createElement(Popup, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }\n    }, \"Notification\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }\n    }, \"Your token prize has been updated successfully......\"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: togglePopup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 9\n      }\n    }, \"close\"))),\n    handleClose: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 12\n    }\n  }));\n};\n\n_s(AlgoTest, \"7cx6XBJQ37PxtWk6NNiBH7IFnOw=\");\n\n_c = AlgoTest;\nexport default AlgoTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTest\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTest.js"],"names":["firebase","fireDb","Popup","React","useState","useEffect","useCallback","AlgoTest","tprice","setTprice","isOpenset","setIsOpenset","isOpensetFirst","setIsOpensetFirst","togglePopupset","isOpen","setIsOpen","togglePopup","a","setSelectImage","console","log","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","addprice","price","addkeyId","keyId","addImgs","imageurl","checs","txParams","tnAccounts","signedTx","tx","algosdk","require","AlgoSigner","connect","then","catch","e","error","accounts","ledger","algod","path","sign","from","to","amount","note","undefined","type","fee","firstRound","lastRound","genesisID","genesisHash","flatFee","send","blob","txId","checss","baseServer","port","token","client","Algodv2","suggestedParams","getTransactionParams","do","sdkTx","Transaction","binaryTx","toByte","base64Tx","encoding","msgpackToBase64","signedTxs","signTxn","txn","checass","getchange","address","assetName","assetUnitName","assetTotal","assetDecimals","priceset","child","update","algotrasnfer","AssetIdset","transfer","status","priceupdate","backgroundColor","display","flexWrap","height","width","border","borderRadius","marginTop","color","target","value"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport fireDb from \"./firebase\";\r\nimport Popup from './Popup';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTest=()=>{\r\nconst [tprice,setTprice] = useState(\"\");\r\nconst [isOpenset, setIsOpenset] = useState(false);\r\nconst [isOpensetFirst, setIsOpensetFirst] = useState(false);\r\nconst togglePopupset = () => {\r\n  setIsOpenset(false);    \r\n}\r\nconst [isOpen, setIsOpen] = useState(false);//update prize \r\n  const togglePopup = () => {\r\n    setIsOpen(false);\r\n    //window.location.reload(false)    \r\n  }\r\n\r\nconst [a, setSelectImage] = useState({});\r\n\r\nconsole.log(`agets`, a); \r\n\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n\r\n  // const tes=()=>{\r\n  //   alert(\"hello world\");\r\n  // }\r\n\r\n    //algo\r\n\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);//\r\n//console.log(\"firs1\",getAlgos)\r\n//console.log(\"firs2\",getAlgoss)\r\n\r\n//algo\r\n//start buyers print in algo\r\n\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n  \r\n    getAlgos.map((a)=>{\r\n      //console.log(`absalgos`, a)\r\n    \r\n      Object.keys(a).map((b)=>{\r\n      //console.log(`bbb`, a[b].txnId)\r\n        req2.push({\r\n          //addAcc:\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic,\r\n    addprice:a[b].price,\r\n    addkeyId:a[b].keyId,\r\n    addImgs:a[b].imageurl\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    //console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n  //useEffect(()=>{getalgo()},[])\r\n\r\n//getAlgoss\r\n\r\n\r\n    \r\nconst checs=async()=>{  \r\n  let txParams = {};\r\n  let tnAccounts = [];\r\n  let signedTx;\r\n  let tx = {};\r\n\r\nconst algosdk = require('algosdk');\r\nAlgoSigner.connect()\r\n.then((d) => {\r\n  console.log(\"connected\",d)\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.accounts({\r\n  ledger: 'TestNet'\r\n})\r\n.then((d) => {\r\n  tnAccounts = d;\r\n  console.log(\"acc\",tnAccounts[0])\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/params'\r\n})\r\n.then((d) => {\r\n  txParams = d;\r\n  console.log(\"parms\",txParams);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n\r\nAlgoSigner.sign({\r\n  from:tnAccounts[0],\r\n  to: 'receiver address',\r\n  amount: 1000,\r\n  note: undefined,\r\n  type: 'pay',\r\n  fee: txParams['min-fee'],\r\n  firstRound: txParams['last-round'],\r\n  lastRound: txParams['last-round'] + 1000,\r\n  genesisID: txParams['genesis-id'],\r\n  genesisHash: txParams['genesis-hash'],\r\n  flatFee: true\r\n})\r\n.then((d) => {\r\n  signedTx = d;\r\n  console.log(\"signedTx\",d);\r\n})\r\n.catch((e) => {\r\n    console.error(e);\r\n});\r\n\r\nAlgoSigner.send({\r\n  ledger: 'TestNet',\r\n  tx: signedTx.blob\r\n})\r\n.then((d) => {\r\n  tx = d;\r\n  console.log(\"tx\",tx);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/pending/' + tx.txId\r\n})\r\n.then((d) => {\r\n  console.log(d);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\nconst checss=async()=>{\r\n\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n\r\n  const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          let client = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n          console.log(\"log1\",client);\r\n\r\n  await AlgoSigner.connect();\r\n\r\n// Create an Algod client to get suggested transaction params\r\n//let client = new algosdk.Algodv2(token, server, port, headers);\r\nlet suggestedParams = await client.getTransactionParams().do();\r\n\r\n// Use the JS SDK to build a Transaction\r\nlet sdkTx = new algosdk.Transaction({\r\n  to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n  from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n  amount: 1000,\r\n  suggestedParams,\r\n});\r\n\r\n\r\n\r\n// Get the binary and base64 encode it\r\nlet binaryTx = sdkTx.toByte();\r\nlet base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\r\n\r\nlet signedTxs = await AlgoSigner.signTxn([\r\n  {\r\n    txn: base64Tx,\r\n  },\r\n]);\r\n\r\nconsole.log(\"sign\",signedTxs);\r\n//let tx = {};\r\nlet tx;\r\nconsole.log(\"working\");\r\nAlgoSigner.send({\r\n  ledger: 'TestNet',\r\n  tx: signedTxs.blob\r\n})\r\n.then((d) => {\r\n  tx = d;\r\n  console.log(\"tx\",tx);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n// AlgoSigner.algod({\r\n//   ledger: 'TestNet',\r\n//   path: '/v2/transactions/pending/' + tx.txId\r\n// })\r\n// .then((d) => {\r\n//   console.log(d);\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n}\r\n\r\nconst checass=()=>{\r\n  let accounts;\r\n  let txParams;\r\n  let signedTx;\r\n  let tx;\r\n\r\n  AlgoSigner.connect()\r\n.then((d) => {\r\n  AlgoSigner.accounts({\r\n    ledger: 'TestNet'\r\n  })\r\n  .then((d) => {\r\n    accounts = d;\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n      let getchange=accounts[0].address;\r\n      AlgoSigner.sign({\r\n        from: getchange,\r\n        assetName: 'ChangeAl',\r\n        assetUnitName: \"Algos\",\r\n        assetTotal: +1000,\r\n        assetDecimals: +1,\r\n        note: undefined,\r\n        type: 'acfg',\r\n        fee: txParams['min-fee'],\r\n        firstRound: txParams['last-round'],\r\n        lastRound: txParams['last-round'] + 1000,\r\n        genesisID: txParams['genesis-id'],\r\n        genesisHash: txParams['genesis-hash'],\r\n        flatFee: true\r\n      })\r\n      .then((d) => {\r\n        signedTx = d;\r\n        AlgoSigner.send({\r\n          ledger: 'TestNet',\r\n          tx: signedTx.blob\r\n        })\r\n        .then((d) => {\r\n          tx = d;\r\n\r\n          //cut there opt\r\n\r\n          AlgoSigner.algod({\r\n            ledger: 'TestNet',\r\n            path: '/v2/transactions/pending/' + tx.txId\r\n          })\r\n          .then((d) => {\r\n            console.log(d);\r\n            \r\n          })\r\n          .catch((e) => {\r\n            console.error(e);\r\n          });\r\n\r\n          \r\n        \r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n  \r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\n\r\nconst priceset=async()=>{\r\n\r\n  setIsOpensetFirst(false)\r\n  console.log(a.addalgocreator)\r\n  console.log(a.addkeyId)\r\n  let price=tprice;\r\n\r\n  fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:price,\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n}).then(()=> {\r\n  setTprice(\"\");\r\n  //setIsOpensetFirst(false);\r\n  setIsOpen(true);\r\n });\r\n\r\n}\r\nconst priceupdate=async(a)=>{\r\n\r\n  console.log(a.addmnemonic)\r\n  console.log(a.addkeyId)\r\n\r\n  fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:\"1000\",\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n});\r\n\r\n}\r\n\r\n\r\n  return (\r\n\r\n    <div >\r\n      {/* style={{backgroundColor:\"white\"}} */}\r\n\r\n<button onClick={getalgo}>GetAsset</button>\r\n\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={chec}>alert</button>\r\n\r\n<br></br><br></br>\r\n\r\n<button onClick={checs}>alert2</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checss}>alert2</button> */}\r\n\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={checb1}>button1</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checb2}>button2</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checb3}>button3</button>\r\n<br></br><br></br> */}\r\n\r\n{/* <button onClick={checb1}>button</button> */}\r\n<br></br><br></br>\r\n\r\n<button onClick={checass}>buttonass</button>\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={checb5}>button5</button> */}\r\n\r\n{/* {getAlgoss.length === 0 ? null :(  */}\r\n  <div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    \r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\" />\r\n  \r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>price : {a.addprice}</h6>\r\n\r\n    { a.addprice === '' ? (\r\n<> \r\n{/* onClick={()=>buynow(a)} */}\r\n{/* TransferAsset(a) */}\r\n {/* <button onClick={()=>priceset(a)} >Setprice</button>  */}\r\n\r\n <button onClick={()=>{\r\n    setSelectImage(a)\r\n    setIsOpensetFirst(true)\r\n  }} style={{width:'80px',height:'43px'}} >SetPrice</button>  \r\n  \r\n    {' '}\r\n</>\r\n    ):(\r\n      <>\r\n      <button onClick={()=>{\r\n    setSelectImage(a)\r\n    setIsOpensetFirst(true)\r\n  }} style={{width:'80px',height:'43px'}} >UpdatePrice</button>  \r\n      </>\r\n\r\n    )}\r\n</center>\r\n</div>\r\n\r\n</div>\r\n )})}\r\n  </div>\r\n  <div>\r\n    \r\n    {isOpensetFirst && <Popup content={<>\r\n        <b>Notification</b>\r\n        <p>Enter prize </p>\r\n        <center>\r\n      <input\r\n        type=\"text\"\r\n        value={tprice}\r\n        placeholder=\"Enter Prize\"\r\n        onChange={e => {\r\n          setTprice(e.target.value);\r\n        }}\r\n      />\r\n      <br></br>\r\n      <br></br>\r\n\r\n        <button type=\"button\" onClick={()=>{priceset()}}>submit</button>\r\n        </center>\r\n      </>}\r\n       handleClose={togglePopupset}\r\n    />}\r\n\r\n\r\n\r\n\r\n</div>\r\n\r\n{isOpen && <Popup content={<>\r\n        <b>Notification</b>\r\n        <p>Your token prize has been updated successfully......</p>\r\n        <center>\r\n        <button type=\"button\" onClick={togglePopup}>close</button>\r\n        </center>\r\n      </>}\r\n       handleClose={togglePopup}\r\n    />}\r\n\r\n\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default AlgoTest;"]},"metadata":{},"sourceType":"module"}
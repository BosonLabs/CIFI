{"ast":null,"code":"var _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\WebApp\\\\NFTWebAPP\\\\src\\\\AlgoTest.js\",\n    _s = $RefreshSig$();\n\n/* global AlgoSigner */\nimport firebase from \"firebase\";\nimport fireDb from \"./firebase\";\nimport Popup from './Popup';\nimport React, { useState, useEffect, useCallback } from \"react\";\n\nconst AlgoTest = () => {\n  _s();\n\n  const [tprice, setTprice] = useState(\"\");\n  const [isOpenset, setIsOpenset] = useState(false);\n  const [isOpensetFirst, setIsOpensetFirst] = useState(false);\n\n  const togglePopupset = () => {\n    setIsOpenset(false);\n  }; // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n  //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n  // const tes=()=>{\n  //   alert(\"hello world\");\n  // }\n  //algo\n\n\n  const [getAlgos, setgetAlgos] = useState([]);\n  const [getAlgoss, setgetAlgoss] = useState([]); //\n  //console.log(\"firs1\",getAlgos)\n  //console.log(\"firs2\",getAlgoss)\n  //algo\n  //start buyers print in algo\n\n  const getalgo = async () => {\n    // setLoader(true)\n    // setLoading(true)\n    //window.location.reload(false)\n    let req = [];\n    let req2 = []; //imagerefexplore\n\n    firebase.database().ref(\"algorandData\").on(\"value\", data => {\n      if (data) {\n        data.forEach(d => {\n          //console.log(\"print\",d.val());\n          req.push(d.val());\n        });\n      }\n    });\n    setgetAlgos(req);\n    getAlgos.map(a => {\n      //console.log(`absalgos`, a)\n      Object.keys(a).map(b => {\n        //console.log(`bbb`, a[b].txnId)\n        req2.push({\n          //addAcc:\n          addtxid: a[b].txnId,\n          addassetid: a[b].algoid,\n          addalgoname: a[b].algoname,\n          addalgosymbol: a[b].algosymbol,\n          addalgocreator: a[b].algocreator,\n          addmnemonic: a[b].createmnemonic,\n          addprice: a[b].price,\n          addkeyId: a[b].keyId,\n          addImgs: a[b].imageurl\n        });\n      });\n    });\n    setgetAlgoss(req2); //console.log(\"cfbsalgo\",req) \n    // setLoader(false)\n    // setLoading(false)\n  }; //useEffect(()=>{getalgo()},[])\n  //getAlgoss\n\n\n  const checs = async () => {\n    let txParams = {};\n    let tnAccounts = [];\n    let signedTx;\n    let tx = {};\n\n    const algosdk = require('algosdk');\n\n    AlgoSigner.connect().then(d => {\n      console.log(\"connected\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }).then(d => {\n      tnAccounts = d;\n      console.log(\"acc\", tnAccounts[0]);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    }).then(d => {\n      txParams = d;\n      console.log(\"parms\", txParams);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.sign({\n      from: tnAccounts[0],\n      to: 'receiver address',\n      amount: 1000,\n      note: undefined,\n      type: 'pay',\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash'],\n      flatFee: true\n    }).then(d => {\n      signedTx = d;\n      console.log(\"signedTx\", d);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    }).then(d => {\n      tx = d;\n      console.log(\"tx\", tx);\n    }).catch(e => {\n      console.error(e);\n    });\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/pending/' + tx.txId\n    }).then(d => {\n      console.log(d);\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const checss = async () => {\n    // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n    //       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let client = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"log1\", client);\n    await AlgoSigner.connect(); // Create an Algod client to get suggested transaction params\n    //let client = new algosdk.Algodv2(token, server, port, headers);\n\n    let suggestedParams = await client.getTransactionParams().do(); // Use the JS SDK to build a Transaction\n\n    let sdkTx = new algosdk.Transaction({\n      to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n      from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n      amount: 1000,\n      suggestedParams\n    }); // Get the binary and base64 encode it\n\n    let binaryTx = sdkTx.toByte();\n    let base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\n    let signedTxs = await AlgoSigner.signTxn([{\n      txn: base64Tx\n    }]);\n    console.log(\"sign\", signedTxs); //let tx = {};\n\n    let tx;\n    console.log(\"working\");\n    AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTxs.blob\n    }).then(d => {\n      tx = d;\n      console.log(\"tx\", tx);\n    }).catch(e => {\n      console.error(e);\n    }); // AlgoSigner.algod({\n    //   ledger: 'TestNet',\n    //   path: '/v2/transactions/pending/' + tx.txId\n    // })\n    // .then((d) => {\n    //   console.log(d);\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n  };\n\n  const checb2 = () => {};\n\n  const checb3 = () => {}; // useEffect(()=>{checb1()},[])\n  // useEffect(()=>{checb2()},[])\n  // useEffect(()=>{checb3()},[])\n\n\n  const checb4 = () => {// to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n    // from: '',\n  };\n\n  const checb5 = () => {// AlgoSigner.send({\n    //   ledger: 'TestNet',\n    //   tx: signedTx.blob\n    // })\n    // .then((d) => {\n    //   tx = d;\n    //   console.log(\"tx\",d);\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n  };\n\n  const checass = () => {\n    let accounts;\n    let txParams;\n    let signedTx;\n    let tx;\n    AlgoSigner.connect().then(d => {\n      AlgoSigner.accounts({\n        ledger: 'TestNet'\n      }).then(d => {\n        accounts = d;\n        AlgoSigner.algod({\n          ledger: 'TestNet',\n          path: '/v2/transactions/params'\n        }).then(d => {\n          txParams = d;\n          AlgoSigner.sign({\n            from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n            assetName: 'demoass2',\n            assetUnitName: \"Algos\",\n            assetTotal: +1000,\n            assetDecimals: +1,\n            note: undefined,\n            type: 'acfg',\n            fee: txParams['min-fee'],\n            firstRound: txParams['last-round'],\n            lastRound: txParams['last-round'] + 1000,\n            genesisID: txParams['genesis-id'],\n            genesisHash: txParams['genesis-hash'],\n            flatFee: true\n          }).then(d => {\n            signedTx = d;\n            AlgoSigner.send({\n              ledger: 'TestNet',\n              tx: signedTx.blob\n            }).then(d => {\n              tx = d; // AlgoSigner.algod({\n              //   ledger: 'TestNet',\n              //   path: '/v2/transactions/pending/' + tx.txId\n              // })\n              // .then((d) => {\n              //   console.log(d);\n              // })\n              // .catch((e) => {\n              //   console.error(e);\n              // });\n\n              AlgoSigner.connect().then(d => {\n                AlgoSigner.accounts({\n                  ledger: 'TestNet'\n                }).then(d => {\n                  accounts = d;\n                  AlgoSigner.algod({\n                    ledger: 'TestNet',\n                    path: '/v2/transactions/params'\n                  }).then(d => {\n                    txParams = d;\n                    const name = 'demoass2';\n                    const limit = '1';\n                    AlgoSigner.indexer({\n                      ledger: 'TestNet',\n                      path: `/v2/assets?name=${name}&limit=${limit}`\n                    }).then(d => {\n                      let dis = JSON.stringify(d);\n                      console.log(\"dis\", dis);\n                      AlgoSigner.sign({\n                        from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\n                        to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\n                        assetIndex: +0,\n                        note: undefined,\n                        amount: 10,\n                        type: 'axfer',\n                        fee: txParams['min-fee'],\n                        firstRound: txParams['last-round'],\n                        lastRound: txParams['last-round'] + 1000,\n                        genesisID: txParams['genesis-id'],\n                        genesisHash: txParams['genesis-hash'],\n                        flatFee: true\n                      }).then(d => {\n                        signedTx = d;\n                        AlgoSigner.send({\n                          ledger: 'TestNet',\n                          tx: signedTx.blob\n                        }).then(d => {\n                          tx = d;\n                          AlgoSigner.algod({\n                            ledger: 'TestNet',\n                            path: '/v2/transactions/pending/' + tx.txId\n                          }).then(d => {\n                            console.log(d);\n                          }).catch(e => {\n                            console.error(e);\n                          });\n                        }).catch(e => {\n                          console.error(e);\n                        });\n                      }).catch(e => {\n                        console.error(e);\n                      });\n                    }).catch(e => {\n                      console.error(e);\n                      document.getElementById('assets-code').innerHTML = JSON.stringify(e);\n                    });\n                  }).catch(e => {\n                    console.error(e);\n                  });\n                }).catch(e => {\n                  console.error(e);\n                });\n              }).catch(e => {\n                console.error(e);\n              });\n            }).catch(e => {\n              console.error(e);\n            });\n          }).catch(e => {\n            console.error(e);\n          });\n        }).catch(e => {\n          console.error(e);\n        });\n      }).catch(e => {\n        console.error(e);\n      });\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const priceset = async a => {\n    setIsOpensetFirst(false);\n    console.log(a.addalgocreator);\n    console.log(a.addkeyId);\n    let price = tprice;\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: \"10\",\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    }).then(() => {\n      setTprice(\"\"); //setIsOpensetFirst(false);\n\n      setIsOpen(true);\n    });\n  };\n\n  const priceupdate = async a => {\n    console.log(a.addmnemonic);\n    console.log(a.addkeyId);\n    fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\n      createmnemonic: a.addmnemonic,\n      algocreator: a.addalgocreator,\n      algotrasnfer: \"\",\n      algoid: a.addassetid,\n      algoname: a.addalgoname,\n      algosymbol: a.addalgosymbol,\n      txnId: a.addtxid,\n      AssetIdset: a.addassetid,\n      transfer: \"\",\n      status: \"\",\n      price: \"1000\",\n      keyId: a.addkeyId,\n      imageurl: a.addImgs\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: getalgo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 1\n    }\n  }, \"GetAsset\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: checass,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 1\n    }\n  }, \"buttonass\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 1\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 10\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexWrap: 'wrap'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 3\n    }\n  }, getAlgoss.map(a => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'black',\n        height: '300px',\n        width: '300px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        border: '2px solid white',\n        borderRadius: '5px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 1\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: a.addImgs,\n      style: {\n        height: 120,\n        width: 120,\n        marginTop: '10px'\n      },\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 5\n      }\n    }, \"Name : \", a.addalgoname), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 5\n      }\n    }, \"Symbol : \", a.addalgosymbol), /*#__PURE__*/React.createElement(\"h6\", {\n      style: {\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 5\n      }\n    }, \"price : \", a.addprice), a.addprice === '' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => priceset(a),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 2\n      }\n    }, \"Setprice\"), ' ') : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => priceupdate(a),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 7\n      }\n    }, \"updateprice\")))));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 3\n    }\n  }, isOpensetFirst && /*#__PURE__*/React.createElement(Popup, {\n    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 9\n      }\n    }, \"Notification\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 580,\n        columnNumber: 9\n      }\n    }, \"Enter prize \"), /*#__PURE__*/React.createElement(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: tprice,\n      placeholder: \"Enter Prize\",\n      onChange: e => {\n        setTprice(e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: () => {\n        priceset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }\n    }, \"submit\"))),\n    handleClose: togglePopupset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578,\n      columnNumber: 24\n    }\n  })));\n};\n\n_s(AlgoTest, \"1b9NeUcxZ4JbpDFqa1Yc1TY6OtU=\");\n\n_c = AlgoTest;\nexport default AlgoTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"AlgoTest\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/src/AlgoTest.js"],"names":["firebase","fireDb","Popup","React","useState","useEffect","useCallback","AlgoTest","tprice","setTprice","isOpenset","setIsOpenset","isOpensetFirst","setIsOpensetFirst","togglePopupset","getAlgos","setgetAlgos","getAlgoss","setgetAlgoss","getalgo","req","req2","database","ref","on","data","forEach","d","push","val","map","a","Object","keys","b","addtxid","txnId","addassetid","algoid","addalgoname","algoname","addalgosymbol","algosymbol","addalgocreator","algocreator","addmnemonic","createmnemonic","addprice","price","addkeyId","keyId","addImgs","imageurl","checs","txParams","tnAccounts","signedTx","tx","algosdk","require","AlgoSigner","connect","then","console","log","catch","e","error","accounts","ledger","algod","path","sign","from","to","amount","note","undefined","type","fee","firstRound","lastRound","genesisID","genesisHash","flatFee","send","blob","txId","checss","baseServer","port","token","client","Algodv2","suggestedParams","getTransactionParams","do","sdkTx","Transaction","binaryTx","toByte","base64Tx","encoding","msgpackToBase64","signedTxs","signTxn","txn","checb2","checb3","checb4","checb5","checass","assetName","assetUnitName","assetTotal","assetDecimals","name","limit","indexer","dis","JSON","stringify","assetIndex","document","getElementById","innerHTML","priceset","child","update","algotrasnfer","AssetIdset","transfer","status","setIsOpen","priceupdate","backgroundColor","display","flexWrap","height","width","border","borderRadius","marginTop","color","target","value"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport firebase from \"firebase\";\r\nimport fireDb from \"./firebase\";\r\nimport Popup from './Popup';\r\nimport React, { useState,useEffect,useCallback } from \"react\";\r\nconst AlgoTest=()=>{\r\nconst [tprice,setTprice] = useState(\"\");\r\nconst [isOpenset, setIsOpenset] = useState(false);\r\nconst [isOpensetFirst, setIsOpensetFirst] = useState(false);\r\nconst togglePopupset = () => {\r\n  setIsOpenset(false);    \r\n}\r\n\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n\r\n  // const tes=()=>{\r\n  //   alert(\"hello world\");\r\n  // }\r\n\r\n    //algo\r\n\r\nconst[getAlgos,setgetAlgos]=useState([]);\r\nconst[getAlgoss,setgetAlgoss]=useState([]);//\r\n//console.log(\"firs1\",getAlgos)\r\n//console.log(\"firs2\",getAlgoss)\r\n\r\n//algo\r\n//start buyers print in algo\r\n\r\nconst getalgo = async() =>{\r\n    // setLoader(true)\r\n    // setLoading(true)\r\n    //window.location.reload(false)\r\n    let req = [];\r\n    let req2 = [];//imagerefexplore\r\n    firebase.database().ref(\"algorandData\").on(\"value\", (data) => {\r\n      if (data) {\r\n        data.forEach((d) => {\r\n          //console.log(\"print\",d.val());\r\n          req.push(d.val())          \r\n        });        \r\n      }\r\n    });\r\n    setgetAlgos(req)\r\n  \r\n    getAlgos.map((a)=>{\r\n      //console.log(`absalgos`, a)\r\n    \r\n      Object.keys(a).map((b)=>{\r\n      //console.log(`bbb`, a[b].txnId)\r\n        req2.push({\r\n          //addAcc:\r\n    addtxid:a[b].txnId,\r\n    addassetid:a[b].algoid,\r\n    addalgoname:a[b].algoname,\r\n    addalgosymbol:a[b].algosymbol,\r\n    addalgocreator:a[b].algocreator,\r\n    addmnemonic:a[b].createmnemonic,\r\n    addprice:a[b].price,\r\n    addkeyId:a[b].keyId,\r\n    addImgs:a[b].imageurl\r\n  })              \r\n      })\r\n    })    \r\n    setgetAlgoss(req2)    \r\n    //console.log(\"cfbsalgo\",req) \r\n    // setLoader(false)\r\n    // setLoading(false)\r\n  }\r\n  //useEffect(()=>{getalgo()},[])\r\n\r\n//getAlgoss\r\n\r\n\r\n    \r\nconst checs=async()=>{  \r\n  let txParams = {};\r\n  let tnAccounts = [];\r\n  let signedTx;\r\n  let tx = {};\r\n\r\nconst algosdk = require('algosdk');\r\nAlgoSigner.connect()\r\n.then((d) => {\r\n  console.log(\"connected\",d)\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.accounts({\r\n  ledger: 'TestNet'\r\n})\r\n.then((d) => {\r\n  tnAccounts = d;\r\n  console.log(\"acc\",tnAccounts[0])\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/params'\r\n})\r\n.then((d) => {\r\n  txParams = d;\r\n  console.log(\"parms\",txParams);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n\r\nAlgoSigner.sign({\r\n  from:tnAccounts[0],\r\n  to: 'receiver address',\r\n  amount: 1000,\r\n  note: undefined,\r\n  type: 'pay',\r\n  fee: txParams['min-fee'],\r\n  firstRound: txParams['last-round'],\r\n  lastRound: txParams['last-round'] + 1000,\r\n  genesisID: txParams['genesis-id'],\r\n  genesisHash: txParams['genesis-hash'],\r\n  flatFee: true\r\n})\r\n.then((d) => {\r\n  signedTx = d;\r\n  console.log(\"signedTx\",d);\r\n})\r\n.catch((e) => {\r\n    console.error(e);\r\n});\r\n\r\nAlgoSigner.send({\r\n  ledger: 'TestNet',\r\n  tx: signedTx.blob\r\n})\r\n.then((d) => {\r\n  tx = d;\r\n  console.log(\"tx\",tx);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\nAlgoSigner.algod({\r\n  ledger: 'TestNet',\r\n  path: '/v2/transactions/pending/' + tx.txId\r\n})\r\n.then((d) => {\r\n  console.log(d);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\nconst checss=async()=>{\r\n\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n//       from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n\r\n  const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n          const port = \"\";\r\n          //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n          const token = {\r\n          \r\n              'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n          }\r\n          let client = new algosdk.Algodv2(token, baseServer, port);  \r\n\r\n          console.log(\"log1\",client);\r\n\r\n  await AlgoSigner.connect();\r\n\r\n// Create an Algod client to get suggested transaction params\r\n//let client = new algosdk.Algodv2(token, server, port, headers);\r\nlet suggestedParams = await client.getTransactionParams().do();\r\n\r\n// Use the JS SDK to build a Transaction\r\nlet sdkTx = new algosdk.Transaction({\r\n  to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n  from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n  amount: 1000,\r\n  suggestedParams,\r\n});\r\n\r\n\r\n\r\n// Get the binary and base64 encode it\r\nlet binaryTx = sdkTx.toByte();\r\nlet base64Tx = AlgoSigner.encoding.msgpackToBase64(binaryTx);\r\n\r\nlet signedTxs = await AlgoSigner.signTxn([\r\n  {\r\n    txn: base64Tx,\r\n  },\r\n]);\r\n\r\nconsole.log(\"sign\",signedTxs);\r\n//let tx = {};\r\nlet tx;\r\nconsole.log(\"working\");\r\nAlgoSigner.send({\r\n  ledger: 'TestNet',\r\n  tx: signedTxs.blob\r\n})\r\n.then((d) => {\r\n  tx = d;\r\n  console.log(\"tx\",tx);\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n// AlgoSigner.algod({\r\n//   ledger: 'TestNet',\r\n//   path: '/v2/transactions/pending/' + tx.txId\r\n// })\r\n// .then((d) => {\r\n//   console.log(d);\r\n// })\r\n// .catch((e) => {\r\n//   console.error(e);\r\n// });\r\n}\r\n\r\n\r\nconst checb2=()=>{\r\n  \r\n}\r\n\r\nconst checb3=()=>{\r\n  \r\n  \r\n  \r\n}\r\n\r\n// useEffect(()=>{checb1()},[])\r\n// useEffect(()=>{checb2()},[])\r\n// useEffect(()=>{checb3()},[])\r\n\r\nconst checb4=()=>{\r\n  // to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n  // from: '',\r\n\r\n}\r\n\r\nconst checb5=()=>{\r\n\r\n  // AlgoSigner.send({\r\n  //   ledger: 'TestNet',\r\n  //   tx: signedTx.blob\r\n  // })\r\n  // .then((d) => {\r\n  //   tx = d;\r\n  //   console.log(\"tx\",d);\r\n  // })\r\n  // .catch((e) => {\r\n  //   console.error(e);\r\n  // });\r\n  \r\n}\r\n\r\nconst checass=()=>{\r\n  let accounts;\r\n  let txParams;\r\n  let signedTx;\r\n  let tx;\r\n\r\n  AlgoSigner.connect()\r\n.then((d) => {\r\n  AlgoSigner.accounts({\r\n    ledger: 'TestNet'\r\n  })\r\n  .then((d) => {\r\n    accounts = d;\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n      AlgoSigner.sign({\r\n        from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n        assetName: 'demoass2',\r\n        assetUnitName: \"Algos\",\r\n        assetTotal: +1000,\r\n        assetDecimals: +1,\r\n        note: undefined,\r\n        type: 'acfg',\r\n        fee: txParams['min-fee'],\r\n        firstRound: txParams['last-round'],\r\n        lastRound: txParams['last-round'] + 1000,\r\n        genesisID: txParams['genesis-id'],\r\n        genesisHash: txParams['genesis-hash'],\r\n        flatFee: true\r\n      })\r\n      .then((d) => {\r\n        signedTx = d;\r\n        AlgoSigner.send({\r\n          ledger: 'TestNet',\r\n          tx: signedTx.blob\r\n        })\r\n        .then((d) => {\r\n          tx = d;\r\n\r\n          // AlgoSigner.algod({\r\n          //   ledger: 'TestNet',\r\n          //   path: '/v2/transactions/pending/' + tx.txId\r\n          // })\r\n          // .then((d) => {\r\n          //   console.log(d);\r\n          // })\r\n          // .catch((e) => {\r\n          //   console.error(e);\r\n          // });\r\n\r\n          AlgoSigner.connect()\r\n.then((d) => {\r\n \r\n  AlgoSigner.accounts({\r\n    ledger: 'TestNet'\r\n  })\r\n  .then((d) => {\r\n    accounts = d;\r\n\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n\r\nconst name = 'demoass2';\r\nconst limit = '1';\r\n\r\nAlgoSigner.indexer({\r\n  ledger: 'TestNet',\r\n  path: `/v2/assets?name=${name}&limit=${limit}`,\r\n})\r\n.then((d) => {\r\n  let dis=JSON.stringify(d);\r\n  console.log(\"dis\",dis);\r\n\r\n\r\n  AlgoSigner.sign({\r\n    from: 'BAZXPXEGPFQ7JVOZ7BZUYK36EXLRAWC7MAG3O2SPDWMVCYDMRLCHC6JC2U',\r\n    to: 'ZSQ6JQFOR3VTJSEM45RYOTN32NH2RAGZB4RVWP2LB375F3FK7GNDAT27QA',\r\n    assetIndex: +0,\r\n    note: undefined,\r\n    amount: 10,\r\n    type: 'axfer',\r\n    fee: txParams['min-fee'],\r\n    firstRound: txParams['last-round'],\r\n    lastRound: txParams['last-round'] + 1000,\r\n    genesisID: txParams['genesis-id'],\r\n    genesisHash: txParams['genesis-hash'],\r\n    flatFee: true\r\n  })\r\n  .then((d) => {\r\n    signedTx = d;\r\n\r\n    AlgoSigner.send({\r\n      ledger: 'TestNet',\r\n      tx: signedTx.blob\r\n    })\r\n    .then((d) => {\r\n      tx = d;\r\n      AlgoSigner.algod({\r\n        ledger: 'TestNet',\r\n        path: '/v2/transactions/pending/' + tx.txId\r\n      })\r\n      .then((d) => {\r\n        console.log(d);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n\r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n  document.getElementById('assets-code').innerHTML = JSON.stringify(e);\r\n});\r\n\r\n\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n  \r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n        })\r\n        .catch((e) => {\r\n          console.error(e);\r\n        });\r\n\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n      });\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n  })\r\n  .catch((e) => {\r\n    console.error(e);\r\n  });\r\n  \r\n})\r\n.catch((e) => {\r\n  console.error(e);\r\n});\r\n\r\n}\r\n\r\n\r\nconst priceset=async(a)=>{\r\n\r\n  setIsOpensetFirst(false)\r\n  console.log(a.addalgocreator)\r\n  console.log(a.addkeyId)\r\n  let price=tprice;\r\n\r\n  fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:\"10\",\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n}).then(()=> {\r\n  setTprice(\"\");\r\n  //setIsOpensetFirst(false);\r\n  setIsOpen(true);\r\n });\r\n\r\n}\r\nconst priceupdate=async(a)=>{\r\n\r\n  console.log(a.addmnemonic)\r\n  console.log(a.addkeyId)\r\n\r\n  fireDb.database().ref(`algorandData/${a.addalgocreator}`).child(a.addkeyId).update({\r\n    createmnemonic:a.addmnemonic,\r\n    algocreator:a.addalgocreator,\r\n    algotrasnfer:\"\",\r\n    algoid:a.addassetid,\r\n    algoname:a.addalgoname,\r\n    algosymbol:a.addalgosymbol,\r\n    txnId:a.addtxid,\r\n    AssetIdset:a.addassetid,\r\n    transfer:\"\",\r\n    status:\"\",\r\n    price:\"1000\",\r\n    keyId:a.addkeyId,\r\n    imageurl:a.addImgs\r\n});\r\n\r\n}\r\n\r\n\r\n  return (\r\n\r\n    <div >\r\n      {/* style={{backgroundColor:\"white\"}} */}\r\n\r\n<button onClick={getalgo}>GetAsset</button>\r\n\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={chec}>alert</button>\r\n\r\n<br></br><br></br>\r\n\r\n<button onClick={checs}>alert2</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checss}>alert2</button> */}\r\n\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={checb1}>button1</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checb2}>button2</button>\r\n<br></br><br></br>\r\n\r\n<button onClick={checb3}>button3</button>\r\n<br></br><br></br> */}\r\n\r\n{/* <button onClick={checb1}>button</button> */}\r\n<br></br><br></br>\r\n\r\n<button onClick={checass}>buttonass</button>\r\n<br></br><br></br>\r\n\r\n{/* <button onClick={checb5}>button5</button> */}\r\n\r\n{/* {getAlgoss.length === 0 ? null :(  */}\r\n  <div style={{backgroundColor:'black',display:'flex',flexWrap:'wrap'}}>\r\n{getAlgoss.map((a)=>{  \r\n    return (\r\n      <div style={{backgroundColor:'black',height:'300px',width:'300px'}}>\r\n\r\n<div style={{border: '2px solid white',borderRadius:'5px'}}>\r\n\r\n<center>\r\n    {/* <Link to={{pathname: `/explore/${a.addKeyI}/${a.addOwnerAddress}`,\r\n//pathname: `/explore/${combine}`,\r\n                  }}\r\n                >\r\n    \r\n    </Link> */}\r\n    {/* <h5>hello{a[b].imageUrl}</h5> */}\r\n\r\n    <img   src={a.addImgs}  style={{height:120,width:120,marginTop:'10px'}} alt=\"\" />\r\n  \r\n    <h6 style={{color:'white'}}>Name : {a.addalgoname}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>Symbol : {a.addalgosymbol}</h6>\r\n    \r\n    <h6 style={{color:'white'}}>price : {a.addprice}</h6>\r\n\r\n    { a.addprice === '' ? (\r\n<> \r\n{/* onClick={()=>buynow(a)} */}\r\n{/* TransferAsset(a) */}\r\n <button onClick={()=>priceset(a)} >Setprice</button> \r\n  \r\n    {' '}\r\n</>\r\n    ):(\r\n      <>\r\n      <button onClick={()=>priceupdate(a)} >updateprice</button> \r\n      </>\r\n\r\n    )}\r\n</center>\r\n</div>\r\n\r\n</div>\r\n )})}\r\n  </div>\r\n  <div>\r\n    \r\n    {isOpensetFirst && <Popup content={<>\r\n        <b>Notification</b>\r\n        <p>Enter prize </p>\r\n        <center>\r\n      <input\r\n        type=\"text\"\r\n        value={tprice}\r\n        placeholder=\"Enter Prize\"\r\n        onChange={e => {\r\n          setTprice(e.target.value);\r\n        }}\r\n      />\r\n      <br></br>\r\n      <br></br>\r\n\r\n        <button type=\"button\" onClick={()=>{priceset()}}>submit</button>\r\n        </center>\r\n      </>}\r\n       handleClose={togglePopupset}\r\n    />}\r\n\r\n</div>\r\n\r\n  </div>\r\n\r\n  );\r\n}\r\n\r\nexport default AlgoTest;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nconst util = require('./util');\n\nconst traverse = require('traverse');\n\nconst CID = require('cids');\n\nexports = module.exports;\nexports.multicodec = 'dag-cbor';\nexports.defaultHashAlg = 'sha2-256';\n/*\r\n * resolve: receives a path and a binary blob and returns the value on path,\r\n * throw if not possible. `binaryBlob` is CBOR encoded data.\r\n */\n\nexports.resolve = (binaryBlob, path, callback) => {\n  if (typeof path === 'function') {\n    callback = path;\n    path = undefined;\n  }\n\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err);\n    } // root\n\n\n    if (!path || path === '/') {\n      return callback(null, {\n        value: node,\n        remainderPath: ''\n      });\n    } // within scope\n\n\n    const parts = path.split('/');\n    const val = traverse(node).get(parts);\n\n    if (val !== undefined) {\n      return callback(null, {\n        value: val,\n        remainderPath: ''\n      });\n    } // out of scope\n\n\n    let value;\n    const len = parts.length;\n\n    for (let i = 0; i < len; i++) {\n      const partialPath = parts.shift();\n\n      if (Array.isArray(node) && !Buffer.isBuffer(node)) {\n        value = node[Number(partialPath)];\n      }\n\n      if (node[partialPath]) {\n        value = node[partialPath];\n      } else {\n        // can't traverse more\n        if (!value) {\n          return callback(new Error('path not available at root'));\n        } else {\n          parts.unshift(partialPath);\n          return callback(null, {\n            value: value,\n            remainderPath: parts.join('/')\n          });\n        }\n      }\n\n      node = value;\n    }\n  });\n};\n\nfunction flattenObject(obj, delimiter) {\n  delimiter = delimiter || '/';\n\n  if (Object.keys(obj).length === 0) {\n    return [];\n  }\n\n  return traverse(obj).reduce(function (acc, x) {\n    if (CID.isCID(x)) {\n      this.update(undefined);\n    }\n\n    const path = this.path.join(delimiter);\n\n    if (path !== '') {\n      acc.push({\n        path: path,\n        value: x\n      });\n    }\n\n    return acc;\n  }, []);\n}\n/*\r\n * tree: returns a flattened array with paths: values of the project. options\r\n * are option (i.e. nestness)\r\n */\n\n\nexports.tree = (binaryBlob, options, callback) => {\n  if (typeof options === 'function') {\n    callback = options;\n    options = undefined;\n  }\n\n  options = options || {};\n  util.deserialize(binaryBlob, (err, node) => {\n    if (err) {\n      return callback(err);\n    }\n\n    const flat = flattenObject(node);\n    const paths = flat.map(el => el.path);\n    callback(null, paths);\n  });\n};\n\nexports.isLink = (binaryBlob, path, callback) => {\n  exports.resolve(binaryBlob, path, (err, result) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (result.remainderPath.length > 0) {\n      return callback(new Error('path out of scope'));\n    }\n\n    if (CID.isCID(result.value)) {\n      callback(null, result.value);\n    } else {\n      callback(null, false);\n    }\n  });\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/ipld-dag-cbor/src/resolver.js"],"names":["util","require","traverse","CID","exports","module","multicodec","defaultHashAlg","resolve","binaryBlob","path","callback","undefined","deserialize","err","node","value","remainderPath","parts","split","val","get","len","length","i","partialPath","shift","Array","isArray","Buffer","isBuffer","Number","Error","unshift","join","flattenObject","obj","delimiter","Object","keys","reduce","acc","x","isCID","update","push","tree","options","flat","paths","map","el","isLink","result"],"mappings":"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","sourcesContent":["'use strict'\r\n\r\nconst util = require('./util')\r\nconst traverse = require('traverse')\r\nconst CID = require('cids')\r\n\r\nexports = module.exports\r\n\r\nexports.multicodec = 'dag-cbor'\r\nexports.defaultHashAlg = 'sha2-256'\r\n\r\n/*\r\n * resolve: receives a path and a binary blob and returns the value on path,\r\n * throw if not possible. `binaryBlob` is CBOR encoded data.\r\n */\r\nexports.resolve = (binaryBlob, path, callback) => {\r\n  if (typeof path === 'function') {\r\n    callback = path\r\n    path = undefined\r\n  }\r\n\r\n  util.deserialize(binaryBlob, (err, node) => {\r\n    if (err) {\r\n      return callback(err)\r\n    }\r\n\r\n    // root\r\n\r\n    if (!path || path === '/') {\r\n      return callback(null, {\r\n        value: node,\r\n        remainderPath: ''\r\n      })\r\n    }\r\n\r\n    // within scope\r\n\r\n    const parts = path.split('/')\r\n    const val = traverse(node).get(parts)\r\n\r\n    if (val !== undefined) {\r\n      return callback(null, {\r\n        value: val,\r\n        remainderPath: ''\r\n      })\r\n    }\r\n\r\n    // out of scope\r\n    let value\r\n    const len = parts.length\r\n\r\n    for (let i = 0; i < len; i++) {\r\n      const partialPath = parts.shift()\r\n\r\n      if (Array.isArray(node) && !Buffer.isBuffer(node)) {\r\n        value = node[Number(partialPath)]\r\n      } if (node[partialPath]) {\r\n        value = node[partialPath]\r\n      } else {\r\n        // can't traverse more\r\n        if (!value) {\r\n          return callback(new Error('path not available at root'))\r\n        } else {\r\n          parts.unshift(partialPath)\r\n          return callback(null, {\r\n            value: value,\r\n            remainderPath: parts.join('/')\r\n          })\r\n        }\r\n      }\r\n      node = value\r\n    }\r\n  })\r\n}\r\n\r\nfunction flattenObject (obj, delimiter) {\r\n  delimiter = delimiter || '/'\r\n\r\n  if (Object.keys(obj).length === 0) {\r\n    return []\r\n  }\r\n\r\n  return traverse(obj).reduce(function (acc, x) {\r\n    if (CID.isCID(x)) {\r\n      this.update(undefined)\r\n    }\r\n    const path = this.path.join(delimiter)\r\n\r\n    if (path !== '') {\r\n      acc.push({ path: path, value: x })\r\n    }\r\n    return acc\r\n  }, [])\r\n}\r\n\r\n/*\r\n * tree: returns a flattened array with paths: values of the project. options\r\n * are option (i.e. nestness)\r\n */\r\nexports.tree = (binaryBlob, options, callback) => {\r\n  if (typeof options === 'function') {\r\n    callback = options\r\n    options = undefined\r\n  }\r\n\r\n  options = options || {}\r\n\r\n  util.deserialize(binaryBlob, (err, node) => {\r\n    if (err) {\r\n      return callback(err)\r\n    }\r\n    const flat = flattenObject(node)\r\n    const paths = flat.map((el) => el.path)\r\n\r\n    callback(null, paths)\r\n  })\r\n}\r\n\r\nexports.isLink = (binaryBlob, path, callback) => {\r\n  exports.resolve(binaryBlob, path, (err, result) => {\r\n    if (err) {\r\n      return callback(err)\r\n    }\r\n\r\n    if (result.remainderPath.length > 0) {\r\n      return callback(new Error('path out of scope'))\r\n    }\r\n\r\n    if (CID.isCID(result.value)) {\r\n      callback(null, result.value)\r\n    } else {\r\n      callback(null, false)\r\n    }\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
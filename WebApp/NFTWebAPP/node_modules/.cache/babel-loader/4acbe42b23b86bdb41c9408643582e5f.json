{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n/**\n * Read directory recursively\n *\n * @param {String} directory path\n * @param {Function} callback\n * @return {Arrays} dirs & files\n * @api public\n */\n\n\nexports.readdirr = function (dpath, cb) {\n  var dirs = [],\n      files = [];\n  dirs.push(dpath);\n\n  (function loop(index) {\n    if (index == dirs.length) return cb(null, dirs, files);\n    fs.readdir(dirs[index], function (err, _files) {\n      if (err) return cb(err);\n      getstat(dirs[index], _files, function (err) {\n        if (err) return cb(err);\n        loop(++index);\n      });\n    });\n  })(0);\n  /**\n   * Get stat\n   *\n   * @param {String} directory path\n   * @param {Array} files\n   * @param {Function} callback\n   * @api private\n   */\n\n\n  function getstat(dpath, _files, cb) {\n    ;\n\n    (function loop(index) {\n      if (index == _files.length) return cb();\n      var fpath = path.join(dpath, _files[index]);\n      fs.stat(fpath, function (err, stats) {\n        if (err) return cb(err);\n\n        if (stats.isDirectory()) {\n          dirs.push(fpath);\n        } else {\n          files.push(fpath);\n        }\n\n        loop(++index);\n      });\n    })(0);\n  }\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/WebApp/NFTWebAPP/node_modules/recursive-fs/lib/readdirr.js"],"names":["fs","require","path","exports","readdirr","dpath","cb","dirs","files","push","loop","index","length","readdir","err","_files","getstat","fpath","join","stat","stats","isDirectory"],"mappings":"AACA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAE,OAAO,CAACC,QAAR,GAAmB,UAAUC,KAAV,EAAiBC,EAAjB,EAAqB;AACtC,MAAIC,IAAI,GAAG,EAAX;AAAA,MAAeC,KAAK,GAAG,EAAvB;AACAD,EAAAA,IAAI,CAACE,IAAL,CAAUJ,KAAV;;AACE,YAASK,IAAT,CAAeC,KAAf,EAAsB;AACtB,QAAIA,KAAK,IAAIJ,IAAI,CAACK,MAAlB,EAA0B,OAAON,EAAE,CAAC,IAAD,EAAOC,IAAP,EAAaC,KAAb,CAAT;AAC1BR,IAAAA,EAAE,CAACa,OAAH,CAAWN,IAAI,CAACI,KAAD,CAAf,EAAwB,UAAUG,GAAV,EAAeC,MAAf,EAAuB;AAC7C,UAAID,GAAJ,EAAS,OAAOR,EAAE,CAACQ,GAAD,CAAT;AACTE,MAAAA,OAAO,CAACT,IAAI,CAACI,KAAD,CAAL,EAAcI,MAAd,EAAsB,UAAUD,GAAV,EAAe;AAC1C,YAAIA,GAAJ,EAAS,OAAOR,EAAE,CAACQ,GAAD,CAAT;AACTJ,QAAAA,IAAI,CAAC,EAAEC,KAAH,CAAJ;AACD,OAHM,CAAP;AAID,KAND;AAOD,GATC,EASA,CATA,CAAD;AAWD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASK,OAAT,CAAkBX,KAAlB,EAAyBU,MAAzB,EAAiCT,EAAjC,EAAqC;AACnC;;AAAE,cAASI,IAAT,CAAeC,KAAf,EAAsB;AACtB,UAAIA,KAAK,IAAII,MAAM,CAACH,MAApB,EAA4B,OAAON,EAAE,EAAT;AAC5B,UAAIW,KAAK,GAAGf,IAAI,CAACgB,IAAL,CAAUb,KAAV,EAAiBU,MAAM,CAACJ,KAAD,CAAvB,CAAZ;AACAX,MAAAA,EAAE,CAACmB,IAAH,CAAQF,KAAR,EAAe,UAAUH,GAAV,EAAeM,KAAf,EAAsB;AACnC,YAAIN,GAAJ,EAAS,OAAOR,EAAE,CAACQ,GAAD,CAAT;;AACT,YAAIM,KAAK,CAACC,WAAN,EAAJ,EAAyB;AACvBd,UAAAA,IAAI,CAACE,IAAL,CAAUQ,KAAV;AACD,SAFD,MAEO;AACLT,UAAAA,KAAK,CAACC,IAAN,CAAWQ,KAAX;AACD;;AACDP,QAAAA,IAAI,CAAC,EAAEC,KAAH,CAAJ;AACD,OARD;AASD,KAZC,EAYA,CAZA,CAAD;AAaF;AACF,CArCD","sourcesContent":["\nvar fs = require('fs')\nvar path = require('path')\n\n\n/**\n * Read directory recursively\n *\n * @param {String} directory path\n * @param {Function} callback\n * @return {Arrays} dirs & files\n * @api public\n */\n\nexports.readdirr = function (dpath, cb) {\n  var dirs = [], files = []\n  dirs.push(dpath)\n  ;(function loop (index) {\n    if (index == dirs.length) return cb(null, dirs, files)\n    fs.readdir(dirs[index], function (err, _files) {\n      if (err) return cb(err)\n      getstat(dirs[index], _files, function (err) {\n        if (err) return cb(err)\n        loop(++index)\n      })\n    })\n  }(0))\n\n  /**\n   * Get stat\n   *\n   * @param {String} directory path\n   * @param {Array} files\n   * @param {Function} callback\n   * @api private\n   */\n  function getstat (dpath, _files, cb) {\n    ;(function loop (index) {\n      if (index == _files.length) return cb()\n      var fpath = path.join(dpath, _files[index])\n      fs.stat(fpath, function (err, stats) {\n        if (err) return cb(err)\n        if (stats.isDirectory()) {\n          dirs.push(fpath)\n        } else {\n          files.push(fpath)\n        }\n        loop(++index)\n      })\n    }(0))\n  }\n}\n"]},"metadata":{},"sourceType":"script"}
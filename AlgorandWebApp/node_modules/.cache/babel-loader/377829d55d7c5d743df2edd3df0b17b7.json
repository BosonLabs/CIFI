{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Compress from \"react-image-file-resizer\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst con = async () => {//   await AlgoSigner.connect();\n  // let client = new algosdk.Algodv2(...);\n  // let testNetParams = await client.getTransactionParams().do();\n  // testNetParams.flatFee = true;\n  // let tx1 = new algosdk.Transaction({\n  //   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // let tx2 = new algosdk.Transaction({\n  //   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // algosdk.assignGroupID([tx1, tx2]);\n  // let sdkTxs = [tx1, tx2];\n  // let base64Txs = sdkTxs.map((tx) => {\n  //   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\n  // });\n  // let walletTxs = base64Txs.map((b64) => {\n  //   return { tx: b64 };\n  // });\n  // let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\n  // let sendResult = await client\n  //   .sendRawTransaction(\n  //     signedTxs.map((signedTx) =>\n  //       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\n  //     )\n  //   )\n  //   .do();\n};\n\nconst App = () => {\n  _s4();\n\n  const [tid, setId] = useState(\"\");\n  const [tname, setName] = useState(\"\");\n  const [tAddress, setAddess] = useState(\"\");\n  const [currentSymbol, setCurrentSymbol] = useState('ETH');\n  const [buffer, setBuffer] = useState(\"\");\n  let [Img, setImg] = useState(\"\");\n\n  const CreateAsset = () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port); // UPDATE THESE VALUES\n    // Sandbox\n    //const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    //const server = \"http://localhost\";\n    //const port = 4001;\n\n    var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\"; //var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    console.log(recoveredAccount1.addr);\n    console.log(recoveredAccount2.addr);\n    console.log(recoveredAccount3.addr); // Function used to print created asset for account and assetid\n\n    const printCreatedAsset = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n        if (scrutinizedAsset['index'] == assetid) {\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n          console.log(\"parms = \" + myparms);\n          break;\n        }\n      }\n    }; // Function used to wait for a tx confirmation\n\n\n    const waitForConfirmations = async function (algodclient, txId) {\n      let response = await algodclient.status().do();\n      let lastround = response[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n      }\n    }; // Function used to print asset holding for account and assetid\n\n\n    const printAssetHoldings = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['assets'][idx];\n\n        if (scrutinizedAsset['asset-id'] === assetid) {\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n          console.log(\"assetholdinginfo = \" + myassetholding);\n          break;\n        }\n      }\n    };\n  };\n\n  const changeFruit = newFruit => {\n    setCurrentSymbol(newFruit);\n  };\n\n  const captureFile = event => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    Compress.imageFileResizer(file, 300, 300, 'JPEG', 10, 0, uri => {\n      console.log(\"iuri\", uri);\n      setImg(uri);\n    }, 'base64');\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => convertToBuffer(reader);\n  };\n\n  const convertToBuffer = async reader => {\n    //file is converted to a buffer for upload to IPFS\n    const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n    setBuffer(buffer);\n  };\n\n  const waitForConfirmation = async function (algodclient, txId) {\n    let response = await algodclient.status().do();\n    let lastround = response[\"last-round\"];\n\n    while (true) {\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n        break;\n      }\n\n      lastround++;\n      await algodclient.statusAfterBlock(lastround).do();\n    }\n  }; // Function used to print created asset for account and assetid\n\n\n  const printCreatedAsset = async function (algodclient, account, assetid) {\n    let accountInfo = await algodclient.accountInformation(account).do();\n\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n      if (scrutinizedAsset['index'] === assetid) {\n        console.log(\"AssetID = \", scrutinizedAsset['index']);\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmsprint\", myparms);\n        break;\n      }\n    }\n  }; // Function used to print asset holding for account and assetid\n\n\n  const printAssetHolding = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n    let accountInfo = await algodclient.accountInformation(account).do();\n\n    for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['assets'][idx];\n\n      if (scrutinizedAsset['asset-id'] === assetid) {\n        let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\n        console.log(\"assetholdinginfo = \" + myassetholding);\n        break;\n      }\n    }\n  };\n\n  const RSend = async () => {\n    let AssId = '';\n\n    const algosdk = require('algosdk');\n\n    var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\"; //var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    console.log(recoveredAccount3.addr);\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    let sender = recoveredAccount3.addr;\n    let recipient = sender; // We set revocationTarget to undefined as \n    // This is not a clawback operation\n\n    let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n    // we are not closing out an asset\n\n    let closeRemainderTo = undefined; // We are sending 0 assets\n\n    let amount = 0;\n    let note = undefined;\n    let assetIDs = localStorage.getItem(\"myasset\");\n    alert(\"lasset\" + assetIDs);\n    let assetID = 'YOSMZ2WZI6OQY7ZCGQKFZUXYMWBF4LUVCNTXLESMGZO74RLP72JQ'; // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n    let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n    let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n    let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    sender = recoveredAccount1.addr;\n    recipient = recoveredAccount3.addr;\n    revocationTarget = undefined;\n    closeRemainderTo = undefined; //Amount of the asset to transfer\n\n    amount = 0; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n    let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n    rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n    let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    let from = recoveredAccount2.addr;\n    let freezeTarget = recoveredAccount3.addr;\n    let freezeState = true; // The freeze transaction needs to be signed by the freeze account\n\n    let ftxn = algosdk.makeAssetFreezeTxnWithSuggestedParams(from, note, assetID, freezeTarget, freezeState, params); // Must be signed by the freeze account   \n\n    rawSignedTxn = ftxn.signTxn(recoveredAccount2.sk);\n    let ftx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + ftx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, ftx.txId); // You should now see the asset is frozen listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    sender = recoveredAccount2.addr;\n    recipient = recoveredAccount1.addr;\n    revocationTarget = recoveredAccount3.addr;\n    closeRemainderTo = undefined;\n    amount = 0; // signing and sending \"txn\" will send \"amount\" assets from \"revocationTarget\" to \"recipient\",\n    // if and only if sender == clawback manager for this asset\n\n    let rtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account that is the clawback address    \n\n    rawSignedTxn = rtxn.signTxn(recoveredAccount2.sk);\n    let rtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + rtx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, rtx.txId); // You should now see 0 assets listed in the account information\n    // for the third account\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n  };\n\n  const Rasset = async () => {\n    let AssId = '';\n\n    const algosdk = require('algosdk'); //gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history\n\n\n    var account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\"; //var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\n\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\n    var recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    console.log(recoveredAccount1.addr);\n    console.log(recoveredAccount2.addr);\n    console.log(recoveredAccount3.addr); //var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    //var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    //let accc=recoveredAccount1.addr;\n    //console.log(\"cacc\",accc)\n\n    let addr = recoveredAccount1.addr;\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n    //let addr = recoveredAccount1.addr;\n    //'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    //recoveredAccount1.addr;\n    // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 1; // total number of this asset available for circulation   \n\n    let totalIssuance = 1; // Used to display asset units to user    \n\n    let unitName = currentSymbol; //\"ASA\";\n    // Friendly name of the asset    \n\n    let assetName = tname; //\"demoRam\";\n    // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; //Img;\n    //\"http://someurl\";\n    // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = recoveredAccount2.addr; //'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\n    //recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n\n    let reserve = recoveredAccount2.addr; //'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\n    //recoveredAccount2.addr;\n    // Specified address can freeze or unfreeze user asset holdings \n\n    let freeze = recoveredAccount2.addr; //'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\n    //recoveredAccount2.addr;\n    // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n\n    let clawback = recoveredAccount2.addr; //'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\n    //recoveredAccount2.addr;\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true; // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n    console.log(\"txnn\", txn);\n    let rawSignedTxn = txn.signTxn(recoveredAccount1.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    let getre = await waitForConfirmation(algodclient, tx.txId);\n    console.log(\"result\", getre); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n    console.log(\"Cassptx\", ptx);\n    console.log(\"Cass\", assetID);\n    let result2 = await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    let result3 = await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n    console.log(\"resul\", result2);\n    console.log(\"resuls\", result3);\n    let accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"leng\", accountInfos['created-assets'].length);\n\n    for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\n      console.log(\"scr\", scrutinizedAsset);\n\n      if (scrutinizedAsset['index'] === assetID) {\n        console.log(\"AssetID\", scrutinizedAsset['index']);\n        AssId = scrutinizedAsset['index'];\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmss\", myparms);\n        break;\n      }\n    } //console.log(\"ab\",ab);\n\n\n    let accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true; // Asset configuration specific parameters\n    // all other values are the same so we leave \n    // Them set.\n    // specified address can change reserve, freeze, clawback, and manager\n\n    manager = recoveredAccount1.addr; // Note that the change has to come from the existing manager\n\n    let ctxn = algosdk.makeAssetConfigTxnWithSuggestedParams(recoveredAccount2.addr, note, assetID, manager, reserve, freeze, clawback, params); // This transaction must be signed by the current manager\n\n    rawSignedTxn = ctxn.signTxn(recoveredAccount2.sk);\n    let ctx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + ctx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, ctx.txId); // Get the asset information for the newly changed asset\n    // use indexer or utiltiy function for Account info\n    // The manager should now be the same as the creator\n\n    await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    localStorage.setItem('myasset', AssId); //cmd line below\n\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    let sender = recoveredAccount3.addr;\n    let recipient = sender; // We set revocationTarget to undefined as \n    // This is not a clawback operation\n\n    let revocationTarget = undefined; // CloseReaminerTo is set to undefined as\n    // we are not closing out an asset\n\n    let closeRemainderTo = undefined; // We are sending 0 assets\n\n    let amount = 0; // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n\n    let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account wishing to opt in to the asset    \n\n    rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\n    let opttx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + opttx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, opttx.txId); //You should now see the new asset listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    sender = recoveredAccount1.addr;\n    recipient = recoveredAccount3.addr;\n    revocationTarget = undefined;\n    closeRemainderTo = undefined; //Amount of the asset to transfer\n\n    amount = 0; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n    let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n    rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n    let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, xtx.txId); // You should now see the 10 assets listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 0;\n    params.flatFee = true;\n    let from = recoveredAccount2.addr;\n    let freezeTarget = recoveredAccount3.addr;\n    let freezeState = true; // The freeze transaction needs to be signed by the freeze account\n\n    let ftxn = algosdk.makeAssetFreezeTxnWithSuggestedParams(from, note, assetID, freezeTarget, freezeState, params); // Must be signed by the freeze account   \n\n    rawSignedTxn = ftxn.signTxn(recoveredAccount2.sk);\n    let ftx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + ftx.txId); // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, ftx.txId); // You should now see the asset is frozen listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID); //above transfer working\n    //     params = await algodclient.getTransactionParams().do();\n    //     //comment out the next two lines to use suggested fee\n    //     params.fee = 0;\n    //     params.flatFee = true;   \n    //     sender = recoveredAccount2.addr;\n    //     recipient = recoveredAccount1.addr;\n    //     revocationTarget = recoveredAccount3.addr;\n    //     closeRemainderTo = undefined;\n    //     amount = 1000;\n    //     // signing and sending \"txn\" will send \"amount\" assets from \"revocationTarget\" to \"recipient\",\n    //     // if and only if sender == clawback manager for this asset\n    //     let rtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\n    //        amount, note, assetID, params);\n    //     // Must be signed by the account that is the clawback address    \n    //     rawSignedTxn = rtxn.signTxn(recoveredAccount2.sk)\n    //     let rtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    //     console.log(\"Transaction : \" + rtx.txId);\n    //     // wait for transaction to be confirmed\n    //     await waitForConfirmation(algodclient, rtx.txId);\n    //     // You should now see 0 assets listed in the account information\n    //     // for the third account\n    //     console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    //     await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\n    //cmd line above\n    // params = await algodclient.getTransactionParams().do();\n    // //comment out the next two lines to use suggested fee\n    // params.fee = 1000;\n    // params.flatFee = true;\n    // // The address for the from field must be the manager account\n    // // Which is currently the creator addr1\n    // addr = recoveredAccount1.addr;\n    // note = undefined;\n    // // if all assets are held by the asset creator,\n    // // the asset creator can sign and issue \"txn\" to remove the asset from the ledger. \n    // let dtxn = algosdk.makeAssetDestroyTxnWithSuggestedParams(addr, note, assetID, params);\n    // // The transaction must be signed by the manager which \n    // // is currently set to account1\n    // rawSignedTxn = dtxn.signTxn(recoveredAccount1.sk)\n    // let dtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    // console.log(\"Transaction : \" + dtx.txId);\n    // // wait for transaction to be confirmed\n    // await waitForConfirmation(algodclient, dtx.txId);\n    // // The account3 and account1 should no longer contain the asset as it has been destroyed\n    // console.log(\"Asset ID: \" + assetID);\n    // console.log(\"Account 1 = \" + recoveredAccount1.addr);\n    // await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    // await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\n    // console.log(\"Account 3 = \" + recoveredAccount3.addr);\n    // await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);  \n\n    alert(\"your Asset id \" + AssId);\n    window.location.reload(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 842,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 852,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 840,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            backgroundColor: 'white',\n            height: '600px',\n            width: '500px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 872,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"CREATE NFT-TOKEN\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 873,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 875,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"name\",\n            children: \"NFT  Name    \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 879,\n            columnNumber: 1\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"nameid\",\n            type: \"text\",\n            name: \"tname\",\n            required: true,\n            onChange: event => setName(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 881,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 889,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"symbol\",\n            children: \"NFT  Symbol    \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 892,\n            columnNumber: 3\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              backgroundColor: 'white',\n              height: '20px',\n              width: '160px'\n            },\n            onChange: event => changeFruit(event.target.value),\n            value: currentSymbol,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ETH\",\n              children: \"ETH     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 900,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"BNB\",\n              children: \"BNB     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 901,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Algos\",\n              children: \"Algos\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 902,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 896,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 904,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"id\",\n            children: [\"NFT Token-Id   \", ' ', \"   \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 908,\n            columnNumber: 1\n          }, this), \" \\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"idid\",\n            type: \"text\",\n            name: \"tid\",\n            required: true,\n            onChange: event => setId(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 910,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 919,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 920,\n            columnNumber: 1\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"images\",\n            children: \"Choose Your Image     \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 922,\n            columnNumber: 61\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              backgroundColor: 'white',\n              height: '22px',\n              width: '230px'\n            },\n            name: \"tfile\",\n            id: \"fileid\",\n            type: \"file\",\n            onChange: captureFile,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 924,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 931,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 932,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 933,\n            columnNumber: 6\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: Rasset,\n            children: \"Create Asset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 942,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 948,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 949,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 950,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"name\",\n            children: \"Enter Address   \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 952,\n            columnNumber: 15\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"tsendAdd\",\n            required: true,\n            onChange: event => setAddess(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 954,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: RSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 962,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 867,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 865,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 863,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s4(App, \"ixCxVjkmXPhl80T79w0KYBhL5ng=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","Compress","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","con","App","tid","setId","tname","setName","tAddress","setAddess","currentSymbol","setCurrentSymbol","buffer","setBuffer","Img","setImg","CreateAsset","algosdk","require","baseServer","port","token","algodclient","Algodv2","account1_mnemonic","account2_mnemonic","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","recoveredAccount2","recoveredAccount3","addr","printCreatedAsset","account","assetid","accountInfo","accountInformation","do","idx","length","scrutinizedAsset","myparms","undefined","waitForConfirmations","txId","response","status","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printAssetHoldings","myassetholding","changeFruit","newFruit","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","imageFileResizer","uri","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","waitForConfirmation","printAssetHolding","RSend","AssId","params","getTransactionParams","fee","flatFee","sender","recipient","revocationTarget","closeRemainderTo","amount","note","assetIDs","localStorage","getItem","alert","assetID","opttxn","makeAssetTransferTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","opttx","sendRawTransaction","xtxn","xtx","freezeTarget","freezeState","ftxn","makeAssetFreezeTxnWithSuggestedParams","ftx","rtxn","rtx","Rasset","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","txn","makeAssetCreateTxnWithSuggestedParams","tx","getre","ptx","result2","result3","accountInfos","ctxn","makeAssetConfigTxnWithSuggestedParams","ctx","setItem","location","reload","backgroundColor","height","width","value"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Compress from \"react-image-file-resizer\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\nconst con=async()=>{\r\n\r\n\r\n//   await AlgoSigner.connect();\r\n// let client = new algosdk.Algodv2(...);\r\n\r\n// let testNetParams = await client.getTransactionParams().do();\r\n// testNetParams.flatFee = true;\r\n\r\n// let tx1 = new algosdk.Transaction({\r\n//   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// let tx2 = new algosdk.Transaction({\r\n//   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// algosdk.assignGroupID([tx1, tx2]);\r\n\r\n// let sdkTxs = [tx1, tx2];\r\n// let base64Txs = sdkTxs.map((tx) => {\r\n//   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\r\n// });\r\n// let walletTxs = base64Txs.map((b64) => {\r\n//   return { tx: b64 };\r\n// });\r\n\r\n// let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\r\n\r\n// let sendResult = await client\r\n//   .sendRawTransaction(\r\n//     signedTxs.map((signedTx) =>\r\n//       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\r\n//     )\r\n//   )\r\n//   .do();\r\n  \r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [tid,setId] = useState(\"\");\r\n\r\n  const [tname,setName] = useState(\"\");\r\n\r\n  const [tAddress,setAddess] = useState(\"\");\r\n  \r\n\r\n  const [currentSymbol, setCurrentSymbol] = useState('ETH')\r\n\r\n  const [buffer,setBuffer] = useState(\"\");\r\n\r\n  let [Img,setImg] = useState(\"\");\r\n\r\n\r\n\r\n\r\nconst CreateAsset=()=>{\r\n\r\nconst algosdk = require('algosdk');\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\nconst port = \"\";\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n// UPDATE THESE VALUES\r\n// Sandbox\r\n//const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n//const server = \"http://localhost\";\r\n//const port = 4001;\r\n\r\nvar account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n//var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\nvar recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\n\r\nconsole.log(recoveredAccount1.addr);\r\nconsole.log(recoveredAccount2.addr);\r\nconsole.log(recoveredAccount3.addr);\r\n\r\n\r\n\r\n// Function used to print created asset for account and assetid\r\nconst printCreatedAsset = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] == assetid) {\r\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parms = \" + myparms);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\n\r\n  // Function used to wait for a tx confirmation\r\nconst waitForConfirmations = async function (algodclient, txId) {\r\n  let response = await algodclient.status().do();\r\n  let lastround = response[\"last-round\"];\r\n  while (true) {\r\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n          //Got the completed Transaction\r\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n          break;\r\n      }\r\n      lastround++;\r\n      await algodclient.statusAfterBlock(lastround).do();\r\n  }\r\n};\r\n\r\n\r\n// Function used to print asset holding for account and assetid\r\nconst printAssetHoldings = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['assets'][idx];\r\n      if (scrutinizedAsset['asset-id'] === assetid) {\r\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n          console.log(\"assetholdinginfo = \" + myassetholding);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\n\r\n}\r\n\r\n  \r\n  const changeFruit = (newFruit) => {\r\n    setCurrentSymbol(newFruit)\r\n  }\r\n\r\n\r\n  const captureFile =(event) => {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    let reader = new window.FileReader()\r\n\r\n    Compress.imageFileResizer(file, 300, 300, 'JPEG', 10, 0,\r\n    uri => {\r\n      console.log(\"iuri\",uri)\r\nsetImg(uri)\r\n    },\r\n    'base64'\r\n    );\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => convertToBuffer(reader);    \r\n  };\r\nconst convertToBuffer = async(reader) => {\r\n  //file is converted to a buffer for upload to IPFS\r\n    const buffer = await Buffer.from(reader.result);\r\n  //set this buffer -using es6 syntax\r\n    setBuffer(buffer);\r\n};\r\n\r\n  \r\n\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n  let response = await algodclient.status().do();\r\n  let lastround = response[\"last-round\"];\r\n  while (true) {\r\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n          //Got the completed Transaction\r\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n          break;\r\n      }\r\n      lastround++;\r\n      await algodclient.statusAfterBlock(lastround).do();\r\n  }\r\n};\r\n\r\n\r\n// Function used to print created asset for account and assetid\r\nconst printCreatedAsset = async function (algodclient, account, assetid) {\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] === assetid) {\r\n          console.log(\"AssetID = \",scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmsprint\",myparms);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\n\r\n// Function used to print asset holding for account and assetid\r\nconst printAssetHolding = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (let idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['assets'][idx];\r\n      if (scrutinizedAsset['asset-id'] === assetid) {\r\n          let myassetholding = JSON.stringify(scrutinizedAsset, undefined, 2);\r\n          console.log(\"assetholdinginfo = \" + myassetholding);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\n\r\nconst RSend=async()=>{\r\n\r\n\r\n  \r\n  let AssId='';\r\n\r\nconst algosdk = require('algosdk');\r\nvar account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n//var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\nvar recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\nconsole.log(recoveredAccount3.addr);\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\n\r\n    let params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n\r\n    let sender = recoveredAccount3.addr;\r\n    let recipient = sender;\r\n    // We set revocationTarget to undefined as \r\n    // This is not a clawback operation\r\n    let revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as\r\n    // we are not closing out an asset\r\n    let closeRemainderTo = undefined;\r\n    // We are sending 0 assets\r\n    let amount = 0;\r\n    let note=undefined\r\n    let assetIDs=localStorage.getItem(\"myasset\")\r\n\r\n    alert(\"lasset\"+assetIDs);\r\n\r\n    let assetID='YOSMZ2WZI6OQY7ZCGQKFZUXYMWBF4LUVCNTXLESMGZO74RLP72JQ';\r\n\r\n     // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n     let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n      amount, note, assetID, params);\r\n\r\n // Must be signed by the account wishing to opt in to the asset    \r\n let rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n console.log(\"Transaction : \" + opttx.txId);\r\n // wait for transaction to be confirmed\r\n await waitForConfirmation(algodclient, opttx.txId);\r\n\r\n //You should now see the new asset listed in the account information\r\n console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n params = await algodclient.getTransactionParams().do();\r\n //comment out the next two lines to use suggested fee\r\n params.fee = 0;\r\n params.flatFee = true;\r\n\r\n sender = recoveredAccount1.addr;\r\n recipient = recoveredAccount3.addr;\r\n revocationTarget = undefined;\r\n closeRemainderTo = undefined;\r\n //Amount of the asset to transfer\r\n amount = 0;\r\n\r\n // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n      amount,  note, assetID, params);\r\n // Must be signed by the account sending the asset  \r\n rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n console.log(\"Transaction : \" + xtx.txId);\r\n // wait for transaction to be confirmed\r\n await waitForConfirmation(algodclient, xtx.txId);\r\n\r\n // You should now see the 10 assets listed in the account information\r\n console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n\r\n    let from = recoveredAccount2.addr;\r\n    let freezeTarget = recoveredAccount3.addr;\r\n    let freezeState = true;\r\n\r\n    // The freeze transaction needs to be signed by the freeze account\r\n    let ftxn = algosdk.makeAssetFreezeTxnWithSuggestedParams(from, note,\r\n        assetID, freezeTarget, freezeState, params)\r\n\r\n    // Must be signed by the freeze account   \r\n    rawSignedTxn = ftxn.signTxn(recoveredAccount2.sk)\r\n    let ftx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n    console.log(\"Transaction : \" + ftx.txId);\r\n    // wait for transaction to be confirmed\r\n    await waitForConfirmation(algodclient, ftx.txId);\r\n\r\n    // You should now see the asset is frozen listed in the account information\r\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n    params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;   \r\n    \r\n    sender = recoveredAccount2.addr;\r\n    recipient = recoveredAccount1.addr;\r\n    revocationTarget = recoveredAccount3.addr;\r\n    closeRemainderTo = undefined;\r\n    amount = 0;\r\n    // signing and sending \"txn\" will send \"amount\" assets from \"revocationTarget\" to \"recipient\",\r\n    // if and only if sender == clawback manager for this asset\r\n    \r\n    let rtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n       amount, note, assetID, params);\r\n    // Must be signed by the account that is the clawback address    \r\n    rawSignedTxn = rtxn.signTxn(recoveredAccount2.sk)\r\n    let rtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n    console.log(\"Transaction : \" + rtx.txId);\r\n    // wait for transaction to be confirmed\r\n    await waitForConfirmation(algodclient, rtx.txId);\r\n\r\n    // You should now see 0 assets listed in the account information\r\n    // for the third account\r\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n\r\n}\r\n\r\nconst Rasset=async()=>{\r\n\r\nlet AssId='';\r\n\r\nconst algosdk = require('algosdk');\r\n//gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history\r\n\r\nvar account1_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account2_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n//var account3_mnemonic = \"runway genuine lazy assist ticket junior pilot flush rocket swallow ripple risk alien mobile chat recall run quiz cause weekend range april vicious about spoon\";\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar recoveredAccount2 = algosdk.mnemonicToSecretKey(account2_mnemonic);\r\nvar recoveredAccount3 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\n\r\nconsole.log(recoveredAccount1.addr);\r\nconsole.log(recoveredAccount2.addr);\r\nconsole.log(recoveredAccount3.addr);\r\n\r\n//var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n//var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n//let accc=recoveredAccount1.addr;\r\n//console.log(\"cacc\",accc)\r\n\r\nlet addr = recoveredAccount1.addr;\r\nlet note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n//let addr = recoveredAccount1.addr;\r\n//'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n//recoveredAccount1.addr;\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 1;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1;\r\n// Used to display asset units to user    \r\nlet unitName = currentSymbol;\r\n//\"ASA\";\r\n// Friendly name of the asset    \r\nlet assetName = tname;\r\n//\"demoRam\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n//Img;\r\n//\"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager = recoveredAccount2.addr\r\n//'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\nlet reserve = recoveredAccount2.addr\r\n//'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can freeze or unfreeze user asset holdings \r\nlet freeze = recoveredAccount2.addr\r\n//'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\nlet clawback = recoveredAccount2.addr\r\n//'7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";    \r\nconst port = \"\";\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\nconst token = {\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\nconsole.log(\"re\",algodclient)\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n    console.log(\"txnn\",txn);    \r\nlet rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nlet getre=await waitForConfirmation(algodclient, tx.txId);\r\nconsole.log(\"result\",getre);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n\r\nconsole.log(\"Cassptx\",ptx);\r\nconsole.log(\"Cass\",assetID);\r\nlet result2=await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\nlet result3=await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\r\nconsole.log(\"resul\",result2);\r\nconsole.log(\"resuls\",result3);\r\nlet accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\n\r\nconsole.log(\"leng\",accountInfos['created-assets'].length);\r\n  for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\r\n\r\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\r\n      console.log(\"scr\",scrutinizedAsset);\r\n      if (scrutinizedAsset['index'] === assetID) \r\n      {\r\n          console.log(\"AssetID\",scrutinizedAsset['index']);\r\n          AssId=scrutinizedAsset['index']\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmss\" , myparms);\r\n          break;\r\n      }\r\n  }\r\n\r\n//console.log(\"ab\",ab);\r\n\r\nlet accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n  params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n    // Asset configuration specific parameters\r\n    // all other values are the same so we leave \r\n    // Them set.\r\n    // specified address can change reserve, freeze, clawback, and manager\r\n    manager = recoveredAccount1.addr;\r\n\r\n    // Note that the change has to come from the existing manager\r\n    let ctxn = algosdk.makeAssetConfigTxnWithSuggestedParams(recoveredAccount2.addr, note, \r\n        assetID, manager, reserve, freeze, clawback, params);\r\n\r\n    // This transaction must be signed by the current manager\r\n    rawSignedTxn = ctxn.signTxn(recoveredAccount2.sk)\r\n    let ctx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n    console.log(\"Transaction : \" + ctx.txId);\r\n    // wait for transaction to be confirmed\r\n    await waitForConfirmation(algodclient, ctx.txId);\r\n\r\n    // Get the asset information for the newly changed asset\r\n    // use indexer or utiltiy function for Account info\r\n \r\n    // The manager should now be the same as the creator\r\n    await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n\r\n    localStorage.setItem('myasset', AssId);\r\n\r\n//cmd line below\r\n\r\n    params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n\r\n    let sender = recoveredAccount3.addr;\r\n    let recipient = sender;\r\n    // We set revocationTarget to undefined as \r\n    // This is not a clawback operation\r\n    let revocationTarget = undefined;\r\n    // CloseReaminerTo is set to undefined as\r\n    // we are not closing out an asset\r\n    let closeRemainderTo = undefined;\r\n    // We are sending 0 assets\r\n    let amount = 0;\r\n\r\n\r\n     // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n     let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n      amount, note, assetID, params);\r\n\r\n // Must be signed by the account wishing to opt in to the asset    \r\n rawSignedTxn = opttxn.signTxn(recoveredAccount3.sk);\r\n let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n console.log(\"Transaction : \" + opttx.txId);\r\n // wait for transaction to be confirmed\r\n await waitForConfirmation(algodclient, opttx.txId);\r\n\r\n //You should now see the new asset listed in the account information\r\n console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n params = await algodclient.getTransactionParams().do();\r\n //comment out the next two lines to use suggested fee\r\n params.fee = 0;\r\n params.flatFee = true;\r\n\r\n sender = recoveredAccount1.addr;\r\n recipient = recoveredAccount3.addr;\r\n revocationTarget = undefined;\r\n closeRemainderTo = undefined;\r\n //Amount of the asset to transfer\r\n amount = 0;\r\n\r\n // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\n let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n      amount,  note, assetID, params);\r\n // Must be signed by the account sending the asset  \r\n rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\n let xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n console.log(\"Transaction : \" + xtx.txId);\r\n // wait for transaction to be confirmed\r\n await waitForConfirmation(algodclient, xtx.txId);\r\n\r\n // You should now see the 10 assets listed in the account information\r\n console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 0;\r\n    params.flatFee = true;\r\n\r\n    let from = recoveredAccount2.addr;\r\n    let freezeTarget = recoveredAccount3.addr;\r\n    let freezeState = true;\r\n\r\n    // The freeze transaction needs to be signed by the freeze account\r\n    let ftxn = algosdk.makeAssetFreezeTxnWithSuggestedParams(from, note,\r\n        assetID, freezeTarget, freezeState, params)\r\n\r\n    // Must be signed by the freeze account   \r\n    rawSignedTxn = ftxn.signTxn(recoveredAccount2.sk)\r\n    let ftx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n    console.log(\"Transaction : \" + ftx.txId);\r\n    // wait for transaction to be confirmed\r\n    await waitForConfirmation(algodclient, ftx.txId);\r\n\r\n    // You should now see the asset is frozen listed in the account information\r\n    console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n    await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n\r\n//above transfer working\r\n\r\n//     params = await algodclient.getTransactionParams().do();\r\n//     //comment out the next two lines to use suggested fee\r\n//     params.fee = 0;\r\n//     params.flatFee = true;   \r\n    \r\n//     sender = recoveredAccount2.addr;\r\n//     recipient = recoveredAccount1.addr;\r\n//     revocationTarget = recoveredAccount3.addr;\r\n//     closeRemainderTo = undefined;\r\n//     amount = 1000;\r\n//     // signing and sending \"txn\" will send \"amount\" assets from \"revocationTarget\" to \"recipient\",\r\n//     // if and only if sender == clawback manager for this asset\r\n    \r\n//     let rtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n//        amount, note, assetID, params);\r\n//     // Must be signed by the account that is the clawback address    \r\n//     rawSignedTxn = rtxn.signTxn(recoveredAccount2.sk)\r\n//     let rtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n//     console.log(\"Transaction : \" + rtx.txId);\r\n//     // wait for transaction to be confirmed\r\n//     await waitForConfirmation(algodclient, rtx.txId);\r\n\r\n//     // You should now see 0 assets listed in the account information\r\n//     // for the third account\r\n//     console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n//     await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);\r\n\r\n//cmd line above\r\n\r\n    // params = await algodclient.getTransactionParams().do();\r\n    // //comment out the next two lines to use suggested fee\r\n    // params.fee = 1000;\r\n    // params.flatFee = true;\r\n\r\n    // // The address for the from field must be the manager account\r\n    // // Which is currently the creator addr1\r\n    // addr = recoveredAccount1.addr;\r\n    // note = undefined;\r\n    // // if all assets are held by the asset creator,\r\n    // // the asset creator can sign and issue \"txn\" to remove the asset from the ledger. \r\n    // let dtxn = algosdk.makeAssetDestroyTxnWithSuggestedParams(addr, note, assetID, params);\r\n    // // The transaction must be signed by the manager which \r\n    // // is currently set to account1\r\n    // rawSignedTxn = dtxn.signTxn(recoveredAccount1.sk)\r\n    // let dtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n    // console.log(\"Transaction : \" + dtx.txId);\r\n    // // wait for transaction to be confirmed\r\n    // await waitForConfirmation(algodclient, dtx.txId);\r\n\r\n    // // The account3 and account1 should no longer contain the asset as it has been destroyed\r\n    // console.log(\"Asset ID: \" + assetID);\r\n    // console.log(\"Account 1 = \" + recoveredAccount1.addr);\r\n    // await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n    // await printAssetHolding(algodclient, recoveredAccount1.addr, assetID);\r\n    // console.log(\"Account 3 = \" + recoveredAccount3.addr);\r\n    // await printAssetHolding(algodclient, recoveredAccount3.addr, assetID);  \r\n\r\n\r\nalert(\"your Asset id \"+AssId)  \r\n\r\nwindow.location.reload(false)\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n    <div>\r\n\r\n<center>\r\n\r\n    <div style={{backgroundColor:'white',height:'600px',width:'500px'}}>\r\n\r\n  \r\n\r\n\r\n<br></br>\r\n<h1>CREATE NFT-TOKEN</h1>\r\n\r\n<br></br>\r\n\r\n\r\n\r\n<label for=\"name\">NFT  Name    </label>\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<input\r\nid=\"nameid\"\r\ntype='text'\r\nname=\"tname\"\r\nrequired\r\nonChange={event => setName(event.target.value)}\r\n\r\n/>\r\n<br></br>\r\n    <br></br>\r\n\r\n  <label for=\"symbol\">NFT  Symbol    </label>\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n  <select style={{backgroundColor:'white',height:'20px',width:'160px'}}\r\n      onChange={(event) => changeFruit(event.target.value)}\r\n      value={currentSymbol}>\r\n\r\n      <option value=\"ETH\">ETH     </option> \r\n      <option value=\"BNB\">BNB     </option>\r\n      <option value=\"Algos\">Algos</option>\r\n    </select>\r\n<br></br>\r\n<br></br>\r\n\r\n\r\n<label for=\"id\">NFT Token-Id   {' '}   </label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n<input\r\nid=\"idid\"\r\ntype='text'\r\nname=\"tid\"\r\nrequired\r\nonChange={event => setId( event.target.value)}\r\n\r\n/>\r\n\r\n<br></br>\r\n<br></br>\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label for=\"images\">Choose Your Image     </label>\r\n          \r\n          <input style={{backgroundColor:'white',height:'22px',width:'230px'}}\r\n           name=\"tfile\" id=\"fileid\" type = \"file\" onChange = {captureFile} required />\r\n    \r\n           {/* <button \r\n           type=\"submit\"> \r\n           Upload Image NFT\r\n           </button> */}\r\n     <br></br>\r\n     <br></br>\r\n     <br></br>\r\n\r\n{/* \r\n            <button\r\n              type=\"submit\"> \r\n              Create NFT\r\n              </button> */}\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {Rasset}>\r\n                  {/* TransferAss */}\r\n               Create Asset\r\n              </button>\r\n              <br></br>\r\n              <br></br>\r\n              <br></br>\r\n\r\n              <label for=\"name\">Enter Address   </label>\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<input\r\ntype='text'\r\nname=\"tsendAdd\"\r\nrequired\r\nonChange={event => setAddess(event.target.value)}\r\n/>\r\n\r\n\r\n              <button\r\n                type=\"button\"\r\n                onClick= {RSend}>\r\n                  {/* TransferAss */}\r\n               Send\r\n              </button>\r\n              </div>\r\n</center>\r\n              </div>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
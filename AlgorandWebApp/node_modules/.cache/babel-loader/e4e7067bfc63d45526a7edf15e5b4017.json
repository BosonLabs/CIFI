{"ast":null,"code":"const nacl = require('tweetnacl');\n\nconst sha512 = require('js-sha512');\n\nfunction genericHash(arr) {\n  return sha512.sha512_256.array(arr);\n}\n\nfunction randomBytes(length) {\n  return nacl.randomBytes(length);\n}\n\nfunction keyPair() {\n  let seed = randomBytes(nacl.box.secretKeyLength);\n  return keyPairFromSeed(seed);\n}\n\nfunction keyPairFromSeed(seed) {\n  return nacl.sign.keyPair.fromSeed(seed);\n}\n\nfunction keyPairFromSecretKey(sk) {\n  return nacl.sign.keyPair.fromSecretKey(sk);\n}\n\nfunction sign(msg, secretKey) {\n  return nacl.sign.detached(msg, secretKey);\n}\n\nfunction bytesEqual(a, b) {\n  return nacl.verify(a, b);\n}\n\nfunction verify(message, signature, verifyKey) {\n  return nacl.sign.detached.verify(message, signature, verifyKey);\n}\n\nmodule.exports = {\n  genericHash,\n  randomBytes,\n  keyPair,\n  sign,\n  keyPairFromSeed,\n  keyPairFromSecretKey,\n  bytesEqual,\n  verify\n}; // constants\n\nmodule.exports.PUBLIC_KEY_LENGTH = nacl.sign.publicKeyLength;\nmodule.exports.SECRET_KEY_LENGTH = nacl.sign.secretKeyLength;\nmodule.exports.HASH_BYTES_LENGTH = 32;\nmodule.exports.SEED_BTYES_LENGTH = 32;","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/nacl/naclWrappers.js"],"names":["nacl","require","sha512","genericHash","arr","sha512_256","array","randomBytes","length","keyPair","seed","box","secretKeyLength","keyPairFromSeed","sign","fromSeed","keyPairFromSecretKey","sk","fromSecretKey","msg","secretKey","detached","bytesEqual","a","b","verify","message","signature","verifyKey","module","exports","PUBLIC_KEY_LENGTH","publicKeyLength","SECRET_KEY_LENGTH","HASH_BYTES_LENGTH","SEED_BTYES_LENGTH"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,WAAD,CAAtB;;AAEA,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AACtB,SAAOF,MAAM,CAACG,UAAP,CAAkBC,KAAlB,CAAwBF,GAAxB,CAAP;AACH;;AAED,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AACzB,SAAOR,IAAI,CAACO,WAAL,CAAiBC,MAAjB,CAAP;AACH;;AAED,SAASC,OAAT,GAAmB;AACf,MAAIC,IAAI,GAAGH,WAAW,CAACP,IAAI,CAACW,GAAL,CAASC,eAAV,CAAtB;AACA,SAAOC,eAAe,CAACH,IAAD,CAAtB;AACH;;AAED,SAASG,eAAT,CAAyBH,IAAzB,EAA+B;AAC3B,SAAOV,IAAI,CAACc,IAAL,CAAUL,OAAV,CAAkBM,QAAlB,CAA2BL,IAA3B,CAAP;AACH;;AAED,SAASM,oBAAT,CAA8BC,EAA9B,EAAkC;AAC9B,SAAOjB,IAAI,CAACc,IAAL,CAAUL,OAAV,CAAkBS,aAAlB,CAAgCD,EAAhC,CAAP;AACH;;AAED,SAASH,IAAT,CAAcK,GAAd,EAAmBC,SAAnB,EAA8B;AAC1B,SAAOpB,IAAI,CAACc,IAAL,CAAUO,QAAV,CAAmBF,GAAnB,EAAwBC,SAAxB,CAAP;AACH;;AAED,SAASE,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACtB,SAAOxB,IAAI,CAACyB,MAAL,CAAYF,CAAZ,EAAeC,CAAf,CAAP;AACH;;AAED,SAASC,MAAT,CAAgBC,OAAhB,EAAyBC,SAAzB,EAAoCC,SAApC,EAA+C;AAC3C,SAAO5B,IAAI,CAACc,IAAL,CAAUO,QAAV,CAAmBI,MAAnB,CAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,SAA9C,CAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAC3B,EAAAA,WAAD;AAAcI,EAAAA,WAAd;AAA2BE,EAAAA,OAA3B;AAAoCK,EAAAA,IAApC;AAA0CD,EAAAA,eAA1C;AAA2DG,EAAAA,oBAA3D;AAAiFM,EAAAA,UAAjF;AAA6FG,EAAAA;AAA7F,CAAjB,C,CAEA;;AACAI,MAAM,CAACC,OAAP,CAAeC,iBAAf,GAAmC/B,IAAI,CAACc,IAAL,CAAUkB,eAA7C;AACAH,MAAM,CAACC,OAAP,CAAeG,iBAAf,GAAmCjC,IAAI,CAACc,IAAL,CAAUF,eAA7C;AACAiB,MAAM,CAACC,OAAP,CAAeI,iBAAf,GAAmC,EAAnC;AACAL,MAAM,CAACC,OAAP,CAAeK,iBAAf,GAAmC,EAAnC","sourcesContent":["const nacl = require('tweetnacl');\nconst sha512 = require('js-sha512');\n\nfunction genericHash(arr) {\n    return sha512.sha512_256.array(arr);\n}\n\nfunction randomBytes(length) {\n    return nacl.randomBytes(length);\n}\n\nfunction keyPair() {\n    let seed = randomBytes(nacl.box.secretKeyLength);\n    return keyPairFromSeed(seed);\n}\n\nfunction keyPairFromSeed(seed) {\n    return nacl.sign.keyPair.fromSeed(seed);\n}\n\nfunction keyPairFromSecretKey(sk) {\n    return nacl.sign.keyPair.fromSecretKey(sk);\n}\n\nfunction sign(msg, secretKey) {\n    return nacl.sign.detached(msg, secretKey);\n}\n\nfunction bytesEqual(a, b) {\n    return nacl.verify(a, b);\n}\n\nfunction verify(message, signature, verifyKey) {\n    return nacl.sign.detached.verify(message, signature, verifyKey);\n}\n\nmodule.exports = {genericHash, randomBytes, keyPair, sign, keyPairFromSeed, keyPairFromSecretKey, bytesEqual, verify};\n\n// constants\nmodule.exports.PUBLIC_KEY_LENGTH = nacl.sign.publicKeyLength;\nmodule.exports.SECRET_KEY_LENGTH = nacl.sign.secretKeyLength;\nmodule.exports.HASH_BYTES_LENGTH = 32;\nmodule.exports.SEED_BTYES_LENGTH = 32;"]},"metadata":{},"sourceType":"script"}
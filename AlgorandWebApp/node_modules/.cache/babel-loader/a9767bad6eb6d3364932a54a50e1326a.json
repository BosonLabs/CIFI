{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst con = async () => {//   await AlgoSigner.connect();\n  // let client = new algosdk.Algodv2(...);\n  // let testNetParams = await client.getTransactionParams().do();\n  // testNetParams.flatFee = true;\n  // let tx1 = new algosdk.Transaction({\n  //   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // let tx2 = new algosdk.Transaction({\n  //   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // algosdk.assignGroupID([tx1, tx2]);\n  // let sdkTxs = [tx1, tx2];\n  // let base64Txs = sdkTxs.map((tx) => {\n  //   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\n  // });\n  // let walletTxs = base64Txs.map((b64) => {\n  //   return { tx: b64 };\n  // });\n  // let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\n  // let sendResult = await client\n  //   .sendRawTransaction(\n  //     signedTxs.map((signedTx) =>\n  //       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\n  //     )\n  //   )\n  //   .do();\n};\n\nconst App = () => {\n  // Function used to print created asset for account and assetid\n  // const printCreatedAsset = async function (algodclient, account, assetid) {\n  //   // note: if you have an indexer instance available it is easier to just use this\n  //   //     let accountInfo = await indexerClient.searchAccounts()\n  //   //    .assetID(assetIndex).do();\n  //   // and in the loop below use this to extract the asset for a particular account\n  //   // accountInfo['accounts'][idx][account]);\n  // };\n  const waitForConfirmation = async function (algodclient, txId) {\n    let response = await algodclient.status().do();\n    let lastround = response[\"last-round\"];\n\n    while (true) {\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n        break;\n      }\n\n      lastround++;\n      await algodclient.statusAfterBlock(lastround).do();\n    }\n  }; // Function used to print created asset for account and assetid\n\n\n  const printCreatedAsset = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n    let accountInfo = await algodclient.accountInformation(account).do();\n\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n      if (scrutinizedAsset['index'] === assetid) {\n        console.log(\"AssetID = \" + scrutinizedAsset['index']);\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmsprint\", myparms);\n        break;\n      }\n    }\n  };\n\n  const getParms = () => {// AlgoSigner.algod({\n    //   ledger: 'TestNet',\n    //   path: '/v2/transactions/params'\n    // })\n    // .then((d) => {\n    //   //txParams = d;\n    //   console.log(\"tx\",d)\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n    // AlgoSigner.send({\n    //   ledger: 'TestNet',\n    //   tx: signedTx.blob\n    // })\n    // .then((d) => {\n    //   tx = d;\n    // })\n    // .catch((e) => {\n    //   console.error(e);\n    // });\n  };\n\n  const Rasset = async () => {\n    let AssId = '';\n\n    const algosdk = require('algosdk');\n\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    let accc = recoveredAccount1.addr;\n    console.log(\"cacc\", accc);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n\n    let addr = recoveredAccount1.addr; //'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    //recoveredAccount1.addr;\n    // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"ASA\"; // Friendly name of the asset    \n\n    let assetName = \"demoRam\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n\n    let reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can freeze or unfreeze user asset holdings \n\n    let freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n\n    let clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n    console.log(\"txnn\", txn);\n    let rawSignedTxn = txn.signTxn(recoveredAccount1.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    let getre = await waitForConfirmation(algodclient, tx.txId);\n    console.log(\"result\", getre); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n    console.log(\"Cassptx\", ptx);\n    console.log(\"Cass\", assetID);\n    let result2 = await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    console.log(\"resul\", result2);\n    let accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"leng\", accountInfos['created-assets'].length);\n\n    for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\n      console.log(\"scr\", scrutinizedAsset);\n\n      if (scrutinizedAsset['index'] === assetID) {\n        console.log(\"AssetID\", scrutinizedAsset['index']);\n        AssId = scrutinizedAsset['index'];\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmss\", myparms);\n        break;\n      }\n    } //console.log(\"ab\",ab);\n\n\n    let accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']); // Opting in to transact with the new asset\n    // Allow accounts that want recieve the new asset\n    // Have to opt in. To do this they send an asset transfer\n    // of the new asset to themseleves \n    // In this example we are setting up the 3rd recovered account to \n    // receive the new asset\n    // let account13_mnemonic='gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\n    // var recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic);\n    // let senders = recoveredAccount13.addr;\n    // let recipient = senders;\n    // console.log(\"senders\",senders)\n    // // We set revocationTarget to undefined as \n    // // This is not a clawback operation\n    // let revocationTarget = undefined;\n    // // CloseReaminerTo is set to undefined as\n    // // we are not closing out an asset\n    // let closeRemainderTo = undefined;\n    // // We are sending 0 assets\n    // let amount = 0;\n    // let asId='15884520';\n    // console.log(\"para\",params)\n    // console.log(\"assid\",asId)\n    // // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n    // let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(senders, recipient, closeRemainderTo, revocationTarget,\n    // amount, note, asId, params);\n    // // Must be signed by the account wishing to opt in to the asset    \n    // rawSignedTxn = opttxn.signTxn(recoveredAccount13.sk);\n    // let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    // console.log(\"Transaction : \" + opttx.txId);\n    // // wait for transaction to be confirmed\n    // //await waitForConfirmation(algodclient, opttx.txId);\n    // //You should now see the new asset listed in the account information\n    // console.log(\"Account 3 = \" + recoveredAccount13.addr);\n    // //await printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\n  };\n\n  const TransferAss = async () => {\n    const algosdk = require('algosdk');\n\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    let account13_mnemonic = 'gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\n    var recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic); //let senders = recoveredAccount13.addr;\n\n    let sender = recoveredAccount1.addr;\n    let recipient = recoveredAccount13.addr;\n    let revocationTarget = undefined;\n    let closeRemainderTo = undefined; //Amount of the asset to transfer\n\n    let amount = 10;\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n\n    let assetID = '15884520'; // signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\n\n    let xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget, amount, note, assetID, params); // Must be signed by the account sending the asset  \n\n    let rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk);\n    let xtx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + xtx.txId); // wait for transaction to be confirmed\n    //await waitForConfirmation(algodclient, xtx.txId);\n    // You should now see the 10 assets listed in the account information\n\n    console.log(\"Account 3 = \" + recoveredAccount13.addr);\n    await printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\n  };\n\n  const AnoCreate = async () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let account = '5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    let assetid = '1234'; //const printCreatedAsset = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n\n    let accountInfo = await algodclient.accountInformation(account).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']);\n\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n      if (scrutinizedAsset['index'] === assetid) {\n        console.log(\"AssetID = \" + scrutinizedAsset['index']);\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parms = \" + myparms);\n        break;\n      }\n    }\n\n    let ac = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\"; //  let account_info = await algodclient.accountInformation(ac);\n\n    let account_info = await algodclient.accountInformation(ac).do();\n    let acct_string = JSON.stringify(account_info);\n    console.log(\"accinfo \" + acct_string);\n  };\n\n  const AssCreate = () => {\n    const algosdk = require('algosdk'); // Retrieve the token, server and port values for your installation in the \n    // algod.net and algod.token files within the data directory\n    // UPDATE THESE VALUES\n    // const token = \"TOKEN\";\n    // const server = \"SERVER\";\n    // const port = PORT;\n    //hackathon\n    // const token = \"ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1\";\n    // const server = \"http://hackathon.algodev.network\";\n    // const port = 9100;\n    // sandbox\n\n\n    const token = \"SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin\"; //const server = \"http://localhost\";\n\n    const server = \"https://testnet-algorand.api.purestake.io/idx2\";\n    const port = 4001;\n    let algodclient = new algosdk.Algod(token, server, port); // Function used to wait for a tx confirmation\n\n    const waitForConfirmation = async function (algodclient, txId) {\n      let response = await algodclient.status().do();\n      alert(\"response\" + response);\n      let lastround = response[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n      }\n    };\n  };\n\n  const AccCreate = async () => {\n    const algosdk = require('algosdk'); // In order to do this ASA tutorial, we will need to generate 3 accounts\n    // once created copy off the values which we will past into the TutorialASA code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    let acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\"); //const algosdk = require('algosdk');\n    //const server = 'https://testnet-algorand.api.purestake.io/ps2'\n\n    const server = \"https://testnet-algorand.api.purestake.io/idx2\"; //const port = '';\n\n    const token = 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'; // // sandbox\n    // const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const server = \"http://localhost\";\n\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algod(token, server, port); //console.log(\"alcli\"+algodclient)\n    //(async () => {\n\n    let ac = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\n    let account_info = await algodclient.accountInformation(ac);\n    console.log(\"accinfo \" + account_info);\n    alert(\"acc\" + account_info);\n    let acct_string = JSON.stringify(account_info);\n    console.log(\"Account1Info: \" + acct_string); //})().catch(e => {\n    //console.log(e);\n    //  alert(\"error\");\n    //});\n  };\n\n  const create = async () => {\n    const algosdk = require('algosdk');\n\n    const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    const server = \"http://localhost\";\n    const port = 4001;\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n    //let addr = recoveredAccount1.addr;\n\n    let addr = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\"; // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"LATINUM\"; // Friendly name of the asset    \n\n    let assetName = \"latinum\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; //let manager = recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n    //let reserve = recoveredAccount2.addr;\n\n    let reserve = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can freeze or unfreeze user asset holdings \n    //let freeze = recoveredAccount2.addr;\n\n    let freeze = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n    //let clawback = recoveredAccount2.addr;\n\n    let clawback = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    console.log(params); // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params); //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\n\n    let rawSignedTxn = txn.signTxn(addr.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, tx.txId); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n  };\n\n  const balance = async () => {\n    const algosdk = require('algosdk'); // In order to do an ASA tutorial, we will need to generate 3 accounts\n    // once created, copy off the values which we will paste into the tutorial code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    var acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\"); // sandbox\n\n    const token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\n    const server = \"http://localhost\";\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    (async () => {\n      let account_info = await algodclient.accountInformation(recoveredAccount1.addr).do();\n      let acct_string = JSON.stringify(account_info);\n      console.log(\"Account 1 Info: \" + acct_string);\n    })().catch(e => {\n      console.log(e);\n    }); //     const algosdk = require('algosdk');\n    //   let account = algosdk.generateAccount();\n    // console.log(\"Account Address: \", account.addr);\n    // let mn = algosdk.secretKeyToMnemonic(account.sk);\n    // console.log(\"Account Mnemonic: \", mn);\n    // const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const server = \"http://localhost\";\n    // const port = 4001;\n    // // Instantiate the algod wrapper\n    // let algodclient = new algosdk.Algodv2(token, server, port);\n    // // (async () => {\n    // //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\n    // // let acct_string = JSON.stringify(account_info);\n    // // console.log(\"Account Info: \" + acct_string);\n    // // })().catch(e => {\n    // // console.log(e);\n    // // });\n    //     //alert(\"balance\")\n    //     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\n    //     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\n    //     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\n    //     console.log(\"My address: %s\", myAccount.addr)\n    //     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\n    //     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 847,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 859,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 845,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: Rasset,\n      children: \"Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 869,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","con","App","waitForConfirmation","algodclient","txId","response","status","do","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","undefined","getParms","Rasset","AssId","algosdk","require","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","accc","addr","note","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","baseServer","port","token","Algodv2","params","getTransactionParams","fee","flatFee","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","tx","sendRawTransaction","assetID","getre","ptx","result2","accountInfos","TransferAss","account13_mnemonic","recoveredAccount13","sender","recipient","revocationTarget","closeRemainderTo","amount","xtxn","makeAssetTransferTxnWithSuggestedParams","xtx","printAssetHolding","AnoCreate","ac","account_info","acct_string","AssCreate","server","Algod","alert","AccCreate","acct","generateAccount","account1","account1_mnemonic","secretKeyToMnemonic","isValid","isValidAddress","create","balance","catch","e"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\nconst con=async()=>{\r\n\r\n\r\n//   await AlgoSigner.connect();\r\n// let client = new algosdk.Algodv2(...);\r\n\r\n// let testNetParams = await client.getTransactionParams().do();\r\n// testNetParams.flatFee = true;\r\n\r\n// let tx1 = new algosdk.Transaction({\r\n//   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// let tx2 = new algosdk.Transaction({\r\n//   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// algosdk.assignGroupID([tx1, tx2]);\r\n\r\n// let sdkTxs = [tx1, tx2];\r\n// let base64Txs = sdkTxs.map((tx) => {\r\n//   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\r\n// });\r\n// let walletTxs = base64Txs.map((b64) => {\r\n//   return { tx: b64 };\r\n// });\r\n\r\n// let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\r\n\r\n// let sendResult = await client\r\n//   .sendRawTransaction(\r\n//     signedTxs.map((signedTx) =>\r\n//       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\r\n//     )\r\n//   )\r\n//   .do();\r\n  \r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n\r\n  \r\n\r\n\r\n  // Function used to print created asset for account and assetid\r\n// const printCreatedAsset = async function (algodclient, account, assetid) {\r\n//   // note: if you have an indexer instance available it is easier to just use this\r\n//   //     let accountInfo = await indexerClient.searchAccounts()\r\n//   //    .assetID(assetIndex).do();\r\n//   // and in the loop below use this to extract the asset for a particular account\r\n//   // accountInfo['accounts'][idx][account]);\r\n  \r\n// };\r\n\r\n\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n  let response = await algodclient.status().do();\r\n  let lastround = response[\"last-round\"];\r\n  while (true) {\r\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n          //Got the completed Transaction\r\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n          break;\r\n      }\r\n      lastround++;\r\n      await algodclient.statusAfterBlock(lastround).do();\r\n  }\r\n};\r\n\r\n\r\n// Function used to print created asset for account and assetid\r\nconst printCreatedAsset = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] === assetid) {\r\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmsprint\",myparms);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\n\r\n\r\n  const getParms=()=>{\r\n\r\n    // AlgoSigner.algod({\r\n    //   ledger: 'TestNet',\r\n    //   path: '/v2/transactions/params'\r\n    // })\r\n    // .then((d) => {\r\n    //   //txParams = d;\r\n    //   console.log(\"tx\",d)\r\n    // })\r\n    // .catch((e) => {\r\n    //   console.error(e);\r\n    // });\r\n    // AlgoSigner.send({\r\n    //   ledger: 'TestNet',\r\n    //   tx: signedTx.blob\r\n    // })\r\n    // .then((d) => {\r\n    //   tx = d;\r\n    // })\r\n    // .catch((e) => {\r\n    //   console.error(e);\r\n    // });\r\n\r\n  }\r\n\r\nconst Rasset=async()=>{\r\n\r\n  let AssId='';\r\n\r\nconst algosdk = require('algosdk');\r\n\r\n\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n\r\n\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\nlet accc=recoveredAccount1.addr;\r\n\r\nconsole.log(\"cacc\",accc)\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n\r\nlet addr = recoveredAccount1.addr;\r\n//'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n//recoveredAccount1.addr;\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"ASA\";\r\n// Friendly name of the asset    \r\nlet assetName = \"demoRam\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\nlet reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can freeze or unfreeze user asset holdings \r\nlet freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\nlet clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n\r\n//recoveredAccount2.addr;\r\n\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n\r\n\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n\r\n    console.log(\"txnn\",txn);    \r\n\r\nlet rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nlet getre=await waitForConfirmation(algodclient, tx.txId);\r\nconsole.log(\"result\",getre);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n\r\nconsole.log(\"Cassptx\",ptx);\r\nconsole.log(\"Cass\",assetID);\r\n\r\nlet result2=await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n\r\nconsole.log(\"resul\",result2);\r\n\r\nlet accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\nconsole.log(\"leng\",accountInfos['created-assets'].length);\r\n  for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\r\n\r\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\r\n      console.log(\"scr\",scrutinizedAsset);\r\n      if (scrutinizedAsset['index'] === assetID) \r\n      {\r\n          console.log(\"AssetID\",scrutinizedAsset['index']);\r\n          AssId=scrutinizedAsset['index']\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmss\" , myparms);\r\n          break;\r\n      }\r\n  }\r\n\r\n//console.log(\"ab\",ab);\r\n\r\n\r\nlet accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\n\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n\r\n\r\n  // Opting in to transact with the new asset\r\n// Allow accounts that want recieve the new asset\r\n// Have to opt in. To do this they send an asset transfer\r\n// of the new asset to themseleves \r\n// In this example we are setting up the 3rd recovered account to \r\n// receive the new asset\r\n\r\n// let account13_mnemonic='gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\r\n\r\n// var recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic);\r\n\r\n// let senders = recoveredAccount13.addr;\r\n// let recipient = senders;\r\n// console.log(\"senders\",senders)\r\n// // We set revocationTarget to undefined as \r\n// // This is not a clawback operation\r\n// let revocationTarget = undefined;\r\n// // CloseReaminerTo is set to undefined as\r\n// // we are not closing out an asset\r\n// let closeRemainderTo = undefined;\r\n// // We are sending 0 assets\r\n// let amount = 0;\r\n\r\n// let asId='15884520';\r\n\r\n// console.log(\"para\",params)\r\n// console.log(\"assid\",asId)\r\n// // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n// let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(senders, recipient, closeRemainderTo, revocationTarget,\r\n// amount, note, asId, params);\r\n// // Must be signed by the account wishing to opt in to the asset    \r\n// rawSignedTxn = opttxn.signTxn(recoveredAccount13.sk);\r\n// let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n// console.log(\"Transaction : \" + opttx.txId);\r\n// // wait for transaction to be confirmed\r\n// //await waitForConfirmation(algodclient, opttx.txId);\r\n// //You should now see the new asset listed in the account information\r\n// console.log(\"Account 3 = \" + recoveredAccount13.addr);\r\n// //await printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  const TransferAss=async()=>{\r\n\r\n\r\n\r\n    const algosdk = require('algosdk');\r\n\r\n\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\n\r\nlet account13_mnemonic='gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\r\n\r\nvar recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic);\r\n\r\n//let senders = recoveredAccount13.addr;\r\n\r\n    let sender = recoveredAccount1.addr;\r\nlet recipient = recoveredAccount13.addr;\r\nlet revocationTarget = undefined;\r\nlet closeRemainderTo = undefined;\r\n//Amount of the asset to transfer\r\nlet amount = 10;\r\n\r\n\r\n\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n\r\nlet assetID='15884520';\r\n\r\n\r\n// signing and sending \"txn\" will send \"amount\" assets from \"sender\" to \"recipient\"\r\nlet xtxn = algosdk.makeAssetTransferTxnWithSuggestedParams(sender, recipient, closeRemainderTo, revocationTarget,\r\n        amount,  note, assetID, params);\r\n// Must be signed by the account sending the asset  \r\nlet rawSignedTxn = xtxn.signTxn(recoveredAccount1.sk)\r\nlet xtx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + xtx.txId);\r\n// wait for transaction to be confirmed\r\n//await waitForConfirmation(algodclient, xtx.txId);\r\n\r\n// You should now see the 10 assets listed in the account information\r\nconsole.log(\"Account 3 = \" + recoveredAccount13.addr);\r\nawait printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\r\n\r\n\r\n  }\r\n\r\n  const AnoCreate=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\nlet account='5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n\r\nlet assetid='1234';\r\n\r\n\r\n//const printCreatedAsset = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n  for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] === assetid) {\r\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parms = \" + myparms);\r\n          break;\r\n      }\r\n  }\r\n\r\n\r\n  let ac=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n  //  let account_info = await algodclient.accountInformation(ac);\r\n    \r\n\r\n    let account_info = (await algodclient.accountInformation(ac).do());\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"accinfo \" + acct_string);\r\n  \r\n\r\n\r\n  }\r\n\r\n  const AssCreate=()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n// Retrieve the token, server and port values for your installation in the \r\n// algod.net and algod.token files within the data directory\r\n\r\n// UPDATE THESE VALUES\r\n// const token = \"TOKEN\";\r\n// const server = \"SERVER\";\r\n// const port = PORT;\r\n\r\n//hackathon\r\n// const token = \"ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1\";\r\n// const server = \"http://hackathon.algodev.network\";\r\n// const port = 9100;\r\n\r\n// sandbox\r\nconst token = \"SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin\";\r\n//const server = \"http://localhost\";\r\nconst server=\"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst port = 4001;\r\n\r\n\r\nlet algodclient = new algosdk.Algod(token, server, port);\r\n\r\n// Function used to wait for a tx confirmation\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n    let response = await algodclient.status().do();\r\n    alert(\"response\"+response)\r\n    let lastround = response[\"last-round\"];\r\n    while (true) {\r\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n            //Got the completed Transaction\r\n            console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n            break;\r\n        }\r\n        lastround++;\r\n        await algodclient.statusAfterBlock(lastround).do();\r\n    }\r\n};\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n  const AccCreate=async()=>{\r\n    const algosdk = require('algosdk');\r\n// In order to do this ASA tutorial, we will need to generate 3 accounts\r\n// once created copy off the values which we will past into the TutorialASA code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nlet acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n\r\n\r\n//const algosdk = require('algosdk');\r\n//const server = 'https://testnet-algorand.api.purestake.io/ps2'\r\n\r\nconst server=\"https://testnet-algorand.api.purestake.io/idx2\";\r\n//const port = '';\r\nconst token = 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin';\r\n\r\n\r\n\r\n// // sandbox\r\n// const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const server = \"http://localhost\";\r\nconst port = 4001;\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algod(token, server, port);\r\n\r\n//console.log(\"alcli\"+algodclient)\r\n\r\n//(async () => {\r\n  let ac=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n    let account_info = await algodclient.accountInformation(ac);\r\n    console.log(\"accinfo \" + account_info);\r\n    alert(\"acc\"+account_info)\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"Account1Info: \" + acct_string);\r\n//})().catch(e => {\r\n    //console.log(e);\r\n  //  alert(\"error\");\r\n//});\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n  const create=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n\r\nconst token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n//let addr = recoveredAccount1.addr;\r\nlet addr=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"LATINUM\";\r\n// Friendly name of the asset    \r\nlet assetName = \"latinum\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n//let manager = recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\n//let reserve = recoveredAccount2.addr;\r\nlet reserve=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can freeze or unfreeze user asset holdings \r\n//let freeze = recoveredAccount2.addr;\r\nlet freeze=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\n//let clawback = recoveredAccount2.addr;\r\nlet clawback=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n    console.log(params);\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n    //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet rawSignedTxn = txn.signTxn(addr.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nawait waitForConfirmation(algodclient, tx.txId);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n  }\r\n\r\n\r\n  const balance=async()=>{\r\n\r\n\r\n    const algosdk = require('algosdk');\r\n// In order to do an ASA tutorial, we will need to generate 3 accounts\r\n// once created, copy off the values which we will paste into the tutorial code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nvar acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n\r\n\r\n\r\n// sandbox\r\nconst token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n(async () => {\r\n    let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"Account 1 Info: \" + acct_string);\r\n    \r\n})().catch(e => {\r\n    console.log(e);\r\n});\r\n\r\n\r\n//     const algosdk = require('algosdk');\r\n\r\n\r\n//   let account = algosdk.generateAccount();\r\n// console.log(\"Account Address: \", account.addr);\r\n// let mn = algosdk.secretKeyToMnemonic(account.sk);\r\n// console.log(\"Account Mnemonic: \", mn);\r\n\r\n\r\n// const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const server = \"http://localhost\";\r\n// const port = 4001;\r\n\r\n// // Instantiate the algod wrapper\r\n// let algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n// // (async () => {\r\n// //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n\r\n// // let acct_string = JSON.stringify(account_info);\r\n// // console.log(\"Account Info: \" + acct_string);\r\n// // })().catch(e => {\r\n// // console.log(e);\r\n// // });\r\n\r\n\r\n\r\n//     //alert(\"balance\")\r\n\r\n//     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\r\n\r\n//     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\r\n\r\n//     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\r\n\r\n//     console.log(\"My address: %s\", myAccount.addr)\r\n\r\n//     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\r\n\r\n//     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {Rasset}>\r\n                  {/* TransferAss */}\r\n               Balance\r\n              </button>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"const base = require(\"./base\");\n/**\n * Request data type for dryrun endpoint.\n * Given the Transactions and simulated ledger state upload,\n * run TEAL scripts and return debugging information.\n */\n\n\nclass DryrunRequest extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunRequest</code> object.\n   * @param txns {Array.<str>}\n   * @param accounts {Array.<Account>}\n   * @param apps {Array.<DryrunApp>}\n   * @param protocolVersion {String} ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.\n   * @param round {Number} Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.\n   * @param latestTimestamp {Number} LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.\n   * @param sources {Array.<DryrunSource>}\n   */\n  constructor({\n    txns,\n    accounts,\n    apps,\n    protocolVersion,\n    round,\n    latestTimestamp,\n    sources\n  }) {\n    super();\n    this.txns = txns;\n    this.accounts = accounts;\n    this.apps = apps;\n    this.protocolVersion = protocolVersion;\n    this.round = round;\n    this.latestTimestamp = latestTimestamp;\n    this.sources = sources;\n    this.attribute_map = {\n      \"txns\": \"txns\",\n      \"accounts\": \"accounts\",\n      \"apps\": \"apps\",\n      \"protocolVersion\": \"protocol-version\",\n      \"round\": \"round\",\n      \"latestTimestamp\": \"latest-timestamp\",\n      \"sources\": \"sources\"\n    };\n  }\n\n}\n/**\n * DryrunSource is TEAL source text that gets uploaded,\n * compiled, and inserted into transactions or application state.\n */\n\n\nclass DryrunSource extends base.BaseModel {\n  /**\n   * Creates a new <code>DryrunSource</code> object.\n   * @param fieldName {String} FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].\n   * @param source {String}\n   * @param txnIndex {Number}\n   * @param appIndex {Number}\n   */\n  constructor(fieldName, source, txnIndex, appIndex) {\n    super();\n    this.fieldName = fieldName;\n    this.source = source;\n    this.txnIndex = txnIndex;\n    this.appIndex = appIndex;\n    this.attribute_map = {\n      \"fieldName\": \"field-name\",\n      \"source\": \"source\",\n      \"txnIndex\": \"txn-index\",\n      \"appIndex\": \"app-index\"\n    };\n  }\n\n}\n\nclass Application extends base.BaseModel {\n  constructor(id, params) {\n    super();\n    this.id = id;\n    this.params = params;\n    this.attribute_map = {\n      \"id\": \"id\",\n      \"params\": \"params\"\n    };\n  }\n\n}\n\nclass ApplicationParams extends base.BaseModel {\n  constructor({\n    creator,\n    approvalProgram,\n    clearStateProgram,\n    localStateSchema,\n    globalStateSchema,\n    globalState\n  }) {\n    super();\n    this.creator = creator;\n    this.approvalProgram = approvalProgram;\n    this.clearStateProgram = clearStateProgram;\n    this.localStateSchema = localStateSchema;\n    this.globalStateSchema = globalStateSchema;\n    this.globalState = globalState;\n    this.attribute_map = {\n      \"creator\": \"creator\",\n      \"approvalProgram\": \"approval-program\",\n      \"clearStateProgram\": \"clear-state-program\",\n      \"localStateSchema\": \"local-state-schema\",\n      \"globalStateSchema\": \"global-state-schema\",\n      \"globalState\": \"global-state\"\n    };\n  }\n\n}\n\nclass ApplicationStateSchema extends base.BaseModel {\n  constructor(numUint, numByteSlice) {\n    super();\n    this.numUint = numUint;\n    this.numByteSlice = numByteSlice;\n    this.attribute_map = {\n      \"numUint\": \"num-uint\",\n      \"numByteSlice\": \"num-byte-slice\"\n    };\n  }\n\n}\n\nclass ApplicationLocalStates extends base.BaseModel {\n  constructor(id, state) {\n    super();\n    this.id = id;\n    this.state = state;\n    this.attribute_map = {\n      \"id\": \"id\",\n      \"state\": \"state\"\n    };\n  }\n\n}\n\nclass ApplicationLocalState extends base.BaseModel {\n  constructor(schema, keyValue) {\n    super();\n    this.schema = schema;\n    this.keyValue = keyValue;\n    this.attribute_map = {\n      \"schema\": \"schema\",\n      \"keyValue\": \"key-value\"\n    };\n  }\n\n}\n\nclass TealKeyValue extends base.BaseModel {\n  constructor(key, value) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.attribute_map = {\n      \"key\": \"key\",\n      \"value\": \"value\"\n    };\n  }\n\n}\n\nclass TealValue extends base.BaseModel {\n  constructor(type, bytes, uint) {\n    super();\n    this.type = type;\n    this.bytes = bytes;\n    this.uint = uint;\n    this.attribute_map = {\n      \"type\": \"type\",\n      \"bytes\": \"bytes\",\n      \"uint\": \"uint\"\n    };\n  }\n\n}\n\nclass AssetHolding extends base.BaseModel {\n  constructor(amount, assetId, creator, isFrozen) {\n    this.amount = amount;\n    this.assetId = assetId;\n    this.creator = creator;\n    this.isFrozen = isFrozen;\n    this.attribute_map = {\n      \"amount\": \"amount\",\n      \"assetId\": \"asset-id\",\n      \"creator\": \"creator\",\n      \"isFrozen\": \"is-frozen\"\n    };\n  }\n\n}\n\nclass Asset extends base.BaseModel {\n  constructor(index, params) {\n    this.amount = index;\n    this.assetId = params;\n    this.attribute_map = {\n      \"index\": \"index\",\n      \"params\": \"params\"\n    };\n  }\n\n}\n\nclass AssetParams extends base.BaseModel {\n  constructor({\n    clawback,\n    creator,\n    decimals,\n    defaultFrozen,\n    freeze,\n    manager,\n    metadataHash,\n    name,\n    reserve,\n    total,\n    unitName,\n    url\n  }) {\n    this.clawback = clawback;\n    this.creator = creator;\n    this.decimals = decimals;\n    this.defaultFrozen = defaultFrozen;\n    this.freeze = freeze;\n    this.manager = manager;\n    this.metadataHash = metadataHash;\n    this.name = name;\n    this.reserve = reserve;\n    this.total = total;\n    this.unitName = unitName;\n    this.url = url;\n    this.attribute_map = {\n      \"clawback\": \"clawback\",\n      \"creator\": \"creator\",\n      \"decimals\": \"decimals\",\n      \"defaultFrozen\": \"default-frozen\",\n      \"freeze\": \"freeze\",\n      \"manager\": \"manager\",\n      \"metadataHash\": \"metadata-hash\",\n      \"name\": \"name\",\n      \"reserve\": \"reserve\",\n      \"total\": \"total\",\n      \"unitName\": \"unit-name\",\n      \"url\": \"url\"\n    };\n  }\n\n}\n\nclass Account extends base.BaseModel {\n  constructor({\n    address,\n    amount,\n    amountWithoutPendingRewards,\n    appsLocalState,\n    appsTotalSchema,\n    assets,\n    createdApps,\n    createdAssets,\n    participation,\n    pendingRewards,\n    rewardBase,\n    rewards,\n    round,\n    status,\n    sigType,\n    authAddr\n  }) {\n    super();\n    this.address = address;\n    this.amount = amount;\n    this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n    this.appsLocalState = appsLocalState;\n    this.appsTotalSchema = appsTotalSchema;\n    this.assets = assets;\n    this.createdApps = createdApps;\n    this.createdAssets = createdAssets;\n    this.participation = participation;\n    this.pendingRewards = pendingRewards;\n    this.rewardBase = rewardBase;\n    this.rewards = rewards;\n    this.round = round;\n    this.status = status;\n    this.sigType = sigType;\n    this.authAddr = authAddr;\n    this.attribute_map = {\n      \"address\": \"address\",\n      \"amount\": \"amount\",\n      \"amountWithoutPendingRewards\": \"amount-without-pending-rewards\",\n      \"appsLocalState\": \"apps-local-state\",\n      \"appsTotalSchema\": \"apps-total-schema\",\n      \"assets\": \"assets\",\n      \"createdApps\": \"created-apps\",\n      \"createdAssets\": \"created-assets\",\n      \"participation\": \"participation\",\n      \"pendingRewards\": \"pending-rewards\",\n      \"rewardBase\": \"reward-base\",\n      \"rewards\": \"rewards\",\n      \"round\": \"round\",\n      \"status\": \"status\",\n      \"sigType\": \"sig-type\",\n      \"authAddr\": \"auth-addr\"\n    };\n  }\n\n}\n\nmodule.exports = {\n  DryrunRequest,\n  DryrunSource,\n  Account,\n  Application,\n  ApplicationParams,\n  Asset,\n  AssetParams,\n  AssetHolding,\n  ApplicationLocalStates,\n  ApplicationLocalState,\n  ApplicationStateSchema,\n  TealKeyValue,\n  TealValue\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/algod/models/types.js"],"names":["base","require","DryrunRequest","BaseModel","constructor","txns","accounts","apps","protocolVersion","round","latestTimestamp","sources","attribute_map","DryrunSource","fieldName","source","txnIndex","appIndex","Application","id","params","ApplicationParams","creator","approvalProgram","clearStateProgram","localStateSchema","globalStateSchema","globalState","ApplicationStateSchema","numUint","numByteSlice","ApplicationLocalStates","state","ApplicationLocalState","schema","keyValue","TealKeyValue","key","value","TealValue","type","bytes","uint","AssetHolding","amount","assetId","isFrozen","Asset","index","AssetParams","clawback","decimals","defaultFrozen","freeze","manager","metadataHash","name","reserve","total","unitName","url","Account","address","amountWithoutPendingRewards","appsLocalState","appsTotalSchema","assets","createdApps","createdAssets","participation","pendingRewards","rewardBase","rewards","status","sigType","authAddr","module","exports"],"mappings":"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","sourcesContent":["const base = require(\"./base\");\n/**\n * Request data type for dryrun endpoint.\n * Given the Transactions and simulated ledger state upload,\n * run TEAL scripts and return debugging information.\n */\nclass DryrunRequest extends base.BaseModel {\n    /**\n     * Creates a new <code>DryrunRequest</code> object.\n     * @param txns {Array.<str>}\n     * @param accounts {Array.<Account>}\n     * @param apps {Array.<DryrunApp>}\n     * @param protocolVersion {String} ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.\n     * @param round {Number} Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.\n     * @param latestTimestamp {Number} LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.\n     * @param sources {Array.<DryrunSource>}\n     */\n\n    constructor({txns, accounts, apps, protocolVersion, round, latestTimestamp, sources}) {\n        super();\n        this.txns = txns;\n        this.accounts = accounts;\n        this.apps = apps;\n        this.protocolVersion = protocolVersion;\n        this.round = round;\n        this.latestTimestamp = latestTimestamp;\n        this.sources = sources;\n\n        this.attribute_map = {\n            \"txns\": \"txns\",\n            \"accounts\": \"accounts\",\n            \"apps\": \"apps\",\n            \"protocolVersion\": \"protocol-version\",\n            \"round\": \"round\",\n            \"latestTimestamp\": \"latest-timestamp\",\n            \"sources\": \"sources\"\n        };\n    }\n}\n\n/**\n * DryrunSource is TEAL source text that gets uploaded,\n * compiled, and inserted into transactions or application state.\n */\nclass DryrunSource extends base.BaseModel {\n    /**\n     * Creates a new <code>DryrunSource</code> object.\n     * @param fieldName {String} FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].\n     * @param source {String}\n     * @param txnIndex {Number}\n     * @param appIndex {Number}\n     */\n    constructor(fieldName, source, txnIndex, appIndex) {\n        super();\n        this.fieldName = fieldName;\n        this.source = source;\n        this.txnIndex = txnIndex;\n        this.appIndex = appIndex;\n\n        this.attribute_map = {\n            \"fieldName\": \"field-name\",\n            \"source\": \"source\",\n            \"txnIndex\": \"txn-index\",\n            \"appIndex\": \"app-index\"\n        };\n    }\n}\n\nclass Application extends base.BaseModel {\n    constructor(id, params) {\n        super();\n        this.id = id;\n        this.params = params;\n\n        this.attribute_map = {\n            \"id\": \"id\",\n            \"params\": \"params\"\n        };\n    }\n}\n\nclass ApplicationParams extends base.BaseModel {\n    constructor({\n        creator, approvalProgram, clearStateProgram,\n        localStateSchema, globalStateSchema, globalState\n    }) {\n        super();\n        this.creator = creator;\n        this.approvalProgram = approvalProgram;\n        this.clearStateProgram = clearStateProgram;\n        this.localStateSchema = localStateSchema;\n        this.globalStateSchema = globalStateSchema;\n        this.globalState = globalState;\n\n        this.attribute_map = {\n            \"creator\": \"creator\",\n            \"approvalProgram\": \"approval-program\",\n            \"clearStateProgram\": \"clear-state-program\",\n            \"localStateSchema\": \"local-state-schema\",\n            \"globalStateSchema\": \"global-state-schema\",\n            \"globalState\": \"global-state\"\n        };\n    }\n}\n\nclass ApplicationStateSchema extends base.BaseModel {\n    constructor(numUint, numByteSlice) {\n        super();\n        this.numUint = numUint;\n        this.numByteSlice = numByteSlice;\n\n        this.attribute_map = {\n            \"numUint\": \"num-uint\",\n            \"numByteSlice\": \"num-byte-slice\"\n        };\n    }\n}\n\nclass ApplicationLocalStates extends base.BaseModel {\n    constructor(id, state) {\n        super();\n        this.id = id;\n        this.state = state;\n\n        this.attribute_map = {\n            \"id\": \"id\",\n            \"state\": \"state\"\n        };\n    }\n}\n\nclass ApplicationLocalState extends base.BaseModel {\n    constructor(schema, keyValue) {\n        super();\n        this.schema = schema;\n        this.keyValue = keyValue;\n\n        this.attribute_map = {\n            \"schema\": \"schema\",\n            \"keyValue\": \"key-value\"\n        };\n    }\n}\n\nclass TealKeyValue extends base.BaseModel {\n    constructor(key, value) {\n        super();\n        this.key = key;\n        this.value = value;\n\n        this.attribute_map = {\n            \"key\": \"key\",\n            \"value\": \"value\"\n        };\n    }\n}\n\nclass TealValue extends base.BaseModel {\n    constructor(type, bytes, uint) {\n        super();\n        this.type = type;\n        this.bytes = bytes;\n        this.uint = uint;\n\n        this.attribute_map = {\n            \"type\": \"type\",\n            \"bytes\": \"bytes\",\n            \"uint\": \"uint\"\n        };\n    }\n}\n\nclass AssetHolding extends base.BaseModel {\n    constructor(amount, assetId, creator, isFrozen) {\n        this.amount = amount;\n        this.assetId = assetId;\n        this.creator = creator;\n        this.isFrozen = isFrozen;\n\n        this.attribute_map = {\n            \"amount\": \"amount\",\n            \"assetId\": \"asset-id\",\n            \"creator\": \"creator\",\n            \"isFrozen\": \"is-frozen\"\n        };\n    }\n}\n\nclass Asset extends base.BaseModel {\n    constructor(index, params) {\n        this.amount = index;\n        this.assetId = params;\n\n        this.attribute_map = {\n            \"index\": \"index\",\n            \"params\": \"params\"\n        };\n    }\n}\n\nclass AssetParams extends base.BaseModel {\n    constructor({\n        clawback, creator, decimals, defaultFrozen, freeze, manager,\n        metadataHash, name, reserve, total, unitName, url\n    }) {\n        this.clawback = clawback;\n        this.creator = creator;\n        this.decimals = decimals;\n        this.defaultFrozen = defaultFrozen;\n        this.freeze = freeze;\n        this.manager = manager;\n        this.metadataHash = metadataHash;\n        this.name = name;\n        this.reserve = reserve;\n        this.total = total;\n        this.unitName = unitName;\n        this.url = url;\n\n        this.attribute_map = {\n            \"clawback\": \"clawback\",\n            \"creator\": \"creator\",\n            \"decimals\": \"decimals\",\n            \"defaultFrozen\": \"default-frozen\",\n            \"freeze\": \"freeze\",\n            \"manager\": \"manager\",\n            \"metadataHash\": \"metadata-hash\",\n            \"name\": \"name\",\n            \"reserve\": \"reserve\",\n            \"total\": \"total\",\n            \"unitName\": \"unit-name\",\n            \"url\": \"url\"\n        };\n    }\n}\n\nclass Account extends base.BaseModel {\n    constructor({\n        address, amount, amountWithoutPendingRewards, appsLocalState, appsTotalSchema,\n        assets, createdApps, createdAssets, participation,\n        pendingRewards, rewardBase, rewards,\n        round, status, sigType, authAddr\n    }) {\n        super();\n        this.address = address;\n        this.amount = amount;\n        this.amountWithoutPendingRewards = amountWithoutPendingRewards;\n        this.appsLocalState = appsLocalState;\n        this.appsTotalSchema = appsTotalSchema;\n        this.assets = assets;\n        this.createdApps = createdApps;\n        this.createdAssets = createdAssets;\n        this.participation = participation;\n        this.pendingRewards = pendingRewards;\n        this.rewardBase = rewardBase;\n        this.rewards = rewards;\n        this.round = round;\n        this.status = status;\n        this.sigType = sigType;\n        this.authAddr = authAddr;\n\n        this.attribute_map = {\n            \"address\": \"address\",\n            \"amount\": \"amount\",\n            \"amountWithoutPendingRewards\": \"amount-without-pending-rewards\",\n            \"appsLocalState\": \"apps-local-state\",\n            \"appsTotalSchema\": \"apps-total-schema\",\n            \"assets\": \"assets\",\n            \"createdApps\": \"created-apps\",\n            \"createdAssets\": \"created-assets\",\n            \"participation\": \"participation\",\n            \"pendingRewards\": \"pending-rewards\",\n            \"rewardBase\": \"reward-base\",\n            \"rewards\": \"rewards\",\n            \"round\": \"round\",\n            \"status\": \"status\",\n            \"sigType\": \"sig-type\",\n            \"authAddr\": \"auth-addr\"\n        };\n    }\n}\n\nmodule.exports = {\n    DryrunRequest, DryrunSource,\n    Account,\n    Application, ApplicationParams,\n    Asset, AssetParams,\n    AssetHolding, ApplicationLocalStates, ApplicationLocalState, ApplicationStateSchema,\n    TealKeyValue, TealValue,\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const encoding = require('../../../encoding/encoding');\n\nclass PendingTransactionInformation {\n  constructor(c, txid) {\n    this.c = c;\n    this.txid = txid;\n    this.query = {};\n    this.query[\"format\"] = \"msgpack\";\n  }\n  /**\n   * returns the transaction information for a specific txid of a pending transaction\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    let res = await this.c.get(\"/v2/transactions/pending/\" + this.txid, this.query, headers);\n\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n\n    return undefined;\n  }\n\n  // max sets the maximum number of txs to return\n  max(max) {\n    this.query[\"max\"] = max;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  PendingTransactionInformation\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/algod/pendingTransactionInformation.js"],"names":["encoding","require","PendingTransactionInformation","constructor","c","txid","query","do","headers","res","get","body","byteLength","decode","undefined","max","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAMC,6BAAN,CAAoC;AACnCC,EAAAA,WAAW,CAACC,CAAD,EAAIC,IAAJ,EAAU;AACpB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKA,KAAL,CAAW,QAAX,IAAuB,SAAvB;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMC,EAAN,CAASC,OAAO,GAAC,EAAjB,EAAoB;AACnB,QAAIC,GAAG,GAAG,MAAM,KAAKL,CAAL,CAAOM,GAAP,CAAW,8BAA8B,KAAKL,IAA9C,EAAoD,KAAKC,KAAzD,EAAgEE,OAAhE,CAAhB;;AACA,QAAIC,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACE,IAAJ,CAASC,UAAT,GAAsB,CAAtC,EAAyC;AACxC,aAAOZ,QAAQ,CAACa,MAAT,CAAgBJ,GAAG,CAACE,IAApB,CAAP;AACA;;AACD,WAAOG,SAAP;AACA;;AAED;AACAC,EAAAA,GAAG,CAACA,GAAD,EAAK;AACP,SAAKT,KAAL,CAAW,KAAX,IAAoBS,GAApB;AACA,WAAO,IAAP;AACA;;AAzBkC;;AA4BpCC,MAAM,CAACC,OAAP,GAAiB;AAAEf,EAAAA;AAAF,CAAjB","sourcesContent":["const encoding = require('../../../encoding/encoding')\n\nclass PendingTransactionInformation {\n\tconstructor(c, txid) {\n\t\tthis.c = c;\n\t\tthis.txid = txid;\n\t\tthis.query = {};\n\t\tthis.query[\"format\"] = \"msgpack\";\n\t}\n\n\t/**\n\t * returns the transaction information for a specific txid of a pending transaction\n\t * @param headers, optional\n\t * @returns {Promise<*>}\n\t */\n\tasync do(headers={}){\n\t\tlet res = await this.c.get(\"/v2/transactions/pending/\" + this.txid, this.query, headers);\n\t\tif (res.body && res.body.byteLength > 0) {\n\t\t\treturn encoding.decode(res.body);\n\t\t}\n\t\treturn undefined;\n\t};\n\n\t// max sets the maximum number of txs to return\n\tmax(max){\n\t\tthis.query[\"max\"] = max;\n\t\treturn this;\n\t}\n}\n\nmodule.exports = { PendingTransactionInformation };\n"]},"metadata":{},"sourceType":"script"}
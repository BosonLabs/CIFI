{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Compress from \"react-image-file-resizer\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst con = async () => {//   await AlgoSigner.connect();\n  // let client = new algosdk.Algodv2(...);\n  // let testNetParams = await client.getTransactionParams().do();\n  // testNetParams.flatFee = true;\n  // let tx1 = new algosdk.Transaction({\n  //   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // let tx2 = new algosdk.Transaction({\n  //   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // algosdk.assignGroupID([tx1, tx2]);\n  // let sdkTxs = [tx1, tx2];\n  // let base64Txs = sdkTxs.map((tx) => {\n  //   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\n  // });\n  // let walletTxs = base64Txs.map((b64) => {\n  //   return { tx: b64 };\n  // });\n  // let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\n  // let sendResult = await client\n  //   .sendRawTransaction(\n  //     signedTxs.map((signedTx) =>\n  //       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\n  //     )\n  //   )\n  //   .do();\n};\n\nconst App = () => {\n  _s4();\n\n  const [tid, setId] = useState(\"\");\n  const [tname, setName] = useState(\"\");\n  const [currentSymbol, setCurrentSymbol] = useState('ETH');\n  const [buffer, setBuffer] = useState(\"\");\n\n  const changeFruit = newFruit => {\n    setCurrentSymbol(newFruit);\n  };\n\n  const captureFile = event => {\n    event.stopPropagation();\n    event.preventDefault();\n    const file = event.target.files[0];\n    let reader = new window.FileReader();\n    Compress.imageFileResizer(file, 300, 300, 'JPEG', 10, 0, uri => {\n      console.log(\"iuri\", uri);\n      setImg(uri);\n    }, 'base64');\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () => convertToBuffer(reader);\n  };\n\n  const convertToBuffer = async reader => {\n    //file is converted to a buffer for upload to IPFS\n    const buffer = await Buffer.from(reader.result); //set this buffer -using es6 syntax\n\n    setBuffer(buffer);\n  };\n\n  const waitForConfirmation = async function (algodclient, txId) {\n    let response = await algodclient.status().do();\n    let lastround = response[\"last-round\"];\n\n    while (true) {\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n        //Got the completed Transaction\n        console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n        break;\n      }\n\n      lastround++;\n      await algodclient.statusAfterBlock(lastround).do();\n    }\n  }; // Function used to print created asset for account and assetid\n\n\n  const printCreatedAsset = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n    let accountInfo = await algodclient.accountInformation(account).do();\n\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n      if (scrutinizedAsset['index'] === assetid) {\n        console.log(\"AssetID = \", scrutinizedAsset['index']);\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmsprint\", myparms);\n        break;\n      }\n    }\n  };\n\n  const Rasset = async () => {\n    let AssId = '';\n\n    const algosdk = require('algosdk');\n\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    let accc = recoveredAccount1.addr;\n    console.log(\"cacc\", accc);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n\n    let addr = recoveredAccount1.addr; //'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    //recoveredAccount1.addr;\n    // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"ASA\"; // Friendly name of the asset    \n\n    let assetName = \"demoRam\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n\n    let reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can freeze or unfreeze user asset holdings \n\n    let freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n\n    let clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n    console.log(\"txnn\", txn);\n    let rawSignedTxn = txn.signTxn(recoveredAccount1.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    let getre = await waitForConfirmation(algodclient, tx.txId);\n    console.log(\"result\", getre); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n    console.log(\"Cassptx\", ptx);\n    console.log(\"Cass\", assetID);\n    let result2 = await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\n    console.log(\"resul\", result2);\n    let accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"leng\", accountInfos['created-assets'].length);\n\n    for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\n      console.log(\"scr\", scrutinizedAsset);\n\n      if (scrutinizedAsset['index'] === assetID) {\n        console.log(\"AssetID\", scrutinizedAsset['index']);\n        AssId = scrutinizedAsset['index'];\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parmss\", myparms);\n        break;\n      }\n    } //console.log(\"ab\",ab);\n\n\n    let accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']); // Opting in to transact with the new asset\n    // Allow accounts that want recieve the new asset\n    // Have to opt in. To do this they send an asset transfer\n    // of the new asset to themseleves \n    // In this example we are setting up the 3rd recovered account to \n    // receive the new asset\n    // let account13_mnemonic='gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\n    // var recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic);\n    // let senders = recoveredAccount13.addr;\n    // let recipient = senders;\n    // console.log(\"senders\",senders)\n    // // We set revocationTarget to undefined as \n    // // This is not a clawback operation\n    // let revocationTarget = undefined;\n    // // CloseReaminerTo is set to undefined as\n    // // we are not closing out an asset\n    // let closeRemainderTo = undefined;\n    // // We are sending 0 assets\n    // let amount = 0;\n    // let asId='15884520';\n    // console.log(\"para\",params)\n    // console.log(\"assid\",asId)\n    // // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\n    // let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(senders, recipient, closeRemainderTo, revocationTarget,\n    // amount, note, asId, params);\n    // // Must be signed by the account wishing to opt in to the asset    \n    // rawSignedTxn = opttxn.signTxn(recoveredAccount13.sk);\n    // let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\n    // console.log(\"Transaction : \" + opttx.txId);\n    // // wait for transaction to be confirmed\n    // //await waitForConfirmation(algodclient, opttx.txId);\n    // //You should now see the new asset listed in the account information\n    // console.log(\"Account 3 = \" + recoveredAccount13.addr);\n    // //await printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: 'white',\n          height: '600px',\n          width: '500px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"CREATE NFT-TOKEN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: Rasset,\n          id: \"create-course-form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"name\",\n            children: \"NFT  Name    \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 1\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"nameid\",\n            type: \"text\",\n            name: \"tname\",\n            required: true,\n            onChange: event => setName(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 5\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"symbol\",\n            children: \"NFT  Symbol    \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 3\n          }, this), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"select\", {\n            style: {\n              backgroundColor: 'white',\n              height: '20px',\n              width: '160px'\n            },\n            onChange: event => changeFruit(event.target.value),\n            value: currentSymbol,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ETH\",\n              children: \"ETH     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"BNB\",\n              children: \"BNB     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 7\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ALGORAND\",\n              children: \"ALGORAND  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 7\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            for: \"id\",\n            children: [\"NFT Token-Id   \", ' ', \"   \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 1\n          }, this), \" \\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"input\", {\n            id: \"idid\",\n            type: \"text\",\n            name: \"tid\",\n            required: true,\n            onChange: event => setId(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 528,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            children: [\"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(\"label\", {\n              for: \"images\",\n              children: \"Choose Your Image     \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 61\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              style: {\n                backgroundColor: 'white',\n                height: '22px',\n                width: '230px'\n              },\n              name: \"tfile\",\n              id: \"fileid\",\n              type: \"file\",\n              onChange: captureFile,\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 6\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 6\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 1\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Create NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: Rasset,\n          children: \"Balance\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 576,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s4(App, \"fYWm5Bh5sdJ3hf/lZyApd+sTQQU=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","Compress","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","con","App","tid","setId","tname","setName","currentSymbol","setCurrentSymbol","buffer","setBuffer","changeFruit","newFruit","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","window","FileReader","imageFileResizer","uri","setImg","readAsArrayBuffer","onloadend","convertToBuffer","Buffer","from","waitForConfirmation","algodclient","txId","response","status","do","lastround","pendingInfo","pendingTransactionInformation","statusAfterBlock","printCreatedAsset","account","assetid","accountInfo","accountInformation","idx","length","scrutinizedAsset","myparms","undefined","Rasset","AssId","algosdk","require","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","accc","addr","note","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","baseServer","port","token","Algodv2","params","getTransactionParams","fee","flatFee","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","tx","sendRawTransaction","assetID","getre","ptx","result2","accountInfos","backgroundColor","height","width","value"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Compress from \"react-image-file-resizer\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\nconst con=async()=>{\r\n\r\n\r\n//   await AlgoSigner.connect();\r\n// let client = new algosdk.Algodv2(...);\r\n\r\n// let testNetParams = await client.getTransactionParams().do();\r\n// testNetParams.flatFee = true;\r\n\r\n// let tx1 = new algosdk.Transaction({\r\n//   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// let tx2 = new algosdk.Transaction({\r\n//   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// algosdk.assignGroupID([tx1, tx2]);\r\n\r\n// let sdkTxs = [tx1, tx2];\r\n// let base64Txs = sdkTxs.map((tx) => {\r\n//   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\r\n// });\r\n// let walletTxs = base64Txs.map((b64) => {\r\n//   return { tx: b64 };\r\n// });\r\n\r\n// let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\r\n\r\n// let sendResult = await client\r\n//   .sendRawTransaction(\r\n//     signedTxs.map((signedTx) =>\r\n//       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\r\n//     )\r\n//   )\r\n//   .do();\r\n  \r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [tid,setId] = useState(\"\");\r\n\r\n  const [tname,setName] = useState(\"\");\r\n\r\n  const [currentSymbol, setCurrentSymbol] = useState('ETH')\r\n\r\n  const [buffer,setBuffer] = useState(\"\");\r\n  \r\n  const changeFruit = (newFruit) => {\r\n    setCurrentSymbol(newFruit)\r\n  }\r\n\r\n\r\n  const captureFile =(event) => {\r\n    event.stopPropagation()\r\n    event.preventDefault()\r\n    const file = event.target.files[0]\r\n    let reader = new window.FileReader()\r\n\r\n    Compress.imageFileResizer(file, 300, 300, 'JPEG', 10, 0,\r\n    uri => {\r\n      console.log(\"iuri\",uri)\r\nsetImg(uri)\r\n    },\r\n    'base64'\r\n    );\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => convertToBuffer(reader);    \r\n  };\r\nconst convertToBuffer = async(reader) => {\r\n  //file is converted to a buffer for upload to IPFS\r\n    const buffer = await Buffer.from(reader.result);\r\n  //set this buffer -using es6 syntax\r\n    setBuffer(buffer);\r\n};\r\n\r\n  \r\n\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n  let response = await algodclient.status().do();\r\n  let lastround = response[\"last-round\"];\r\n  while (true) {\r\n      const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n      if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n          //Got the completed Transaction\r\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n          break;\r\n      }\r\n      lastround++;\r\n      await algodclient.statusAfterBlock(lastround).do();\r\n  }\r\n};\r\n\r\n\r\n// Function used to print created asset for account and assetid\r\nconst printCreatedAsset = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n  for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] === assetid) {\r\n          console.log(\"AssetID = \",scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmsprint\",myparms);\r\n          break;\r\n      }\r\n  }\r\n};\r\n\r\nconst Rasset=async()=>{\r\n\r\nlet AssId='';\r\n\r\nconst algosdk = require('algosdk');\r\n\r\n\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\nlet accc=recoveredAccount1.addr;\r\n\r\nconsole.log(\"cacc\",accc)\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n\r\nlet addr = recoveredAccount1.addr;\r\n//'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n//recoveredAccount1.addr;\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"ASA\";\r\n// Friendly name of the asset    \r\nlet assetName = \"demoRam\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\nlet reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can freeze or unfreeze user asset holdings \r\nlet freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\nlet clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n\r\n//recoveredAccount2.addr;\r\n\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n\r\n\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n\r\n    console.log(\"txnn\",txn);    \r\n\r\nlet rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nlet getre=await waitForConfirmation(algodclient, tx.txId);\r\nconsole.log(\"result\",getre);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n\r\nconsole.log(\"Cassptx\",ptx);\r\nconsole.log(\"Cass\",assetID);\r\n\r\nlet result2=await printCreatedAsset(algodclient, recoveredAccount1.addr, assetID);\r\n\r\nconsole.log(\"resul\",result2);\r\n\r\nlet accountInfos = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\nconsole.log(\"leng\",accountInfos['created-assets'].length);\r\n  for (let idx = 0; idx < accountInfos['created-assets'].length; idx++) {\r\n\r\n      let scrutinizedAsset = accountInfos['created-assets'][idx];\r\n      console.log(\"scr\",scrutinizedAsset);\r\n      if (scrutinizedAsset['index'] === assetID) \r\n      {\r\n          console.log(\"AssetID\",scrutinizedAsset['index']);\r\n          AssId=scrutinizedAsset['index']\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parmss\" , myparms);\r\n          break;\r\n      }\r\n  }\r\n\r\n//console.log(\"ab\",ab);\r\n\r\n\r\nlet accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\n\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n\r\n\r\n  // Opting in to transact with the new asset\r\n// Allow accounts that want recieve the new asset\r\n// Have to opt in. To do this they send an asset transfer\r\n// of the new asset to themseleves \r\n// In this example we are setting up the 3rd recovered account to \r\n// receive the new asset\r\n\r\n// let account13_mnemonic='gallery relief plastic pen hidden outer artist shrimp pioneer body icon banner siege palace prefer wedding path minor moon mosquito among cloud dwarf about history';\r\n\r\n// var recoveredAccount13 = algosdk.mnemonicToSecretKey(account13_mnemonic);\r\n\r\n// let senders = recoveredAccount13.addr;\r\n// let recipient = senders;\r\n// console.log(\"senders\",senders)\r\n// // We set revocationTarget to undefined as \r\n// // This is not a clawback operation\r\n// let revocationTarget = undefined;\r\n// // CloseReaminerTo is set to undefined as\r\n// // we are not closing out an asset\r\n// let closeRemainderTo = undefined;\r\n// // We are sending 0 assets\r\n// let amount = 0;\r\n\r\n// let asId='15884520';\r\n\r\n// console.log(\"para\",params)\r\n// console.log(\"assid\",asId)\r\n// // signing and sending \"txn\" allows sender to begin accepting asset specified by creator and index\r\n// let opttxn = algosdk.makeAssetTransferTxnWithSuggestedParams(senders, recipient, closeRemainderTo, revocationTarget,\r\n// amount, note, asId, params);\r\n// // Must be signed by the account wishing to opt in to the asset    \r\n// rawSignedTxn = opttxn.signTxn(recoveredAccount13.sk);\r\n// let opttx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\n// console.log(\"Transaction : \" + opttx.txId);\r\n// // wait for transaction to be confirmed\r\n// //await waitForConfirmation(algodclient, opttx.txId);\r\n// //You should now see the new asset listed in the account information\r\n// console.log(\"Account 3 = \" + recoveredAccount13.addr);\r\n// //await printAssetHolding(algodclient, recoveredAccount13.addr, assetID);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n  \r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n    <div>\r\n\r\n\r\n    <div style={{backgroundColor:'white',height:'600px',width:'500px'}}>\r\n\r\n  \r\n\r\n\r\n<br></br>\r\n<h1>CREATE NFT-TOKEN</h1>\r\n\r\n<br></br>\r\n\r\n<form onSubmit={Rasset} id=\"create-course-form\" >\r\n\r\n<label for=\"name\">NFT  Name    </label>\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n<input\r\nid=\"nameid\"\r\ntype='text'\r\nname=\"tname\"\r\nrequired\r\nonChange={event => setName(event.target.value)}\r\n\r\n/>\r\n<br></br>\r\n    <br></br>\r\n\r\n  <label for=\"symbol\">NFT  Symbol    </label>\r\n  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n\r\n  <select style={{backgroundColor:'white',height:'20px',width:'160px'}}\r\n      onChange={(event) => changeFruit(event.target.value)}\r\n      value={currentSymbol}>\r\n\r\n      <option value=\"ETH\">ETH     </option> \r\n      <option value=\"BNB\">BNB     </option>\r\n      <option value=\"ALGORAND\">ALGORAND  </option>\r\n    </select>\r\n{/* <input\r\nid=\"symbolid\"\r\ntype='text'\r\nname=\"tsymbol\"\r\nrequired\r\nonChange={event => settSymbol( event.target.value)}\r\n\r\n/> */}\r\n\r\n<br></br>\r\n<br></br>\r\n\r\n\r\n<label for=\"id\">NFT Token-Id   {' '}   </label> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n\r\n<input\r\nid=\"idid\"\r\ntype='text'\r\nname=\"tid\"\r\nrequired\r\nonChange={event => setId( event.target.value)}\r\n\r\n/>\r\n\r\n<br></br>\r\n<br></br>\r\n\r\n\r\n<form>\r\n\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<label for=\"images\">Choose Your Image     </label>\r\n          \r\n          <input style={{backgroundColor:'white',height:'22px',width:'230px'}}\r\n           name=\"tfile\" id=\"fileid\" type = \"file\" onChange = {captureFile} required />\r\n    \r\n           {/* <button \r\n           type=\"submit\"> \r\n           Upload Image NFT\r\n           </button> */}\r\n     <br></br>\r\n     <br></br>\r\n     <br></br>\r\n</form>\r\n\r\n\r\n\r\n{/* {isLoading ? \"\":\r\n            (<button  */}\r\n            <button\r\n              type=\"submit\"> \r\n              Create NFT\r\n              </button>\r\n {/* )} */}\r\n\r\n\r\n\r\n\r\n{/* <button \r\n\r\n\r\n\r\n\r\n           type=\"submit\"> \r\n           Upload and Create NFT\r\n\r\n           </button> */}\r\n\r\n</form>\r\n\r\n\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {Rasset}>\r\n                  {/* TransferAss */}\r\n               Balance\r\n              </button>\r\n              </div>\r\n\r\n              </div>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
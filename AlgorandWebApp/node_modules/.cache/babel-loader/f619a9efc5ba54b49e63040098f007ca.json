{"ast":null,"code":"const client = require('../../client');\n\nconst ai = require('../algod/accountInformation');\n\nconst blk = require('../algod/block');\n\nconst compile = require('./compile');\n\nconst dryrun = require('./dryrun');\n\nconst gasbid = require('./getAssetByID');\n\nconst gapbid = require('./getApplicationByID');\n\nconst hc = require('../algod/healthCheck');\n\nconst pti = require('../algod/pendingTransactionInformation');\n\nconst pt = require('../algod/pendingTransactions');\n\nconst ptba = require('../algod/pendingTransactionsByAddress');\n\nconst srt = require('../algod/sendRawTransaction');\n\nconst status = require('../algod/status');\n\nconst sab = require('../algod/statusAfterBlock');\n\nconst sp = require('../algod/suggestedParams');\n\nconst supply = require('../algod/supply');\n\nconst versions = require('../algod/versions');\n\nclass AlgodClient {\n  constructor(token = '', baseServer = \"http://r2.algorand.network\", port = 4180, headers = {}) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n\n    if (typeof tokenHeader == 'string') {\n      tokenHeader = {\n        \"X-Algo-API-Token\": tokenHeader\n      };\n    } // Get client\n\n\n    let c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n    this.healthCheck = function () {\n      return new hc.HealthCheck(c);\n    };\n\n    this.versionsCheck = function () {\n      return new versions.Versions(c);\n    };\n\n    this.sendRawTransaction = function (stx_or_stxs) {\n      return new srt.SendRawTransaction(c, stx_or_stxs);\n    };\n\n    this.accountInformation = function (account) {\n      return new ai.AccountInformation(c, account);\n    };\n\n    this.block = function (roundNumber) {\n      return new blk.Block(c, roundNumber);\n    };\n\n    this.pendingTransactionInformation = function (txid) {\n      return new pti.PendingTransactionInformation(c, txid);\n    };\n\n    this.pendingTransactionsInformation = function () {\n      return new pt.PendingTransactions(c);\n    };\n\n    this.pendingTransactionByAddress = function (address) {\n      return new ptba.PendingTransactionsByAddress(c, address);\n    };\n\n    this.status = function () {\n      return new status.Status(c);\n    };\n\n    this.statusAfterBlock = function (round) {\n      return new sab.StatusAfterBlock(c, round);\n    };\n\n    this.getTransactionParams = function () {\n      return new sp.SuggestedParams(c);\n    };\n\n    this.supply = function () {\n      return new supply.Supply(c);\n    };\n\n    this.compile = function (source) {\n      return new compile.Compile(c, source);\n    };\n\n    this.dryrun = function (dr) {\n      return new dryrun.Dryrun(c, dr);\n    };\n\n    this.getAssetByID = function (index) {\n      return new gasbid.GetAssetByID(c, index);\n    };\n\n    this.getApplicationByID = function (index) {\n      return new gapbid.GetApplicationByID(c, index);\n    };\n  }\n\n}\n\nmodule.exports = {\n  AlgodClient\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/algod/algod.js"],"names":["client","require","ai","blk","compile","dryrun","gasbid","gapbid","hc","pti","pt","ptba","srt","status","sab","sp","supply","versions","AlgodClient","constructor","token","baseServer","port","headers","tokenHeader","c","HTTPClient","healthCheck","HealthCheck","versionsCheck","Versions","sendRawTransaction","stx_or_stxs","SendRawTransaction","accountInformation","account","AccountInformation","block","roundNumber","Block","pendingTransactionInformation","txid","PendingTransactionInformation","pendingTransactionsInformation","PendingTransactions","pendingTransactionByAddress","address","PendingTransactionsByAddress","Status","statusAfterBlock","round","StatusAfterBlock","getTransactionParams","SuggestedParams","Supply","source","Compile","dr","Dryrun","getAssetByID","index","GetAssetByID","getApplicationByID","GetApplicationByID","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,cAAD,CAAtB;;AACA,MAAMC,EAAE,GAAGD,OAAO,CAAC,6BAAD,CAAlB;;AACA,MAAME,GAAG,GAAGF,OAAO,CAAC,gBAAD,CAAnB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMK,MAAM,GAAGL,OAAO,CAAC,gBAAD,CAAtB;;AACA,MAAMM,MAAM,GAAGN,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMO,EAAE,GAAGP,OAAO,CAAC,sBAAD,CAAlB;;AACA,MAAMQ,GAAG,GAAGR,OAAO,CAAC,wCAAD,CAAnB;;AACA,MAAMS,EAAE,GAAGT,OAAO,CAAC,8BAAD,CAAlB;;AACA,MAAMU,IAAI,GAAGV,OAAO,CAAC,uCAAD,CAApB;;AACA,MAAMW,GAAG,GAAGX,OAAO,CAAC,6BAAD,CAAnB;;AACA,MAAMY,MAAM,GAAGZ,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMa,GAAG,GAAGb,OAAO,CAAC,2BAAD,CAAnB;;AACA,MAAMc,EAAE,GAAGd,OAAO,CAAC,0BAAD,CAAlB;;AACA,MAAMe,MAAM,GAAGf,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMgB,QAAQ,GAAGhB,OAAO,CAAC,mBAAD,CAAxB;;AAEA,MAAMiB,WAAN,CAAkB;AACdC,EAAAA,WAAW,CAACC,KAAK,GAAG,EAAT,EAAaC,UAAU,GAAG,4BAA1B,EAAwDC,IAAI,GAAG,IAA/D,EAAqEC,OAAO,GAAG,EAA/E,EAAmF;AAC1F;AACA,QAAIC,WAAW,GAAGJ,KAAlB;;AACA,QAAI,OAAQI,WAAR,IAAwB,QAA5B,EAAsC;AAClCA,MAAAA,WAAW,GAAG;AAAC,4BAAoBA;AAArB,OAAd;AACH,KALyF,CAO1F;;;AACA,QAAIC,CAAC,GAAG,IAAIzB,MAAM,CAAC0B,UAAX,CAAsBF,WAAtB,EAAmCH,UAAnC,EAA+CC,IAA/C,EAAqDC,OAArD,CAAR;;AAEA,SAAKI,WAAL,GAAmB,YAAY;AAC3B,aAAO,IAAInB,EAAE,CAACoB,WAAP,CAAmBH,CAAnB,CAAP;AACH,KAFD;;AAIA,SAAKI,aAAL,GAAqB,YAAY;AAC7B,aAAO,IAAIZ,QAAQ,CAACa,QAAb,CAAsBL,CAAtB,CAAP;AACH,KAFD;;AAIA,SAAKM,kBAAL,GAA0B,UAASC,WAAT,EAAsB;AAC5C,aAAO,IAAIpB,GAAG,CAACqB,kBAAR,CAA2BR,CAA3B,EAA8BO,WAA9B,CAAP;AACH,KAFD;;AAIA,SAAKE,kBAAL,GAA0B,UAASC,OAAT,EAAkB;AACxC,aAAO,IAAIjC,EAAE,CAACkC,kBAAP,CAA0BX,CAA1B,EAA6BU,OAA7B,CAAP;AACH,KAFD;;AAIA,SAAKE,KAAL,GAAa,UAASC,WAAT,EAAsB;AAC/B,aAAO,IAAInC,GAAG,CAACoC,KAAR,CAAcd,CAAd,EAAiBa,WAAjB,CAAP;AACH,KAFD;;AAIA,SAAKE,6BAAL,GAAqC,UAASC,IAAT,EAAe;AAChD,aAAO,IAAIhC,GAAG,CAACiC,6BAAR,CAAsCjB,CAAtC,EAAyCgB,IAAzC,CAAP;AACH,KAFD;;AAIA,SAAKE,8BAAL,GAAsC,YAAW;AAC7C,aAAO,IAAIjC,EAAE,CAACkC,mBAAP,CAA2BnB,CAA3B,CAAP;AACH,KAFD;;AAIA,SAAKoB,2BAAL,GAAmC,UAASC,OAAT,EAAkB;AACjD,aAAO,IAAInC,IAAI,CAACoC,4BAAT,CAAsCtB,CAAtC,EAAyCqB,OAAzC,CAAP;AACH,KAFD;;AAIA,SAAKjC,MAAL,GAAc,YAAW;AACrB,aAAO,IAAIA,MAAM,CAACmC,MAAX,CAAkBvB,CAAlB,CAAP;AACH,KAFD;;AAIA,SAAKwB,gBAAL,GAAwB,UAAUC,KAAV,EAAiB;AACrC,aAAO,IAAIpC,GAAG,CAACqC,gBAAR,CAAyB1B,CAAzB,EAA4ByB,KAA5B,CAAP;AACH,KAFD;;AAIA,SAAKE,oBAAL,GAA4B,YAAY;AACpC,aAAO,IAAIrC,EAAE,CAACsC,eAAP,CAAuB5B,CAAvB,CAAP;AACH,KAFD;;AAIA,SAAKT,MAAL,GAAc,YAAY;AACtB,aAAO,IAAIA,MAAM,CAACsC,MAAX,CAAkB7B,CAAlB,CAAP;AACH,KAFD;;AAIA,SAAKrB,OAAL,GAAe,UAAUmD,MAAV,EAAkB;AAC7B,aAAO,IAAInD,OAAO,CAACoD,OAAZ,CAAoB/B,CAApB,EAAuB8B,MAAvB,CAAP;AACH,KAFD;;AAIA,SAAKlD,MAAL,GAAc,UAAUoD,EAAV,EAAc;AACxB,aAAO,IAAIpD,MAAM,CAACqD,MAAX,CAAkBjC,CAAlB,EAAqBgC,EAArB,CAAP;AACH,KAFD;;AAIA,SAAKE,YAAL,GAAoB,UAAUC,KAAV,EAAiB;AACjC,aAAO,IAAItD,MAAM,CAACuD,YAAX,CAAwBpC,CAAxB,EAA2BmC,KAA3B,CAAP;AACH,KAFD;;AAIA,SAAKE,kBAAL,GAA0B,UAAUF,KAAV,EAAiB;AACvC,aAAO,IAAIrD,MAAM,CAACwD,kBAAX,CAA8BtC,CAA9B,EAAiCmC,KAAjC,CAAP;AACH,KAFD;AAGH;;AA1Ea;;AA8ElBI,MAAM,CAACC,OAAP,GAAiB;AAAE/C,EAAAA;AAAF,CAAjB","sourcesContent":["const client = require('../../client');\nconst ai = require('../algod/accountInformation');\nconst blk = require('../algod/block');\nconst compile = require('./compile');\nconst dryrun = require('./dryrun');\nconst gasbid = require('./getAssetByID');\nconst gapbid = require('./getApplicationByID');\nconst hc = require('../algod/healthCheck');\nconst pti = require('../algod/pendingTransactionInformation');\nconst pt = require('../algod/pendingTransactions');\nconst ptba = require('../algod/pendingTransactionsByAddress');\nconst srt = require('../algod/sendRawTransaction');\nconst status = require('../algod/status');\nconst sab = require('../algod/statusAfterBlock');\nconst sp = require('../algod/suggestedParams');\nconst supply = require('../algod/supply');\nconst versions = require('../algod/versions');\n\nclass AlgodClient {\n    constructor(token = '', baseServer = \"http://r2.algorand.network\", port = 4180, headers = {}) {\n        // workaround to allow backwards compatibility for multiple headers\n        let tokenHeader = token;\n        if (typeof (tokenHeader) == 'string') {\n            tokenHeader = {\"X-Algo-API-Token\": tokenHeader};\n        }\n\n        // Get client\n        let c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n        this.healthCheck = function () {\n            return new hc.HealthCheck(c);\n        };\n\n        this.versionsCheck = function () {\n            return new versions.Versions(c);\n        };\n\n        this.sendRawTransaction = function(stx_or_stxs) {\n            return new srt.SendRawTransaction(c, stx_or_stxs);\n        };\n\n        this.accountInformation = function(account) {\n            return new ai.AccountInformation(c, account);\n        };\n\n        this.block = function(roundNumber) {\n            return new blk.Block(c, roundNumber);\n        };\n\n        this.pendingTransactionInformation = function(txid) {\n            return new pti.PendingTransactionInformation(c, txid);\n        };\n\n        this.pendingTransactionsInformation = function() {\n            return new pt.PendingTransactions(c);\n        };\n\n        this.pendingTransactionByAddress = function(address) {\n            return new ptba.PendingTransactionsByAddress(c, address);\n        };\n\n        this.status = function() {\n            return new status.Status(c);\n        };\n\n        this.statusAfterBlock = function (round) {\n            return new sab.StatusAfterBlock(c, round);\n        };\n\n        this.getTransactionParams = function () {\n            return new sp.SuggestedParams(c);\n        };\n\n        this.supply = function () {\n            return new supply.Supply(c);\n        };\n\n        this.compile = function (source) {\n            return new compile.Compile(c, source);\n        };\n\n        this.dryrun = function (dr) {\n            return new dryrun.Dryrun(c, dr);\n        };\n\n        this.getAssetByID = function (index) {\n            return new gasbid.GetAssetByID(c, index);\n        }\n\n        this.getApplicationByID = function (index) {\n            return new gapbid.GetApplicationByID(c, index);\n        }\n    }\n}\n\n\nmodule.exports = { AlgodClient };\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst ERROR_INVALID_MICROALGOS = new Error(\"Microalgos should be positive and less than 2^53 - 1.\");\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos number\n * @returns number\n */\n\nfunction microalgosToAlgos(microalgos) {\n  if (microalgos < 0 || !Number.isSafeInteger(microalgos)) {\n    throw ERROR_INVALID_MICROALGOS;\n  }\n\n  return microalgos / MICROALGOS_TO_ALGOS_RATIO;\n}\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos number\n * @returns number\n */\n\n\nfunction algosToMicroalgos(algos) {\n  let microalgos = algos * MICROALGOS_TO_ALGOS_RATIO;\n  return Math.round(microalgos);\n}\n\nmodule.exports = {\n  microalgosToAlgos,\n  algosToMicroalgos,\n  ERROR_INVALID_MICROALGOS\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/convert.js"],"names":["MICROALGOS_TO_ALGOS_RATIO","ERROR_INVALID_MICROALGOS","Error","microalgosToAlgos","microalgos","Number","isSafeInteger","algosToMicroalgos","algos","Math","round","module","exports"],"mappings":"AAAA,MAAMA,yBAAyB,GAAG,GAAlC;AACA,MAAMC,wBAAwB,GAAG,IAAIC,KAAJ,CAAU,uDAAV,CAAjC;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACnC,MAAIA,UAAU,GAAG,CAAb,IAAkB,CAACC,MAAM,CAACC,aAAP,CAAqBF,UAArB,CAAvB,EAAwD;AACpD,UAAMH,wBAAN;AACH;;AACD,SAAOG,UAAU,GAACJ,yBAAlB;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASO,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,MAAIJ,UAAU,GAAGI,KAAK,GAACR,yBAAvB;AACA,SAAOS,IAAI,CAACC,KAAL,CAAWN,UAAX,CAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiB;AACbT,EAAAA,iBADa;AAEbI,EAAAA,iBAFa;AAGbN,EAAAA;AAHa,CAAjB","sourcesContent":["const MICROALGOS_TO_ALGOS_RATIO = 1e6;\nconst ERROR_INVALID_MICROALGOS = new Error(\"Microalgos should be positive and less than 2^53 - 1.\");\n\n/**\n * microalgosToAlgos converts microalgos to algos\n * @param microalgos number\n * @returns number\n */\nfunction microalgosToAlgos(microalgos) {\n    if (microalgos < 0 || !Number.isSafeInteger(microalgos)){\n        throw ERROR_INVALID_MICROALGOS;\n    }\n    return microalgos/MICROALGOS_TO_ALGOS_RATIO\n}\n\n/**\n * algosToMicroalgos converts algos to microalgos\n * @param algos number\n * @returns number\n */\nfunction algosToMicroalgos(algos) {\n    let microalgos = algos*MICROALGOS_TO_ALGOS_RATIO;\n    return Math.round(microalgos);\n}\n\nmodule.exports = {\n    microalgosToAlgos,\n    algosToMicroalgos,\n    ERROR_INVALID_MICROALGOS,\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"helloo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    return JSON.stringify(accts, null, 2);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\n\nconst GetParams = () => {\n  _s4();\n\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.algod({\n        ledger: 'TestNet',\n        path: `/v2/transactions/params`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Transaction Params\",\n    buttonText: \"Get Transaction Params\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n};\n\n_s4(GetParams, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c4 = GetParams;\n\nconst GetAppGlobalState = () => {\n  _s5();\n\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/applications/${appId}`\n      });\n      return JSON.stringify(r, null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Global State\",\n    buttonText: \"Get Global State\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 10\n  }, this);\n};\n\n_s5(GetAppGlobalState, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c5 = GetAppGlobalState;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      dividing: true,\n      children: \"Simple React App Using AlgoSigner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The Pure Stake Team provide many examples using AlgoSigner. See \", /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://purestake.github.io/algosigner-dapp-example\",\n        children: \"https://purestake.github.io/algosigner-dapp-example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), \" for more examples.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetParams, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetAppGlobalState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_c6 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"GetParams\");\n$RefreshReg$(_c5, \"GetAppGlobalState\");\n$RefreshReg$(_c6, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","appId","ExampleAlgoSigner","title","buttonText","buttonAction","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","GetAccounts","connect","ledger","accts","accounts","JSON","stringify","GetParams","algod","path","e","console","error","GetAppGlobalState","indexer","App"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\n\r\nconst appId = 13793863;\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [result, setResult] = useState(\"\");\r\n\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n    <h1>helloo</h1>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}/>\r\n};\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {\r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    return JSON.stringify(accts, null, 2);\r\n  }, []);\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\nconst GetParams = () => {\r\n  const action = useCallback(async () => {\r\n    try {\r\n      const r = await AlgoSigner.algod({\r\n        ledger: 'TestNet',\r\n        path: `/v2/transactions/params`\r\n      });\r\n      return JSON.stringify(r, null, 2);\r\n    } catch (e) {\r\n      console.error(e);\r\n      return JSON.stringify(e, null, 2);\r\n    }\r\n  }, []);\r\n\r\n  return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n};\r\n\r\nconst GetAppGlobalState = () => {\r\n  const action = useCallback(async () => {\r\n    try {\r\n      const r = await AlgoSigner.indexer({\r\n        ledger: 'TestNet',\r\n        path: `/v2/applications/${appId}`\r\n      });\r\n      return JSON.stringify(r, null, 2);\r\n    } catch (e) {\r\n      console.error(e);\r\n      return JSON.stringify(e, null, 2);\r\n    }\r\n  }, []);\r\n\r\n  return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <Container className=\"App\">\r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p>\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      <GetParams/>\r\n\r\n      <GetAppGlobalState/>\r\n\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
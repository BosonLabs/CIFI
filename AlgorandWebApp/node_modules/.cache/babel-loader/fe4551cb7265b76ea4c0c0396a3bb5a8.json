{"ast":null,"code":"const {\n  Buffer\n} = require('buffer');\n\nconst encoding = require('../../../encoding/encoding');\n\nclass Dryrun {\n  constructor(c, dr) {\n    this.c = c;\n    this.blob = encoding.encode(dr.get_obj_for_encoding());\n  }\n  /**\n   * Sets the default header (if not previously set)\n   * @param headers\n   * @returns {*}\n   */\n\n\n  setHeaders(headers) {\n    let hdrs = headers;\n\n    if (Object.keys(hdrs).every(key => key.toLowerCase() !== 'content-type')) {\n      hdrs = { ...headers\n      };\n      hdrs['Content-Type'] = 'application/msgpack';\n    }\n\n    return hdrs;\n  }\n  /**\n   * Executes dryrun\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    let txHeaders = this.setHeaders(headers);\n    let res = await this.c.post(\"/v2/teal/dryrun\", Buffer.from(this.blob), txHeaders);\n    return res.body;\n  }\n\n}\n\nmodule.exports = {\n  Dryrun\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/algod/dryrun.js"],"names":["Buffer","require","encoding","Dryrun","constructor","c","dr","blob","encode","get_obj_for_encoding","setHeaders","headers","hdrs","Object","keys","every","key","toLowerCase","do","txHeaders","res","post","from","body","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAME,MAAN,CAAa;AACZC,EAAAA,WAAW,CAACC,CAAD,EAAIC,EAAJ,EAAQ;AAClB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKE,IAAL,GAAYL,QAAQ,CAACM,MAAT,CAAgBF,EAAE,CAACG,oBAAH,EAAhB,CAAZ;AACA;AAED;AACD;AACA;AACA;AACA;;;AACEC,EAAAA,UAAU,CAACC,OAAD,EAAU;AACpB,QAAIC,IAAI,GAAGD,OAAX;;AACA,QAAIE,MAAM,CAACC,IAAP,CAAYF,IAAZ,EAAkBG,KAAlB,CAAwBC,GAAG,IAAGA,GAAG,CAACC,WAAJ,OAAsB,cAApD,CAAJ,EAAyE;AACxEL,MAAAA,IAAI,GAAG,EAAC,GAAGD;AAAJ,OAAP;AACAC,MAAAA,IAAI,CAAC,cAAD,CAAJ,GAAuB,qBAAvB;AACA;;AACD,WAAOA,IAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMM,EAAN,CAASP,OAAO,GAAC,EAAjB,EAAqB;AACpB,QAAIQ,SAAS,GAAG,KAAKT,UAAL,CAAgBC,OAAhB,CAAhB;AACA,QAAIS,GAAG,GAAG,MAAM,KAAKf,CAAL,CAAOgB,IAAP,CAAY,iBAAZ,EAA+BrB,MAAM,CAACsB,IAAP,CAAY,KAAKf,IAAjB,CAA/B,EAAuDY,SAAvD,CAAhB;AACA,WAAOC,GAAG,CAACG,IAAX;AACA;;AA7BW;;AAgCbC,MAAM,CAACC,OAAP,GAAiB;AAAEtB,EAAAA;AAAF,CAAjB","sourcesContent":["const { Buffer } = require('buffer');\nconst encoding = require('../../../encoding/encoding');\n\nclass Dryrun {\n\tconstructor(c, dr) {\n\t\tthis.c = c;\n\t\tthis.blob = encoding.encode(dr.get_obj_for_encoding());\n\t}\n\n\t/**\n\t * Sets the default header (if not previously set)\n\t * @param headers\n\t * @returns {*}\n\t */\n\t setHeaders(headers) {\n\t\tlet hdrs = headers;\n\t\tif (Object.keys(hdrs).every(key=> key.toLowerCase() !== 'content-type')) {\n\t\t\thdrs = {...headers};\n\t\t\thdrs['Content-Type'] = 'application/msgpack';\n\t\t}\n\t\treturn hdrs;\n\t}\n\n\t/**\n\t * Executes dryrun\n\t * @param headers, optional\n\t * @returns {Promise<*>}\n\t */\n\tasync do(headers={}) {\n\t\tlet txHeaders = this.setHeaders(headers);\n\t\tlet res = await this.c.post(\"/v2/teal/dryrun\", Buffer.from(this.blob), txHeaders);\n\t\treturn res.body;\n\t}\n}\n\nmodule.exports = { Dryrun };\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"class CircleTransaction {\n  constructor() {\n    this.SERVER_HOST = \"https://dispenser-server.testnet.aws.algodev.network\";\n  }\n\n  // SERVER_HOST = \"http://localhost:3001\";\n  async transferUSDC(account, amount, circleTransactionCallback, recaptchaToken) {\n    console.log(\"create and send Circle USDC transaction to account '\" + account + \"'\" + \" with amount \" + amount + \" USDC\");\n    this.circleTransactionCallback = circleTransactionCallback;\n    let options = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    let transaction = await fetch(`${this.SERVER_HOST}/session/usdctransaction/${account}/${amount}/${recaptchaToken}`, options).then(res => {\n      // if (res.ok) {\n      res.json().then(json => {\n        console.log(\"recieved transaction info \" + JSON.stringify(json));\n        this.circleTransactionCallback(null, json);\n      }); // }\n    }).catch(err => {\n      console.error(err);\n      this.circleTransactionCallback(err, null);\n    });\n  }\n\n}\n\nexport default new CircleTransaction();","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/src/CircleTransaction.js"],"names":["CircleTransaction","SERVER_HOST","transferUSDC","account","amount","circleTransactionCallback","recaptchaToken","console","log","options","method","headers","transaction","fetch","then","res","json","JSON","stringify","catch","err","error"],"mappings":"AAAA,MAAMA,iBAAN,CAAwB;AAAA;AAAA,SAEpBC,WAFoB,GAEN,sDAFM;AAAA;;AAGpB;AAEA,QAAMC,YAAN,CAAmBC,OAAnB,EAA4BC,MAA5B,EAAoCC,yBAApC,EAA+DC,cAA/D,EAA+E;AAE3EC,IAAAA,OAAO,CAACC,GAAR,CAAY,yDAAyDL,OAAzD,GAAmE,GAAnE,GAAyE,eAAzE,GAA2FC,MAA3F,GAAoG,OAAhH;AAEA,SAAKC,yBAAL,GAAiCA,yBAAjC;AAEA,QAAII,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB;AAFX;AAFC,KAAd;AAQA,QAAIC,WAAW,GAAG,MAAOC,KAAK,CAAE,GAAE,KAAKZ,WAAY,4BAA2BE,OAAQ,IAAGC,MAAO,IAAGE,cAAe,EAApF,EAAuFG,OAAvF,CAAL,CACpBK,IADoB,CACfC,GAAG,IAAI;AACT;AACAA,MAAAA,GAAG,CAACC,IAAJ,GAAWF,IAAX,CAAgBE,IAAI,IAAI;AACpBT,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAA+BS,IAAI,CAACC,SAAL,CAAeF,IAAf,CAA3C;AAEA,aAAKX,yBAAL,CAA+B,IAA/B,EAAqCW,IAArC;AACH,OAJD,EAFS,CAOT;AACH,KAToB,EASlBG,KATkB,CASZC,GAAG,IAAI;AACZb,MAAAA,OAAO,CAACc,KAAR,CAAcD,GAAd;AACA,WAAKf,yBAAL,CAA+Be,GAA/B,EAAoC,IAApC;AACH,KAZoB,CAAzB;AAaH;;AAhCmB;;AAoCxB,eAAe,IAAIpB,iBAAJ,EAAf","sourcesContent":["class CircleTransaction {\r\n\r\n    SERVER_HOST = \"https://dispenser-server.testnet.aws.algodev.network\";\r\n    // SERVER_HOST = \"http://localhost:3001\";\r\n\r\n    async transferUSDC(account, amount, circleTransactionCallback, recaptchaToken) {\r\n\r\n        console.log(\"create and send Circle USDC transaction to account '\" + account + \"'\" + \" with amount \" + amount + \" USDC\");\r\n\r\n        this.circleTransactionCallback = circleTransactionCallback;\r\n\r\n        let options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        };\r\n\r\n        let transaction = await (fetch(`${this.SERVER_HOST}/session/usdctransaction/${account}/${amount}/${recaptchaToken}`, options)\r\n            .then(res => {\r\n                // if (res.ok) {\r\n                res.json().then(json => {\r\n                    console.log(\"recieved transaction info \" + JSON.stringify(json));\r\n\r\n                    this.circleTransactionCallback(null, json);\r\n                });\r\n                // }\r\n            }).catch(err => {\r\n                console.error(err);\r\n                this.circleTransactionCallback(err, null);\r\n            }));\r\n    }\r\n\r\n}\r\n\r\nexport default new CircleTransaction();\r\n"]},"metadata":{},"sourceType":"module"}
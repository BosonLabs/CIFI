{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst App = () => {\n  const balance = async () => {\n    const algosdk = require('algosdk');\n\n    let account = algosdk.generateAccount();\n    console.log(\"Account Address: \", account.addr);\n    let mn = algosdk.secretKeyToMnemonic(account.sk);\n    console.log(\"Account Mnemonic: \", mn);\n    const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    const server = \"http://localhost\";\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algodv2(token, server, port); //alert(\"balance\")\n    //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\n\n    const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\n    let myAccount = algosdk.mnemonicToSecretKey(passphrase);\n    console.log(\"My address: %s\", myAccount.addr);\n    let accountInfo = await algodClient.accountInformation(myAccount.addr).do();\n    console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: balance,\n      children: \"Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","App","balance","algosdk","require","account","generateAccount","addr","mn","secretKeyToMnemonic","sk","token","server","port","algodclient","Algodv2","passphrase","myAccount","mnemonicToSecretKey","accountInfo","algodClient","accountInformation","do","amount"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n\r\nconst App = () => {\r\n\r\n\r\n  const balance=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n\r\n\r\n  let account = algosdk.generateAccount();\r\nconsole.log(\"Account Address: \", account.addr);\r\nlet mn = algosdk.secretKeyToMnemonic(account.sk);\r\nconsole.log(\"Account Mnemonic: \", mn);\r\n\r\n\r\nconst token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n\r\n\r\n    //alert(\"balance\")\r\n\r\n    //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\r\n\r\n    const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\r\n\r\n    let myAccount = algosdk.mnemonicToSecretKey(passphrase)\r\n\r\n    console.log(\"My address: %s\", myAccount.addr)\r\n\r\n    let accountInfo = await algodClient.accountInformation(myAccount.addr).do();\r\n\r\n    console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {balance}>\r\n               Balance\r\n              </button>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\react-dispenser-usdc-algo\\\\dispenser-react-app\\\\src\\\\App.js\";\nimport React from 'react';\nimport { Form, Field } from 'react-final-form';\nimport { TextField } from 'final-form-material-ui';\nimport Link from '@material-ui/core/Link';\nimport { Typography, Paper, Grid, Button, CssBaseline, CardMedia } from '@material-ui/core';\nimport AlgoTransaction from './AlgoTransaction';\nimport CircleTransaction from './CircleTransaction';\nimport RadioButtonsGroup from './AssetRadioButtonsGroup';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport algorandImage from './images/algorand_logo_mark_black.png';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nconst TEST_SITE_KEY = \"<recaptcha-site-key>\";\nconst NETWORK = \"Testnet\";\nconst ALGO_DIST_AMOUNT = 200000;\nconst USDC_DIST_AMOUNT = 100;\nconst USDC_ASSET_ID = 10458941;\nconst currencyMap = {\n  'algo': 'Algos',\n  'usdc': 'USDC'\n};\n\nconst styles = theme => ({\n  root: {\n    display: 'flex'\n  },\n  formControl: {\n    margin: theme.spacing.unit * 3\n  },\n  group: {\n    margin: `${theme.spacing.unit}px 0`\n  }\n});\n\nclass App extends React.Component {\n  constructor(props, ...args) {\n    super(props, ...args);\n    this.providedAccount = \"\";\n\n    this.updateAsset = value => {\n      console.log(\"updateAsset:\", value);\n      this.setState({\n        currency: value\n      });\n    };\n\n    this.updateAccountInfo = accountInfo => {\n      console.log(\"updateAccountInfo: \", accountInfo);\n      let usdcAccountBalanceString = \"\";\n      let algoBalanceString = `Algo balance:      ${accountInfo.amount / 1000000} ${currencyMap[\"algo\"]}`;\n      console.log(`asset ${JSON.stringify(accountInfo.assets)}`);\n      let foundUsdc = false;\n\n      if (accountInfo.assets != null) {\n        let idx;\n\n        for (idx = 0; idx < accountInfo['assets'].length; idx++) {\n          let assetItem = accountInfo['assets'][idx];\n\n          if (assetItem['asset-id'] === USDC_ASSET_ID) {\n            let assetItemJson = JSON.stringify(assetItem, undefined, 2);\n            console.log(`assetItem =  ${assetItemJson}`);\n            foundUsdc = true;\n            usdcAccountBalanceString = `USDC balance:      ${assetItem.amount / 1000000} ${currencyMap[\"usdc\"]}`;\n            break;\n          }\n        }\n      }\n\n      this.setState({\n        algoAccountBalance: algoBalanceString,\n        enabledUsdc: foundUsdc,\n        usdcAccountBalance: usdcAccountBalanceString\n      });\n    };\n\n    this.updateTransactionStatus = transactionStatus => {\n      console.log(\"updateTransactionStatus:\", transactionStatus.transactionId);\n      this.setProgress(false);\n      this.setState({\n        transactionId: transactionStatus.transactionId\n      });\n      AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\n    };\n\n    this.updateCircleTransactionStatus = (err, response) => {\n      console.log(\"circle error: \" + JSON.stringify(err));\n      console.log(\"response: \" + JSON.stringify(response));\n      this.setProgress(false);\n      AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\n      this.setState({\n        transactionId: response.transactionHash\n      });\n    };\n\n    this.onCaptchaChange = value => {\n      console.log(\"onChange Captcha value:\", value);\n      this.setState({\n        captcha: value\n      });\n      if (value === null) this.setState({\n        captchaOK: false,\n        active: true\n      });else {\n        this.setState({\n          captchaOK: true\n        });\n\n        if (this.state.account != null) {\n          AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\n        }\n      }\n    };\n\n    this.asyncScriptOnLoad = () => {\n      this.setState({\n        callback: \"called!\"\n      });\n      console.log(\"scriptLoad - reCaptcha Ref \", this._reCaptchaRef);\n    };\n\n    this.onSubmit = async values => {\n      // set active to false after first submit\n      this.setState({\n        active: false,\n        transactionId: \"\"\n      });\n\n      if (this.state.currency === \"algo\") {\n        AlgoTransaction.createAndSendTransaction(values.account, ALGO_DIST_AMOUNT, this.updateTransactionStatus, this.state.captcha);\n        this.setProgress(true);\n      } else if (this.state.currency === \"usdc\") {\n        CircleTransaction.transferUSDC(values.account, USDC_DIST_AMOUNT, this.updateCircleTransactionStatus, this.state.captcha);\n        this.setProgress(true);\n      } else {\n        console.error(`unknown currency ${this.state.currency}`);\n      }\n    };\n\n    this.validate = values => {\n      this.setState({\n        algoAccountBalance: \"\",\n        enabledUsdc: false,\n        usdcAccountBalance: \"\"\n      });\n      this.setState({\n        enableSubmit: false\n      });\n      const errors = {};\n\n      if (!values.account) {\n        errors.account = 'Required';\n      } else if (values.account.length !== 58) {\n        errors.account = 'Wrong length';\n      } else if (!AlgoTransaction.checkValidAccount(values.account)) {\n        errors.account = 'Invalid account address';\n      } else {\n        this.setState({\n          formValid: true,\n          account: values.account\n        });\n        if (this.state.captchaOK && this.state.active) AlgoTransaction.getAccountInfo(values.account, this.updateAccountInfo, this.state.captcha);\n      }\n\n      return errors;\n    };\n\n    this.state = {\n      callback: \"not fired\",\n      value: \"[empty]\",\n      selection: {\n        value: \"1\"\n      },\n      load: false,\n      active: true,\n      captchaOK: false,\n      formValid: false,\n      enableSubmit: false,\n      algoAccountBalance: \"\",\n      usdcAccountBalance: \"\",\n      enableUsdc: false,\n      transactionId: \"\",\n      currency: \"algo\",\n      progressVariant: \"determinate\"\n    };\n    this._reCaptchaRef = /*#__PURE__*/React.createRef();\n    this.loadAccountQueryParam();\n  }\n\n  loadAccountQueryParam() {\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let providedAccount = params.get('account');\n\n    if (providedAccount != null) {\n      if (AlgoTransaction.checkValidAccount(providedAccount)) {\n        console.log(`received account parameter: ${providedAccount}`);\n        this.providedAccount = providedAccount;\n      } else {\n        console.warn(`ignoring non valid query param, account: '${providedAccount}'`);\n      }\n    }\n\n    console.log(`state.account ${this.providedAccount}`);\n  }\n\n  setProgress(enable) {\n    if (enable) {\n      this.setState({\n        progressVariant: \"indeterminate\"\n      });\n    } else {\n      this.setState({\n        progressVariant: \"determinate\"\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 16,\n        margin: 'auto',\n        maxWidth: 800\n      },\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"hello \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            component: \"h1\",\n            children: [\"Algorand \", NETWORK, \" Dispenser\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(ReCAPTCHA, {\n            ref: this._reCaptchaRef,\n            onChange: this.onCaptchaChange,\n            sitekey: TEST_SITE_KEY,\n            size: \"normal\",\n            asyncScriptOnLoad: this.asyncScriptOnLoad\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 6,\n          children: /*#__PURE__*/_jsxDEV(CardMedia, {\n            component: \"img\",\n            alt: \"Algorand Logo\",\n            height: \"150\",\n            image: algorandImage,\n            title: \"Algorand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        xs: 6,\n        gutterBottom: true,\n        children: `Fund your Algorand ${NETWORK} Account`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        onSubmit: this.onSubmit,\n        initialValues: {\n          account: this.providedAccount\n        },\n        validate: this.validate,\n        render: ({\n          handleSubmit,\n          reset,\n          submitting,\n          pristine,\n          values\n        }) => /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          noValidate: true,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            style: {\n              padding: 16\n            },\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              alignItems: \"flex-start\",\n              spacing: 2,\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                xs: 5,\n                children: /*#__PURE__*/_jsxDEV(RadioButtonsGroup, { ...this.state,\n                  onAssetChange: this.updateAsset.bind(this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                xs: 2,\n                children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  variant: this.state.progressVariant,\n                  progress: 0\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 244,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                xs: 5,\n                children: /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  alignItems: \"flex-start\",\n                  spacing: 2,\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      gutterBottom: true,\n                      children: this.state.algoAccountBalance\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 249,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 248,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    container: true,\n                    item: true,\n                    xs: 12,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      gutterBottom: true,\n                      children: this.state.usdcAccountBalance\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 254,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 253,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 247,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Field, {\n                  fullWidth: true,\n                  name: \"account\",\n                  component: TextField,\n                  label: \"Algorand Account\",\n                  variant: \"outlined\",\n                  value: this.state.account\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                container: true,\n                item: true,\n                xs: 12,\n                children: /*#__PURE__*/_jsxDEV(Button, {\n                  variant: \"contained\",\n                  color: \"primary\",\n                  type: \"submit\",\n                  disabled: !(this.state.captchaOK && this.state.formValid && this.state.active),\n                  children: \"Dispense\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: [\"Account Address: \", /*#__PURE__*/_jsxDEV(Link, {\n              href: `https://${NETWORK}.algoexplorer.io/address/${this.state.account}`,\n              variant: \"inherit\",\n              color: \"primary\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: this.state.account\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          item: true,\n          xs: 12,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            gutterBottom: true,\n            children: [\"Transaction ID: \", /*#__PURE__*/_jsxDEV(Link, {\n              href: `https://${NETWORK}.algoexplorer.io/tx/${this.state.transactionId}`,\n              variant: \"inherit\",\n              color: \"primary\",\n              target: \"_blank\",\n              rel: \"noreferrer\",\n              children: this.state.transactionId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/src/App.js"],"names":["React","Form","Field","TextField","Link","Typography","Paper","Grid","Button","CssBaseline","CardMedia","AlgoTransaction","CircleTransaction","RadioButtonsGroup","ReCAPTCHA","algorandImage","CircularProgress","TEST_SITE_KEY","NETWORK","ALGO_DIST_AMOUNT","USDC_DIST_AMOUNT","USDC_ASSET_ID","currencyMap","styles","theme","root","display","formControl","margin","spacing","unit","group","App","Component","constructor","props","args","providedAccount","updateAsset","value","console","log","setState","currency","updateAccountInfo","accountInfo","usdcAccountBalanceString","algoBalanceString","amount","JSON","stringify","assets","foundUsdc","idx","length","assetItem","assetItemJson","undefined","algoAccountBalance","enabledUsdc","usdcAccountBalance","updateTransactionStatus","transactionStatus","transactionId","setProgress","getAccountInfo","state","account","captcha","updateCircleTransactionStatus","err","response","transactionHash","onCaptchaChange","captchaOK","active","asyncScriptOnLoad","callback","_reCaptchaRef","onSubmit","values","createAndSendTransaction","transferUSDC","error","validate","enableSubmit","errors","checkValidAccount","formValid","selection","load","enableUsdc","progressVariant","createRef","loadAccountQueryParam","search","window","location","params","URLSearchParams","get","warn","enable","render","padding","maxWidth","handleSubmit","reset","submitting","pristine","bind"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Form, Field} from 'react-final-form';\r\nimport {TextField} from 'final-form-material-ui';\r\nimport Link from '@material-ui/core/Link';\r\nimport {\r\n    Typography,\r\n    Paper,\r\n    Grid,\r\n    Button,\r\n    CssBaseline,\r\n    CardMedia\r\n} from '@material-ui/core';\r\nimport AlgoTransaction from './AlgoTransaction';\r\nimport CircleTransaction from './CircleTransaction';\r\nimport RadioButtonsGroup from './AssetRadioButtonsGroup';\r\nimport ReCAPTCHA from 'react-google-recaptcha';\r\nimport algorandImage from './images/algorand_logo_mark_black.png';\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst TEST_SITE_KEY = \"<recaptcha-site-key>\";\r\nconst NETWORK = \"Testnet\";\r\nconst ALGO_DIST_AMOUNT = 200000;\r\nconst USDC_DIST_AMOUNT = 100;\r\nconst USDC_ASSET_ID = 10458941;\r\nconst currencyMap = {\r\n    'algo': 'Algos',\r\n    'usdc': 'USDC'\r\n};\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing.unit * 3,\r\n    },\r\n    group: {\r\n        margin: `${theme.spacing.unit}px 0`,\r\n    },\r\n});\r\n\r\nclass App extends React.Component {\r\n    constructor(props, ...args) {\r\n        super(props, ...args);\r\n        this.state = {\r\n            callback: \"not fired\",\r\n            value: \"[empty]\",\r\n            selection: {value: \"1\"},\r\n            load: false,\r\n            active: true,\r\n            captchaOK: false,\r\n            formValid: false,\r\n            enableSubmit: false,\r\n            algoAccountBalance: \"\",\r\n            usdcAccountBalance: \"\",\r\n            enableUsdc: false,\r\n            transactionId: \"\",\r\n            currency: \"algo\",\r\n            progressVariant: \"determinate\",\r\n        };\r\n        this._reCaptchaRef = React.createRef();\r\n\r\n        this.loadAccountQueryParam();\r\n    }\r\n\r\n    providedAccount = \"\";\r\n\r\n   loadAccountQueryParam() {\r\n        let search = window.location.search;\r\n        let params = new URLSearchParams(search);\r\n        let providedAccount = params.get('account');\r\n\r\n        if (providedAccount != null) {\r\n            if (AlgoTransaction.checkValidAccount(providedAccount)) {\r\n                console.log(`received account parameter: ${providedAccount}`);\r\n                this.providedAccount = providedAccount;\r\n            } else {\r\n                console.warn(`ignoring non valid query param, account: '${providedAccount}'`);\r\n            }\r\n        }\r\n        console.log(`state.account ${this.providedAccount}`);\r\n    }\r\n\r\n\r\n    updateAsset = (value) => {\r\n        console.log(\"updateAsset:\", value);\r\n        this.setState({currency: value});\r\n    };\r\n\r\n    updateAccountInfo = (accountInfo) => {\r\n        console.log(\"updateAccountInfo: \",  accountInfo );\r\n        let usdcAccountBalanceString = \"\";\r\n        let algoBalanceString = `Algo balance:      ${accountInfo.amount / 1000000} ${currencyMap[\"algo\"]}`;\r\n        console.log(`asset ${JSON.stringify(accountInfo.assets)}`);\r\n        let foundUsdc = false;\r\n        if (accountInfo.assets != null) {\r\n            let idx;\r\n\r\n            for (idx = 0; idx < accountInfo['assets'].length; idx++) {\r\n                let assetItem = accountInfo['assets'][idx];\r\n                if (assetItem['asset-id'] === USDC_ASSET_ID) {\r\n                    let assetItemJson = JSON.stringify(assetItem, undefined, 2);\r\n                    console.log(`assetItem =  ${assetItemJson}`);\r\n                    foundUsdc = true;\r\n                    usdcAccountBalanceString = `USDC balance:      ${assetItem.amount / 1000000} ${currencyMap[\"usdc\"]}`;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            algoAccountBalance: algoBalanceString,\r\n            enabledUsdc: foundUsdc,\r\n            usdcAccountBalance: usdcAccountBalanceString\r\n        });\r\n    };\r\n\r\n    updateTransactionStatus = (transactionStatus) => {\r\n        console.log(\"updateTransactionStatus:\", transactionStatus.transactionId);\r\n        this.setProgress(false);\r\n        this.setState({transactionId: transactionStatus.transactionId});\r\n        AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\r\n    };\r\n\r\n    updateCircleTransactionStatus = (err, response) => {\r\n        console.log(\"circle error: \" + JSON.stringify(err));\r\n        console.log(\"response: \" + JSON.stringify(response));\r\n        this.setProgress(false);\r\n        AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\r\n        this.setState({transactionId: response.transactionHash});\r\n\r\n    };\r\n\r\n    setProgress(enable) {\r\n        if (enable) {\r\n            this.setState({progressVariant: \"indeterminate\"});\r\n        } else {\r\n            this.setState({progressVariant: \"determinate\"});\r\n        }\r\n    }\r\n\r\n    onCaptchaChange = (value) => {\r\n        console.log(\"onChange Captcha value:\", value);\r\n        this.setState({captcha: value});\r\n        if (value === null)\r\n            this.setState({captchaOK: false, active: true});\r\n        else {\r\n            this.setState({captchaOK: true});\r\n            if (this.state.account != null) {\r\n                AlgoTransaction.getAccountInfo(this.state.account, this.updateAccountInfo, this.state.captcha);\r\n            }\r\n        }\r\n    };\r\n\r\n    asyncScriptOnLoad = () => {\r\n        this.setState({callback: \"called!\"});\r\n        console.log(\"scriptLoad - reCaptcha Ref \", this._reCaptchaRef);\r\n    };\r\n\r\n    onSubmit = async values => {\r\n        // set active to false after first submit\r\n        this.setState({active: false, transactionId: \"\"});\r\n\r\n        if (this.state.currency === \"algo\") {\r\n            AlgoTransaction.createAndSendTransaction(values.account, ALGO_DIST_AMOUNT, this.updateTransactionStatus, this.state.captcha);\r\n            this.setProgress(true);\r\n        } else if (this.state.currency === \"usdc\") {\r\n            CircleTransaction.transferUSDC(values.account, USDC_DIST_AMOUNT, this.updateCircleTransactionStatus, this.state.captcha);\r\n            this.setProgress(true);\r\n        } else {\r\n            console.error(`unknown currency ${this.state.currency}`)\r\n        }\r\n    };\r\n\r\n    validate = values => {\r\n        this.setState({algoAccountBalance: \"\", enabledUsdc: false, usdcAccountBalance: \"\"});\r\n        this.setState({enableSubmit: false});\r\n        const errors = {};\r\n        if (!values.account) {\r\n            errors.account = 'Required';\r\n        } else if (values.account.length !== 58) {\r\n            errors.account = 'Wrong length';\r\n        } else if (!AlgoTransaction.checkValidAccount(values.account)) {\r\n            errors.account = 'Invalid account address';\r\n        } else {\r\n            this.setState({formValid: true, account: values.account});\r\n            if (this.state.captchaOK && this.state.active)\r\n                AlgoTransaction.getAccountInfo(values.account, this.updateAccountInfo, this.state.captcha );\r\n        }\r\n        return errors;\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n        return <div style={{padding: 16, margin: 'auto', maxWidth: 800}}>\r\n            <CssBaseline/>\r\n            <h1>hello </h1>\r\n            <Grid container>\r\n                <Grid item xs={12}>\r\n                    <Typography variant=\"h4\" component=\"h1\" >\r\n                        Algorand {NETWORK} Dispenser\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid container item xs={6}>\r\n                    <ReCAPTCHA\r\n                        ref={this._reCaptchaRef}\r\n                        onChange={this.onCaptchaChange}\r\n                        sitekey={TEST_SITE_KEY}\r\n                        size=\"normal\"\r\n                        asyncScriptOnLoad={this.asyncScriptOnLoad}\r\n                    >\r\n                    </ReCAPTCHA>\r\n                </Grid>\r\n                <Grid container item xs={6}>\r\n                    <CardMedia\r\n                        component=\"img\"\r\n                        alt=\"Algorand Logo\"\r\n                        height=\"150\"\r\n                        image={algorandImage}\r\n                        title=\"Algorand\"\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n\r\n\r\n            <Typography xs={6} gutterBottom>\r\n                {`Fund your Algorand ${NETWORK} Account`}\r\n            </Typography>\r\n            <Form\r\n                onSubmit={this.onSubmit}\r\n                initialValues={{account: this.providedAccount}}\r\n                validate={this.validate}\r\n\r\n                render={({handleSubmit, reset, submitting, pristine, values}) => (\r\n                    <form onSubmit={handleSubmit} noValidate>\r\n                        <Paper style={{padding: 16}}>\r\n\r\n                            <Grid container alignItems=\"flex-start\" spacing={2}>\r\n\r\n                                <Grid container item xs={5}>\r\n                                    <RadioButtonsGroup {...this.state} onAssetChange={this.updateAsset.bind(this)}/>\r\n                                </Grid>\r\n                                <Grid item xs={2}>\r\n                                    <CircularProgress variant={this.state.progressVariant} progress={0}/>\r\n                                </Grid>\r\n                                <Grid container item xs={5}>\r\n                                    <Grid container alignItems=\"flex-start\" spacing={2}>\r\n                                        <Grid container item xs={12}>\r\n                                            <Typography gutterBottom>\r\n                                                {this.state.algoAccountBalance}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid container item xs={12}>\r\n                                            <Typography gutterBottom>\r\n                                                {this.state.usdcAccountBalance}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid container item xs={12}>\r\n                                    <Field\r\n                                        fullWidth\r\n                                        name=\"account\"\r\n                                        component={TextField}\r\n                                        label=\"Algorand Account\"\r\n                                        variant=\"outlined\"\r\n                                        value={this.state.account}\r\n                                    />\r\n                                </Grid>\r\n\r\n                                <Grid container item xs={12}>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        type=\"submit\"\r\n                                        disabled={!(this.state.captchaOK && this.state.formValid && this.state.active)}\r\n                                    >\r\n                                        Dispense\r\n                                    </Button>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Paper>\r\n                    </form>\r\n                )}\r\n            />\r\n            <Grid container>\r\n                <Grid container item xs={12}>\r\n                    <Typography gutterBottom>\r\n                        {\"Account Address: \"}\r\n                        <Link\r\n                            href={`https://${NETWORK}.algoexplorer.io/address/${this.state.account}`}\r\n                            variant=\"inherit\"\r\n                            color=\"primary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            {this.state.account}\r\n                        </Link>\r\n                    </Typography>\r\n                </Grid>\r\n                <Grid container item xs={12}>\r\n                    <Typography gutterBottom>\r\n                        {\"Transaction ID: \"}\r\n                        <Link\r\n                            href={`https://${NETWORK}.algoexplorer.io/tx/${this.state.transactionId}`}\r\n                            variant=\"inherit\"\r\n                            color=\"primary\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                        >\r\n                            {this.state.transactionId}\r\n                        </Link>\r\n                    </Typography>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    };\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}
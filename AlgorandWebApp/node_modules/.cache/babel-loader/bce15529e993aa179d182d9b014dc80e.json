{"ast":null,"code":"const client = require('../../client');\n\nconst mhc = require('../indexer/makeHealthCheck');\n\nconst lacbid = require('../indexer/lookupAccountByID');\n\nconst lact = require('../indexer/lookupAccountTransactions');\n\nconst lapp = require('../indexer/lookupApplications');\n\nconst lasb = require('../indexer/lookupAssetBalances');\n\nconst lasbid = require('../indexer/lookupAssetByID');\n\nconst last = require('../indexer/lookupAssetTransactions');\n\nconst lb = require('../indexer/lookupBlock');\n\nconst sfas = require('../indexer/searchForAssets');\n\nconst sfapp = require('../indexer/searchForApplications');\n\nconst sft = require('../indexer/searchForTransactions');\n\nconst sac = require('../indexer/searchAccounts');\n\nclass IndexerClient {\n  constructor(token, baseServer = \"http://127.0.0.1\", port = 8080, headers = {}) {\n    // workaround to allow backwards compatibility for multiple headers\n    let tokenHeader = token;\n\n    if (typeof tokenHeader == 'string') {\n      tokenHeader = {\n        \"X-Indexer-API-Token\": tokenHeader\n      };\n    }\n\n    let c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n    this.makeHealthCheck = function () {\n      return new mhc.MakeHealthCheck(c);\n    };\n\n    this.lookupAssetBalances = function (index) {\n      return new lasb.LookupAssetBalances(c, index);\n    };\n\n    this.lookupAssetTransactions = function (index) {\n      return new last.LookupAssetTransactions(c, index);\n    };\n\n    this.lookupAccountTransactions = function (account) {\n      return new lact.LookupAccountTransactions(c, account);\n    };\n\n    this.lookupBlock = function (round) {\n      return new lb.LookupBlock(c, round);\n    };\n\n    this.lookupAccountByID = function (account) {\n      return new lacbid.LookupAccountByID(c, account);\n    };\n\n    this.lookupAssetByID = function (index) {\n      return new lasbid.LookupAssetByID(c, index);\n    };\n\n    this.lookupApplications = function (index) {\n      return new lapp.LookupApplications(c, index);\n    };\n\n    this.searchAccounts = function () {\n      return new sac.SearchAccounts(c);\n    };\n\n    this.searchForTransactions = function () {\n      return new sft.SearchForTransactions(c);\n    };\n\n    this.searchForAssets = function () {\n      return new sfas.SearchForAssets(c);\n    };\n\n    this.searchForApplications = function () {\n      return new sfapp.SearchForApplications(c);\n    };\n  }\n\n}\n\nmodule.exports = {\n  IndexerClient\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/indexer/indexer.js"],"names":["client","require","mhc","lacbid","lact","lapp","lasb","lasbid","last","lb","sfas","sfapp","sft","sac","IndexerClient","constructor","token","baseServer","port","headers","tokenHeader","c","HTTPClient","makeHealthCheck","MakeHealthCheck","lookupAssetBalances","index","LookupAssetBalances","lookupAssetTransactions","LookupAssetTransactions","lookupAccountTransactions","account","LookupAccountTransactions","lookupBlock","round","LookupBlock","lookupAccountByID","LookupAccountByID","lookupAssetByID","LookupAssetByID","lookupApplications","LookupApplications","searchAccounts","SearchAccounts","searchForTransactions","SearchForTransactions","searchForAssets","SearchForAssets","searchForApplications","SearchForApplications","module","exports"],"mappings":"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","sourcesContent":["const client = require('../../client');\nconst mhc = require('../indexer/makeHealthCheck');\nconst lacbid = require('../indexer/lookupAccountByID');\nconst lact = require('../indexer/lookupAccountTransactions');\nconst lapp = require('../indexer/lookupApplications')\nconst lasb = require('../indexer/lookupAssetBalances');\nconst lasbid = require('../indexer/lookupAssetByID');\nconst last = require('../indexer/lookupAssetTransactions');\nconst lb = require('../indexer/lookupBlock');\nconst sfas = require('../indexer/searchForAssets');\nconst sfapp = require('../indexer/searchForApplications')\nconst sft = require('../indexer/searchForTransactions');\nconst sac = require('../indexer/searchAccounts');\n\n\nclass IndexerClient {\n    constructor(token, baseServer = \"http://127.0.0.1\", port = 8080, headers={}) {\n        // workaround to allow backwards compatibility for multiple headers\n        let tokenHeader = token;\n        if (typeof (tokenHeader) == 'string') {\n            tokenHeader = {\"X-Indexer-API-Token\": tokenHeader};\n        }\n\n        let c = new client.HTTPClient(tokenHeader, baseServer, port, headers);\n\n        this.makeHealthCheck = function() {\n            return new mhc.MakeHealthCheck(c);\n        };\n\n        this.lookupAssetBalances = function(index) {\n            return new lasb.LookupAssetBalances(c, index);\n        };\n\n        this.lookupAssetTransactions = function (index) {\n            return new last.LookupAssetTransactions(c, index);\n        };\n\n        this.lookupAccountTransactions = function(account) {\n            return new lact.LookupAccountTransactions(c, account);\n        };\n\n        this.lookupBlock = function(round) {\n            return new lb.LookupBlock(c, round);\n        };\n\n        this.lookupAccountByID = function(account){\n            return new lacbid.LookupAccountByID(c, account);\n        };\n\n        this.lookupAssetByID = function(index) {\n            return new lasbid.LookupAssetByID(c, index);\n        };\n\n        this.lookupApplications = function(index) {\n            return new lapp.LookupApplications(c, index);\n        }\n\n        this.searchAccounts = function() {\n            return new sac.SearchAccounts(c);\n        };\n\n        this.searchForTransactions = function() {\n            return new sft.SearchForTransactions(c);\n        };\n\n        this.searchForAssets = function() {\n            return new sfas.SearchForAssets(c);\n        };\n\n        this.searchForApplications = function() {\n            return new sfapp.SearchForApplications(c);\n        }\n    }\n}\nmodule.exports = {IndexerClient};\n"]},"metadata":{},"sourceType":"script"}
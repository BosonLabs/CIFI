{"ast":null,"code":"const {\n  Buffer\n} = require(\"buffer\");\n\nconst address = require(\"./encoding/address\");\n\nconst encoding = require(\"./encoding/encoding\");\n\nconst nacl = require(\"./nacl/naclWrappers\");\n\nconst utils = require(\"./utils/utils\");\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\n\n\nclass Bid {\n  constructor({\n    bidderKey,\n    bidAmount,\n    maxPrice,\n    bidID,\n    auctionKey,\n    auctionID\n  }) {\n    this.name = \"Bid\";\n    this.tag = Buffer.from([97, 66]); // \"aB\"\n\n    bidderKey = address.decodeAddress(bidderKey);\n    auctionKey = address.decodeAddress(auctionKey);\n    if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error(\"Bid amount must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error(\"BidID must be positive and 2^53-1\");\n    if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error(\"auctionID must be positive\");\n    Object.assign(this, {\n      bidderKey,\n      auctionKey,\n      bidAmount,\n      maxPrice,\n      bidID,\n      auctionID\n    });\n  }\n\n  get_obj_for_encoding() {\n    return {\n      \"bidder\": Buffer.from(this.bidderKey.publicKey),\n      \"cur\": this.bidAmount,\n      \"price\": this.maxPrice,\n      \"id\": this.bidID,\n      \"auc\": Buffer.from(this.auctionKey.publicKey),\n      \"aid\": this.auctionID\n    };\n  }\n\n  signBid(sk) {\n    const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n    const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    const sig = nacl.sign(toBeSigned, sk); // construct signed message\n\n    let sBid = {\n      \"sig\": Buffer.from(sig),\n      \"bid\": this.get_obj_for_encoding()\n    };\n    let note = {\n      \"t\": \"b\",\n      \"b\": sBid\n    };\n    return new Uint8Array(encoding.encode(note));\n  }\n\n}\n\nmodule.exports = {\n  Bid\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/bid.js"],"names":["Buffer","require","address","encoding","nacl","utils","Bid","constructor","bidderKey","bidAmount","maxPrice","bidID","auctionKey","auctionID","name","tag","from","decodeAddress","Number","isSafeInteger","Error","Object","assign","get_obj_for_encoding","publicKey","signBid","sk","encodedMsg","encode","toBeSigned","concatArrays","sig","sign","sBid","note","Uint8Array","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,oBAAD,CAAvB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,qBAAD,CAApB;;AACA,MAAMI,KAAK,GAAGJ,OAAO,CAAC,eAAD,CAArB;AAEA;AACA;AACA;;;AACA,MAAMK,GAAN,CAAU;AACNC,EAAAA,WAAW,CAAC;AAACC,IAAAA,SAAD;AAAYC,IAAAA,SAAZ;AAAuBC,IAAAA,QAAvB;AAAiCC,IAAAA,KAAjC;AAAwCC,IAAAA,UAAxC;AAAoDC,IAAAA;AAApD,GAAD,EAAiE;AACxE,SAAKC,IAAL,GAAY,KAAZ;AACA,SAAKC,GAAL,GAAWf,MAAM,CAACgB,IAAP,CAAY,CAAC,EAAD,EAAK,EAAL,CAAZ,CAAX,CAFwE,CAEtC;;AAElCR,IAAAA,SAAS,GAAGN,OAAO,CAACe,aAAR,CAAsBT,SAAtB,CAAZ;AACAI,IAAAA,UAAU,GAAGV,OAAO,CAACe,aAAR,CAAsBL,UAAtB,CAAb;AAEA,QAAI,CAACM,MAAM,CAACC,aAAP,CAAqBV,SAArB,CAAD,IAAoCA,SAAS,GAAG,CAApD,EAAuD,MAAMW,KAAK,CAAC,wCAAD,CAAX;AACvD,QAAI,CAACF,MAAM,CAACC,aAAP,CAAqBR,KAArB,CAAD,IAAgCA,KAAK,GAAG,CAA5C,EAA+C,MAAMS,KAAK,CAAC,mCAAD,CAAX;AAC/C,QAAI,CAACF,MAAM,CAACC,aAAP,CAAqBN,SAArB,CAAD,IAAoCA,SAAS,GAAG,CAApD,EAAuD,MAAMO,KAAK,CAAC,4BAAD,CAAX;AAEvDC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoB;AAChBd,MAAAA,SADgB;AACLI,MAAAA,UADK;AACOH,MAAAA,SADP;AACkBC,MAAAA,QADlB;AAC4BC,MAAAA,KAD5B;AACmCE,MAAAA;AADnC,KAApB;AAGH;;AAEDU,EAAAA,oBAAoB,GAAG;AACnB,WAAO;AACH,gBAAUvB,MAAM,CAACgB,IAAP,CAAY,KAAKR,SAAL,CAAegB,SAA3B,CADP;AAEH,aAAO,KAAKf,SAFT;AAGH,eAAS,KAAKC,QAHX;AAIH,YAAM,KAAKC,KAJR;AAKH,aAAOX,MAAM,CAACgB,IAAP,CAAY,KAAKJ,UAAL,CAAgBY,SAA5B,CALJ;AAMH,aAAO,KAAKX;AANT,KAAP;AAQH;;AAEDY,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR,UAAMC,UAAU,GAAGxB,QAAQ,CAACyB,MAAT,CAAgB,KAAKL,oBAAL,EAAhB,CAAnB;AACA,UAAMM,UAAU,GAAG7B,MAAM,CAACgB,IAAP,CAAYX,KAAK,CAACyB,YAAN,CAAmB,KAAKf,GAAxB,EAA6BY,UAA7B,CAAZ,CAAnB;AACA,UAAMI,GAAG,GAAG3B,IAAI,CAAC4B,IAAL,CAAUH,UAAV,EAAsBH,EAAtB,CAAZ,CAHQ,CAKR;;AACA,QAAIO,IAAI,GAAG;AACP,aAAOjC,MAAM,CAACgB,IAAP,CAAYe,GAAZ,CADA;AAEP,aAAO,KAAKR,oBAAL;AAFA,KAAX;AAMA,QAAIW,IAAI,GAAG;AACP,WAAK,GADE;AAEP,WAAKD;AAFE,KAAX;AAIA,WAAO,IAAIE,UAAJ,CAAehC,QAAQ,CAACyB,MAAT,CAAgBM,IAAhB,CAAf,CAAP;AACH;;AA7CK;;AAkDVE,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA;AAAD,CAAjB","sourcesContent":["const { Buffer } = require(\"buffer\");\nconst address = require(\"./encoding/address\");\nconst encoding = require(\"./encoding/encoding\");\nconst nacl = require(\"./nacl/naclWrappers\");\nconst utils = require(\"./utils/utils\");\n\n/**\n * Bid enables construction of Algorand Auctions Bids\n * */\nclass Bid {\n    constructor({bidderKey, bidAmount, maxPrice, bidID, auctionKey, auctionID}) {\n        this.name = \"Bid\";\n        this.tag = Buffer.from([97, 66]); // \"aB\"\n\n        bidderKey = address.decodeAddress(bidderKey);\n        auctionKey = address.decodeAddress(auctionKey);\n\n        if (!Number.isSafeInteger(bidAmount) || bidAmount < 0) throw Error(\"Bid amount must be positive and 2^53-1\");\n        if (!Number.isSafeInteger(bidID) || bidID < 0) throw Error(\"BidID must be positive and 2^53-1\");\n        if (!Number.isSafeInteger(auctionID) || auctionID < 0) throw Error(\"auctionID must be positive\");\n\n        Object.assign(this, {\n            bidderKey, auctionKey, bidAmount, maxPrice, bidID, auctionID,\n        });\n    }\n\n    get_obj_for_encoding() {\n        return {\n            \"bidder\": Buffer.from(this.bidderKey.publicKey),\n            \"cur\": this.bidAmount,\n            \"price\": this.maxPrice,\n            \"id\": this.bidID,\n            \"auc\": Buffer.from(this.auctionKey.publicKey),\n            \"aid\": this.auctionID,\n        };\n    }\n\n    signBid(sk) {\n        const encodedMsg = encoding.encode(this.get_obj_for_encoding());\n        const toBeSigned = Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n        const sig = nacl.sign(toBeSigned, sk);\n\n        // construct signed message\n        let sBid = {\n            \"sig\": Buffer.from(sig),\n            \"bid\": this.get_obj_for_encoding(),\n\n        };\n\n        let note = {\n            \"t\": \"b\",\n            \"b\": sBid\n        };\n        return new Uint8Array(encoding.encode(note));\n    }\n\n\n}\n\nmodule.exports = {Bid};"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255->8bit, 256-65535->16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\nconst msgpack = require(\"algo-msgpack-with-bigint\"); // Errors\n\n\nconst ERROR_CONTAINS_EMPTY_STRING = \"The object contains empty or 0 values. First empty or 0 value encountered during encoding: \";\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj\n * @returns {{firstEmptyKey: string, containsEmpty: boolean}} {true, empty key} if contains empty, {false, undefined} otherwise\n */\n\nfunction containsEmpty(obj) {\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      if (!obj[key] || obj[key].length === 0) {\n        return {\n          containsEmpty: true,\n          firstEmptyKey: key\n        };\n      }\n    }\n  }\n\n  return {\n    containsEmpty: false,\n    firstEmptyKey: undefined\n  };\n}\n/**\n * encode encodes objects using msgpack\n * @param obj a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns {Uint8Array} msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */\n\n\nfunction encode(obj) {\n  // Check for empty values\n  let emptyCheck = containsEmpty(obj);\n\n  if (emptyCheck[\"containsEmpty\"]) {\n    throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck[\"firstEmptyKey\"]);\n  } // enable the canonical option\n\n\n  let options = {\n    sortKeys: true\n  };\n  return msgpack.encode(obj, options);\n}\n\nfunction decode(obj) {\n  return msgpack.decode(obj);\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  ERROR_CONTAINS_EMPTY_STRING\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/encoding/encoding.js"],"names":["msgpack","require","ERROR_CONTAINS_EMPTY_STRING","containsEmpty","obj","key","hasOwnProperty","length","firstEmptyKey","undefined","encode","emptyCheck","Error","options","sortKeys","decode","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,0BAAD,CAAvB,C,CAEA;;;AACA,MAAMC,2BAA2B,GAAG,6FAApC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,OAAK,IAAIC,GAAT,IAAgBD,GAAhB,EAAqB;AACjB,QAAIA,GAAG,CAACE,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AACzB,UAAI,CAACD,GAAG,CAACC,GAAD,CAAJ,IAAaD,GAAG,CAACC,GAAD,CAAH,CAASE,MAAT,KAAoB,CAArC,EAAwC;AACtC,eAAO;AAACJ,UAAAA,aAAa,EAAG,IAAjB;AAAuBK,UAAAA,aAAa,EAAEH;AAAtC,SAAP;AACD;AACJ;AACJ;;AACD,SAAO;AAACF,IAAAA,aAAa,EAAG,KAAjB;AAAwBK,IAAAA,aAAa,EAAEC;AAAvC,GAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBN,GAAhB,EAAqB;AACjB;AACA,MAAIO,UAAU,GAAGR,aAAa,CAACC,GAAD,CAA9B;;AACA,MAAIO,UAAU,CAAC,eAAD,CAAd,EAAiC;AAAC,UAAM,IAAIC,KAAJ,CAAUV,2BAA2B,GAAGS,UAAU,CAAC,eAAD,CAAlD,CAAN;AAA4E,GAH7F,CAKjB;;;AACA,MAAIE,OAAO,GAAG;AAACC,IAAAA,QAAQ,EAAE;AAAX,GAAd;AACA,SAAOd,OAAO,CAACU,MAAR,CAAeN,GAAf,EAAoBS,OAApB,CAAP;AACH;;AAED,SAASE,MAAT,CAAgBX,GAAhB,EAAqB;AACjB,SAAOJ,OAAO,CAACe,MAAR,CAAeX,GAAf,CAAP;AACH;;AAEDY,MAAM,CAACC,OAAP,GAAiB;AAACP,EAAAA,MAAD;AAASK,EAAAA,MAAT;AAAiBb,EAAAA;AAAjB,CAAjB","sourcesContent":["/**\n * This file is a wrapper of msgpack.js.\n * The wrapper was written in order to ensure correct encoding of Algorand Transaction and other formats.\n * In particular, it matches go-algorand blockchain client, written in go (https://www.github.com/algorand/go-algorand.\n * Algorand's msgpack encoding follows to following rules -\n *  1. Every integer must be encoded to the smallest type possible (0-255->8bit, 256-65535->16bit, etx)\n *  2. All fields names must be sorted\n *  3. All empty and 0 fields should be omitted\n *  4. Every positive number must be encoded as uint\n *  5. Binary blob should be used for binary data and string for strings\n *  */\n\nconst msgpack = require(\"algo-msgpack-with-bigint\");\n\n// Errors\nconst ERROR_CONTAINS_EMPTY_STRING = \"The object contains empty or 0 values. First empty or 0 value encountered during encoding: \";\n\n/**\n * containsEmpty returns true if any of the object's values are empty, false otherwise.\n * Empty arrays considered empty\n * @param obj\n * @returns {{firstEmptyKey: string, containsEmpty: boolean}} {true, empty key} if contains empty, {false, undefined} otherwise\n */\nfunction containsEmpty(obj) {\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            if (!obj[key] || obj[key].length === 0) {\n              return {containsEmpty : true, firstEmptyKey: key}\n            }\n        }\n    }\n    return {containsEmpty : false, firstEmptyKey: undefined};\n}\n\n/**\n * encode encodes objects using msgpack\n * @param obj a dictionary to be encoded. Must not contain empty or 0 values.\n * @returns {Uint8Array} msgpack representation of the object\n * @throws Error containing ERROR_CONTAINS_EMPTY_STRING if the object contains empty or zero values\n */\nfunction encode(obj) {\n    // Check for empty values\n    let emptyCheck = containsEmpty(obj);\n    if (emptyCheck[\"containsEmpty\"]) {throw new Error(ERROR_CONTAINS_EMPTY_STRING + emptyCheck[\"firstEmptyKey\"]);}\n\n    // enable the canonical option\n    let options = {sortKeys: true};\n    return msgpack.encode(obj, options);\n}\n\nfunction decode(obj) {\n    return msgpack.decode(obj);\n}\n\nmodule.exports = {encode, decode, ERROR_CONTAINS_EMPTY_STRING};"]},"metadata":{},"sourceType":"script"}
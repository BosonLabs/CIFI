{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst con = async () => {//   await AlgoSigner.connect();\n  // let client = new algosdk.Algodv2(...);\n  // let testNetParams = await client.getTransactionParams().do();\n  // testNetParams.flatFee = true;\n  // let tx1 = new algosdk.Transaction({\n  //   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // let tx2 = new algosdk.Transaction({\n  //   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // algosdk.assignGroupID([tx1, tx2]);\n  // let sdkTxs = [tx1, tx2];\n  // let base64Txs = sdkTxs.map((tx) => {\n  //   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\n  // });\n  // let walletTxs = base64Txs.map((b64) => {\n  //   return { tx: b64 };\n  // });\n  // let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\n  // let sendResult = await client\n  //   .sendRawTransaction(\n  //     signedTxs.map((signedTx) =>\n  //       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\n  //     )\n  //   )\n  //   .do();\n};\n\nconst App = () => {\n  const getParms = () => {\n    AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    }).then(d => {\n      txParams = d;\n      console.log(\"tx\", txParams);\n    }).catch(e => {\n      console.error(e);\n    });\n  };\n\n  const Rasset = async () => {\n    const algosdk = require('algosdk');\n\n    var account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\n    let accc = recoveredAccount1.addr;\n    console.log(\"cacc\", accc);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n\n    let addr = recoveredAccount1.addr; //'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    //recoveredAccount1.addr;\n    // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"ASA\"; // Friendly name of the asset    \n\n    let assetName = \"demoRam\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n\n    let reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can freeze or unfreeze user asset holdings \n\n    let freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n    // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n\n    let clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q'; //recoveredAccount2.addr;\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true; // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params);\n    console.log(\"txnn\", txn);\n    let rawSignedTxn = txn.signTxn(recoveredAccount1.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n    //await waitForConfirmation(algodclient, tx.txId);\n    // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n    console.log(\"Cass\", assetID);\n    let accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']);\n  };\n\n  const AnoCreate = async () => {\n    const algosdk = require('algosdk');\n\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\n    const port = \"\"; //B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\n\n    const token = {\n      'X-API-key': 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'\n    };\n    let algodclient = new algosdk.Algodv2(token, baseServer, port);\n    console.log(\"re\", algodclient);\n    let account = '5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\n    let assetid = '1234'; //const printCreatedAsset = async function (algodclient, account, assetid) {\n    // note: if you have an indexer instance available it is easier to just use this\n    //     let accountInfo = await indexerClient.searchAccounts()\n    //    .assetID(assetIndex).do();\n    // and in the loop below use this to extract the asset for a particular account\n    // accountInfo['accounts'][idx][account]);\n\n    let accountInfo = await algodclient.accountInformation(account).do();\n    console.log(\"accIn\", accountInfo['amount']);\n    console.log(\"assIn\", accountInfo['assets']);\n\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n      if (scrutinizedAsset['index'] === assetid) {\n        console.log(\"AssetID = \" + scrutinizedAsset['index']);\n        let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n        console.log(\"parms = \" + myparms);\n        break;\n      }\n    }\n\n    let ac = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\"; //  let account_info = await algodclient.accountInformation(ac);\n\n    let account_info = await algodclient.accountInformation(ac).do();\n    let acct_string = JSON.stringify(account_info);\n    console.log(\"accinfo \" + acct_string);\n  };\n\n  const AssCreate = () => {\n    const algosdk = require('algosdk'); // Retrieve the token, server and port values for your installation in the \n    // algod.net and algod.token files within the data directory\n    // UPDATE THESE VALUES\n    // const token = \"TOKEN\";\n    // const server = \"SERVER\";\n    // const port = PORT;\n    //hackathon\n    // const token = \"ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1\";\n    // const server = \"http://hackathon.algodev.network\";\n    // const port = 9100;\n    // sandbox\n\n\n    const token = \"SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin\"; //const server = \"http://localhost\";\n\n    const server = \"https://testnet-algorand.api.purestake.io/idx2\";\n    const port = 4001;\n    let algodclient = new algosdk.Algod(token, server, port); // Function used to wait for a tx confirmation\n\n    const waitForConfirmation = async function (algodclient, txId) {\n      let response = await algodclient.status().do();\n      alert(\"response\" + response);\n      let lastround = response[\"last-round\"];\n\n      while (true) {\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\n\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\n          //Got the completed Transaction\n          console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\n          break;\n        }\n\n        lastround++;\n        await algodclient.statusAfterBlock(lastround).do();\n      }\n    }; // Function used to print created asset for account and assetid\n\n\n    const printCreatedAsset = async function (algodclient, account, assetid) {\n      // note: if you have an indexer instance available it is easier to just use this\n      //     let accountInfo = await indexerClient.searchAccounts()\n      //    .assetID(assetIndex).do();\n      // and in the loop below use this to extract the asset for a particular account\n      // accountInfo['accounts'][idx][account]);\n      let accountInfo = await algodclient.accountInformation(account).do();\n\n      for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\n\n        if (scrutinizedAsset['index'] == assetid) {\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\n          console.log(\"parms = \" + myparms);\n          break;\n        }\n      }\n    };\n  };\n\n  const AccCreate = async () => {\n    const algosdk = require('algosdk'); // In order to do this ASA tutorial, we will need to generate 3 accounts\n    // once created copy off the values which we will past into the TutorialASA code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    let acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\"); //const algosdk = require('algosdk');\n    //const server = 'https://testnet-algorand.api.purestake.io/ps2'\n\n    const server = \"https://testnet-algorand.api.purestake.io/idx2\"; //const port = '';\n\n    const token = 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin'; // // sandbox\n    // const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const server = \"http://localhost\";\n\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algod(token, server, port); //console.log(\"alcli\"+algodclient)\n    //(async () => {\n\n    let ac = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\n    let account_info = await algodclient.accountInformation(ac);\n    console.log(\"accinfo \" + account_info);\n    alert(\"acc\" + account_info);\n    let acct_string = JSON.stringify(account_info);\n    console.log(\"Account1Info: \" + acct_string); //})().catch(e => {\n    //console.log(e);\n    //  alert(\"error\");\n    //});\n  };\n\n  const create = async () => {\n    const algosdk = require('algosdk');\n\n    const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    const server = \"http://localhost\";\n    const port = 4001;\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n    //let addr = recoveredAccount1.addr;\n\n    let addr = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\"; // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"LATINUM\"; // Friendly name of the asset    \n\n    let assetName = \"latinum\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; //let manager = recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n    //let reserve = recoveredAccount2.addr;\n\n    let reserve = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can freeze or unfreeze user asset holdings \n    //let freeze = recoveredAccount2.addr;\n\n    let freeze = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n    //let clawback = recoveredAccount2.addr;\n\n    let clawback = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    console.log(params); // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params); //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\n\n    let rawSignedTxn = txn.signTxn(addr.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, tx.txId); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n  };\n\n  const balance = async () => {\n    const algosdk = require('algosdk'); // In order to do an ASA tutorial, we will need to generate 3 accounts\n    // once created, copy off the values which we will paste into the tutorial code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    var acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\"); // sandbox\n\n    const token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\n    const server = \"http://localhost\";\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    (async () => {\n      let account_info = await algodclient.accountInformation(recoveredAccount1.addr).do();\n      let acct_string = JSON.stringify(account_info);\n      console.log(\"Account 1 Info: \" + acct_string);\n    })().catch(e => {\n      console.log(e);\n    }); //     const algosdk = require('algosdk');\n    //   let account = algosdk.generateAccount();\n    // console.log(\"Account Address: \", account.addr);\n    // let mn = algosdk.secretKeyToMnemonic(account.sk);\n    // console.log(\"Account Mnemonic: \", mn);\n    // const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const server = \"http://localhost\";\n    // const port = 4001;\n    // // Instantiate the algod wrapper\n    // let algodclient = new algosdk.Algodv2(token, server, port);\n    // // (async () => {\n    // //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\n    // // let acct_string = JSON.stringify(account_info);\n    // // console.log(\"Account Info: \" + acct_string);\n    // // })().catch(e => {\n    // // console.log(e);\n    // // });\n    //     //alert(\"balance\")\n    //     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\n    //     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\n    //     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\n    //     console.log(\"My address: %s\", myAccount.addr)\n    //     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\n    //     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 669,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: Rasset,\n      children: \"Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 679,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","con","App","getParms","algod","path","then","d","txParams","catch","e","error","Rasset","algosdk","require","account3_mnemonic","recoveredAccount1","mnemonicToSecretKey","accc","addr","note","undefined","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","baseServer","port","token","algodclient","Algodv2","params","getTransactionParams","do","fee","flatFee","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signTxn","sk","tx","sendRawTransaction","txId","assetID","ptx","pendingTransactionInformation","accountInfo","accountInformation","AnoCreate","account","assetid","idx","length","scrutinizedAsset","myparms","ac","account_info","acct_string","AssCreate","server","Algod","waitForConfirmation","response","status","alert","lastround","pendingInfo","statusAfterBlock","printCreatedAsset","AccCreate","acct","generateAccount","account1","account1_mnemonic","secretKeyToMnemonic","isValid","isValidAddress","create","balance"],"mappings":"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","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\nconst con=async()=>{\r\n\r\n\r\n//   await AlgoSigner.connect();\r\n// let client = new algosdk.Algodv2(...);\r\n\r\n// let testNetParams = await client.getTransactionParams().do();\r\n// testNetParams.flatFee = true;\r\n\r\n// let tx1 = new algosdk.Transaction({\r\n//   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// let tx2 = new algosdk.Transaction({\r\n//   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// algosdk.assignGroupID([tx1, tx2]);\r\n\r\n// let sdkTxs = [tx1, tx2];\r\n// let base64Txs = sdkTxs.map((tx) => {\r\n//   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\r\n// });\r\n// let walletTxs = base64Txs.map((b64) => {\r\n//   return { tx: b64 };\r\n// });\r\n\r\n// let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\r\n\r\n// let sendResult = await client\r\n//   .sendRawTransaction(\r\n//     signedTxs.map((signedTx) =>\r\n//       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\r\n//     )\r\n//   )\r\n//   .do();\r\n  \r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const getParms=()=>{\r\n\r\n    AlgoSigner.algod({\r\n      ledger: 'TestNet',\r\n      path: '/v2/transactions/params'\r\n    })\r\n    .then((d) => {\r\n      txParams = d;\r\n      console.log(\"tx\",txParams)\r\n    })\r\n    .catch((e) => {\r\n      console.error(e);\r\n    });\r\n\r\n  }\r\n\r\nconst Rasset=async()=>{\r\n\r\nconst algosdk = require('algosdk');\r\n\r\n\r\nvar account3_mnemonic = \"tackle dove endorse style mind boring hidden fiction power wrap diesel more cruel ecology few field they chase oil deliver useless paddle nation abandon domain\";\r\n\r\n\r\n\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account3_mnemonic);\r\n\r\nlet accc=recoveredAccount1.addr;\r\n\r\nconsole.log(\"cacc\",accc)\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n\r\nlet addr = recoveredAccount1.addr;\r\n//'5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n//recoveredAccount1.addr;\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"ASA\";\r\n// Friendly name of the asset    \r\nlet assetName = \"demoRam\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\nlet reserve = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can freeze or unfreeze user asset holdings \r\nlet freeze = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n//recoveredAccount2.addr;\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\nlet clawback = '7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q';\r\n\r\n//recoveredAccount2.addr;\r\n\r\nconst baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n\r\n\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n\r\n    console.log(\"txnn\",txn);    \r\n\r\nlet rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\n//await waitForConfirmation(algodclient, tx.txId);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n\r\nconsole.log(\"Cass\",assetID);\r\n\r\n\r\nlet accountInfo = await algodclient.accountInformation(recoveredAccount1.addr).do();\r\n\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n\r\n\r\n  }\r\n\r\n  const AnoCreate=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n    const baseServer = \"https://testnet-algorand.api.purestake.io/ps2\";\r\n\r\n    \r\nconst port = \"\";\r\n\r\n//B3SU4KcVKi94Jap2VXkK83xx38bsv95K5UZm2lab\r\n\r\nconst token = {\r\n\r\n    'X-API-key' : 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin',\r\n}\r\n\r\n\r\n\r\nlet algodclient = new algosdk.Algodv2(token, baseServer, port);\r\n\r\n\r\nconsole.log(\"re\",algodclient);\r\n\r\nlet account='5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI';\r\n\r\nlet assetid='1234';\r\n\r\n\r\n//const printCreatedAsset = async function (algodclient, account, assetid) {\r\n  // note: if you have an indexer instance available it is easier to just use this\r\n  //     let accountInfo = await indexerClient.searchAccounts()\r\n  //    .assetID(assetIndex).do();\r\n  // and in the loop below use this to extract the asset for a particular account\r\n  // accountInfo['accounts'][idx][account]);\r\n  let accountInfo = await algodclient.accountInformation(account).do();\r\n\r\n\r\n  console.log(\"accIn\",accountInfo['amount']);\r\n\r\n  console.log(\"assIn\",accountInfo['assets']);\r\n\r\n  for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n      let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n      if (scrutinizedAsset['index'] === assetid) {\r\n          console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n          let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n          console.log(\"parms = \" + myparms);\r\n          break;\r\n      }\r\n  }\r\n\r\n\r\n  let ac=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n  //  let account_info = await algodclient.accountInformation(ac);\r\n    \r\n\r\n    let account_info = (await algodclient.accountInformation(ac).do());\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"accinfo \" + acct_string);\r\n  \r\n\r\n\r\n  }\r\n\r\n  const AssCreate=()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n// Retrieve the token, server and port values for your installation in the \r\n// algod.net and algod.token files within the data directory\r\n\r\n// UPDATE THESE VALUES\r\n// const token = \"TOKEN\";\r\n// const server = \"SERVER\";\r\n// const port = PORT;\r\n\r\n//hackathon\r\n// const token = \"ef920e2e7e002953f4b29a8af720efe8e4ecc75ff102b165e0472834b25832c1\";\r\n// const server = \"http://hackathon.algodev.network\";\r\n// const port = 9100;\r\n\r\n// sandbox\r\nconst token = \"SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin\";\r\n//const server = \"http://localhost\";\r\nconst server=\"https://testnet-algorand.api.purestake.io/idx2\";\r\nconst port = 4001;\r\n\r\n\r\nlet algodclient = new algosdk.Algod(token, server, port);\r\n\r\n// Function used to wait for a tx confirmation\r\nconst waitForConfirmation = async function (algodclient, txId) {\r\n    let response = await algodclient.status().do();\r\n    alert(\"response\"+response)\r\n    let lastround = response[\"last-round\"];\r\n    while (true) {\r\n        const pendingInfo = await algodclient.pendingTransactionInformation(txId).do();\r\n        if (pendingInfo[\"confirmed-round\"] !== null && pendingInfo[\"confirmed-round\"] > 0) {\r\n            //Got the completed Transaction\r\n            console.log(\"Transaction \" + txId + \" confirmed in round \" + pendingInfo[\"confirmed-round\"]);\r\n            break;\r\n        }\r\n        lastround++;\r\n        await algodclient.statusAfterBlock(lastround).do();\r\n    }\r\n};\r\n\r\n\r\n// Function used to print created asset for account and assetid\r\nconst printCreatedAsset = async function (algodclient, account, assetid) {\r\n    // note: if you have an indexer instance available it is easier to just use this\r\n    //     let accountInfo = await indexerClient.searchAccounts()\r\n    //    .assetID(assetIndex).do();\r\n    // and in the loop below use this to extract the asset for a particular account\r\n    // accountInfo['accounts'][idx][account]);\r\n    let accountInfo = await algodclient.accountInformation(account).do();\r\n    for (let idx = 0; idx < accountInfo['created-assets'].length; idx++) {\r\n        let scrutinizedAsset = accountInfo['created-assets'][idx];\r\n        if (scrutinizedAsset['index'] == assetid) {\r\n            console.log(\"AssetID = \" + scrutinizedAsset['index']);\r\n            let myparms = JSON.stringify(scrutinizedAsset['params'], undefined, 2);\r\n            console.log(\"parms = \" + myparms);\r\n            break;\r\n        }\r\n    }\r\n};\r\n\r\n\r\n  }\r\n\r\n  const AccCreate=async()=>{\r\n    const algosdk = require('algosdk');\r\n// In order to do this ASA tutorial, we will need to generate 3 accounts\r\n// once created copy off the values which we will past into the TutorialASA code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nlet acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n\r\n\r\n//const algosdk = require('algosdk');\r\n//const server = 'https://testnet-algorand.api.purestake.io/ps2'\r\n\r\nconst server=\"https://testnet-algorand.api.purestake.io/idx2\";\r\n//const port = '';\r\nconst token = 'SVsJKi8vBM1RwK1HEuwhU20hYmwFJelk8bagKPin';\r\n\r\n\r\n\r\n// // sandbox\r\n// const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const server = \"http://localhost\";\r\nconst port = 4001;\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algod(token, server, port);\r\n\r\n//console.log(\"alcli\"+algodclient)\r\n\r\n//(async () => {\r\n  let ac=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n    let account_info = await algodclient.accountInformation(ac);\r\n    console.log(\"accinfo \" + account_info);\r\n    alert(\"acc\"+account_info)\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"Account1Info: \" + acct_string);\r\n//})().catch(e => {\r\n    //console.log(e);\r\n  //  alert(\"error\");\r\n//});\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n\r\n  \r\n\r\n  const create=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n\r\nconst token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n//let addr = recoveredAccount1.addr;\r\nlet addr=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"LATINUM\";\r\n// Friendly name of the asset    \r\nlet assetName = \"latinum\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n//let manager = recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\n//let reserve = recoveredAccount2.addr;\r\nlet reserve=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can freeze or unfreeze user asset holdings \r\n//let freeze = recoveredAccount2.addr;\r\nlet freeze=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\n//let clawback = recoveredAccount2.addr;\r\nlet clawback=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n    console.log(params);\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n    //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet rawSignedTxn = txn.signTxn(addr.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nawait waitForConfirmation(algodclient, tx.txId);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n  }\r\n\r\n\r\n  const balance=async()=>{\r\n\r\n\r\n    const algosdk = require('algosdk');\r\n// In order to do an ASA tutorial, we will need to generate 3 accounts\r\n// once created, copy off the values which we will paste into the tutorial code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nvar acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n\r\n\r\n\r\n// sandbox\r\nconst token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n(async () => {\r\n    let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"Account 1 Info: \" + acct_string);\r\n    \r\n})().catch(e => {\r\n    console.log(e);\r\n});\r\n\r\n\r\n//     const algosdk = require('algosdk');\r\n\r\n\r\n//   let account = algosdk.generateAccount();\r\n// console.log(\"Account Address: \", account.addr);\r\n// let mn = algosdk.secretKeyToMnemonic(account.sk);\r\n// console.log(\"Account Mnemonic: \", mn);\r\n\r\n\r\n// const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const server = \"http://localhost\";\r\n// const port = 4001;\r\n\r\n// // Instantiate the algod wrapper\r\n// let algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n// // (async () => {\r\n// //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n\r\n// // let acct_string = JSON.stringify(account_info);\r\n// // console.log(\"Account Info: \" + acct_string);\r\n// // })().catch(e => {\r\n// // console.log(e);\r\n// // });\r\n\r\n\r\n\r\n//     //alert(\"balance\")\r\n\r\n//     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\r\n\r\n//     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\r\n\r\n//     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\r\n\r\n//     console.log(\"My address: %s\", myAccount.addr)\r\n\r\n//     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\r\n\r\n//     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {Rasset}>\r\n               Balance\r\n              </button>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
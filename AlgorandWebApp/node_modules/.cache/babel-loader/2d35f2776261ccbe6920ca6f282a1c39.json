{"ast":null,"code":"class SearchAccounts {\n  constructor(c) {\n    this.c = c;\n    this.query = {};\n  }\n  /**\n   * returns information about indexed accounts\n   * @param headers, optional\n   * @returns Promise<*>\n   */\n\n\n  async do(headers = {}) {\n    let res = await this.c.get(\"/v2/accounts\", this.query, headers);\n    return res.body;\n  }\n\n  // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n  currencyGreaterThan(greater) {\n    this.query[\"currency-greater-than\"] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyLessThan(lesser) {\n    this.query[\"currency-less-than\"] = lesser;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query[\"limit\"] = limit;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query[\"asset-id\"] = id;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query['next'] = nextToken;\n    return this;\n  } // specific round to search\n\n\n  round(round) {\n    this.query['round'] = round;\n    return this;\n  } // include accounts that use this spending key\n\n\n  authAddr(authAddr) {\n    this.query['auth-addr'] = authAddr;\n    return this;\n  } // filter for this application\n\n\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  SearchAccounts\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/indexer/searchAccounts.js"],"names":["SearchAccounts","constructor","c","query","do","headers","res","get","body","currencyGreaterThan","greater","currencyLessThan","lesser","limit","assetID","id","nextToken","round","authAddr","applicationID","module","exports"],"mappings":"AAAA,MAAMA,cAAN,CAAqB;AACpBC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACd,SAAKA,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAa,EAAb;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMC,EAAN,CAASC,OAAO,GAAG,EAAnB,EAAuB;AACtB,QAAIC,GAAG,GAAG,MAAM,KAAKJ,CAAL,CAAOK,GAAP,CAAW,cAAX,EAA2B,KAAKJ,KAAhC,EAAuCE,OAAvC,CAAhB;AACA,WAAOC,GAAG,CAACE,IAAX;AACA;;AAED;AACAC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC5B,SAAKP,KAAL,CAAW,uBAAX,IAAsCO,OAAtC;AACA,WAAO,IAAP;AACA,GApBmB,CAsBpB;;;AACAC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACxB,SAAKT,KAAL,CAAW,oBAAX,IAAmCS,MAAnC;AACA,WAAO,IAAP;AACA,GA1BmB,CA4BpB;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKV,KAAL,CAAW,OAAX,IAAsBU,KAAtB;AACA,WAAO,IAAP;AACA,GAhCmB,CAkCpB;;;AACAC,EAAAA,OAAO,CAACC,EAAD,EAAK;AACX,SAAKZ,KAAL,CAAW,UAAX,IAAyBY,EAAzB;AACA,WAAO,IAAP;AACA,GAtCmB,CAwCpB;;;AACAC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACpB,SAAKb,KAAL,CAAW,MAAX,IAAqBa,SAArB;AACA,WAAO,IAAP;AACA,GA5CmB,CA8CpB;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKd,KAAL,CAAW,OAAX,IAAsBc,KAAtB;AACA,WAAO,IAAP;AACA,GAlDmB,CAoDpB;;;AACAC,EAAAA,QAAQ,CAACA,QAAD,EAAW;AAClB,SAAKf,KAAL,CAAW,WAAX,IAA0Be,QAA1B;AACA,WAAO,IAAP;AACA,GAxDmB,CA0DpB;;;AACAC,EAAAA,aAAa,CAACA,aAAD,EAAgB;AAC5B,SAAKhB,KAAL,CAAW,gBAAX,IAA+BgB,aAA/B;AACA,WAAO,IAAP;AACA;;AA9DmB;;AAiErBC,MAAM,CAACC,OAAP,GAAiB;AAACrB,EAAAA;AAAD,CAAjB","sourcesContent":["class SearchAccounts {\n\tconstructor(c) {\n\t\tthis.c = c;\n\t\tthis.query = {};\n\t}\n\n\t/**\n\t * returns information about indexed accounts\n\t * @param headers, optional\n\t * @returns Promise<*>\n\t */\n\tasync do(headers = {}) {\n\t\tlet res = await this.c.get(\"/v2/accounts\", this.query, headers);\n\t\treturn res.body;\n\t};\n\n\t// filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\tcurrencyGreaterThan(greater) {\n\t\tthis.query[\"currency-greater-than\"] = greater;\n\t\treturn this;\n\t}\n\n\t// filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\tcurrencyLessThan(lesser) {\n\t\tthis.query[\"currency-less-than\"] = lesser;\n\t\treturn this;\n\t}\n\n\t// limit for filter, as int\n\tlimit(limit) {\n\t\tthis.query[\"limit\"] = limit;\n\t\treturn this;\n\t}\n\n\t// asset ID to filter with, as int\n\tassetID(id) {\n\t\tthis.query[\"asset-id\"] = id;\n\t\treturn this;\n\t}\n\n\t// used for pagination\n\tnextToken(nextToken) {\n\t\tthis.query['next'] = nextToken;\n\t\treturn this;\n\t}\n\n\t// specific round to search\n\tround(round) {\n\t\tthis.query['round'] = round;\n\t\treturn this;\n\t}\n\n\t// include accounts that use this spending key\n\tauthAddr(authAddr) {\n\t\tthis.query['auth-addr'] = authAddr;\n\t\treturn this;\n\t}\n\n\t// filter for this application\n\tapplicationID(applicationID) {\n\t\tthis.query['application-id'] = applicationID;\n\t\treturn this;\n\t}\n}\n\nmodule.exports = {SearchAccounts};\n"]},"metadata":{},"sourceType":"script"}
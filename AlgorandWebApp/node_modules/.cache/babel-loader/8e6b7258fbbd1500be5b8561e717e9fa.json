{"ast":null,"code":"class LookupAssetBalances {\n  constructor(c, index) {\n    this.c = c;\n    this.index = index;\n    this.query = {};\n  }\n  /**\n   * returns holder balances for the given asset\n   * @param headers, optional\n   * @returns Promise<*>\n   */\n\n\n  async do(headers = {}) {\n    let res = await this.c.get(\"/v2/assets/\" + this.index + \"/balances\", this.query, headers);\n    return res.body;\n  }\n\n  // limit for filter, as int\n  limit(limit) {\n    this.query[\"limit\"] = limit;\n    return this;\n  } // round to filter with, as int\n\n\n  round(round) {\n    this.query[\"round\"] = round;\n    return this;\n  } // filtered results should have an amount greater than this value, as int, with units representing the asset\n\n\n  currencyGreaterThan(greater) {\n    this.query[\"currency-greater-than\"] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, with units representing the asset units\n\n\n  currencyLessThan(lesser) {\n    this.query[\"currency-less-than\"] = lesser;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query['next'] = nextToken;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  LookupAssetBalances\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/indexer/lookupAssetBalances.js"],"names":["LookupAssetBalances","constructor","c","index","query","do","headers","res","get","body","limit","round","currencyGreaterThan","greater","currencyLessThan","lesser","nextToken","module","exports"],"mappings":"AAAA,MAAMA,mBAAN,CAA0B;AACzBC,EAAAA,WAAW,CAACC,CAAD,EAAIC,KAAJ,EAAW;AACrB,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMC,EAAN,CAASC,OAAO,GAAG,EAAnB,EAAuB;AACtB,QAAIC,GAAG,GAAG,MAAM,KAAKL,CAAL,CAAOM,GAAP,CAAW,gBAAgB,KAAKL,KAArB,GAA6B,WAAxC,EAAqD,KAAKC,KAA1D,EAAiEE,OAAjE,CAAhB;AACA,WAAOC,GAAG,CAACE,IAAX;AACA;;AAED;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKN,KAAL,CAAW,OAAX,IAAsBM,KAAtB;AACA,WAAO,IAAP;AACA,GArBwB,CAuBzB;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKP,KAAL,CAAW,OAAX,IAAsBO,KAAtB;AACA,WAAO,IAAP;AACA,GA3BwB,CA6BzB;;;AACAC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC5B,SAAKT,KAAL,CAAW,uBAAX,IAAsCS,OAAtC;AACA,WAAO,IAAP;AACA,GAjCwB,CAmCzB;;;AACAC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACxB,SAAKX,KAAL,CAAW,oBAAX,IAAmCW,MAAnC;AACA,WAAO,IAAP;AACA,GAvCwB,CAyCzB;;;AACAC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACpB,SAAKZ,KAAL,CAAW,MAAX,IAAqBY,SAArB;AACA,WAAO,IAAP;AACA;;AA7CwB;;AAgD1BC,MAAM,CAACC,OAAP,GAAiB;AAAClB,EAAAA;AAAD,CAAjB","sourcesContent":["class LookupAssetBalances {\n\tconstructor(c, index) {\n\t\tthis.c = c;\n\t\tthis.index = index;\n\t\tthis.query = {}\n\t}\n\n\t/**\n\t * returns holder balances for the given asset\n\t * @param headers, optional\n\t * @returns Promise<*>\n\t */\n\tasync do(headers = {}) {\n\t\tlet res = await this.c.get(\"/v2/assets/\" + this.index + \"/balances\", this.query, headers);\n\t\treturn res.body;\n\t};\n\n\t// limit for filter, as int\n\tlimit(limit) {\n\t\tthis.query[\"limit\"] = limit;\n\t\treturn this;\n\t}\n\n\t// round to filter with, as int\n\tround(round) {\n\t\tthis.query[\"round\"] = round;\n\t\treturn this;\n\t}\n\n\t// filtered results should have an amount greater than this value, as int, with units representing the asset\n\tcurrencyGreaterThan(greater) {\n\t\tthis.query[\"currency-greater-than\"] = greater;\n\t\treturn this;\n\t}\n\n\t// filtered results should have an amount less than this value, as int, with units representing the asset units\n\tcurrencyLessThan(lesser) {\n\t\tthis.query[\"currency-less-than\"] = lesser;\n\t\treturn this;\n\t}\n\n\t// used for pagination\n\tnextToken(nextToken) {\n\t\tthis.query['next'] = nextToken;\n\t\treturn this;\n\t}\n}\n\nmodule.exports = {LookupAssetBalances};\n"]},"metadata":{},"sourceType":"script"}
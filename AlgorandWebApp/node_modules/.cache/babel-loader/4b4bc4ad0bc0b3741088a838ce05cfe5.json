{"ast":null,"code":"const encoding = require('../../../encoding/encoding');\n\nclass Block {\n  constructor(c, roundNumber) {\n    if (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n    this.c = c;\n    this.round = roundNumber;\n    this.query = {\n      \"format\": \"msgpack\"\n    };\n  }\n  /**\n   * block gets the block info for the given round. this call may block\n   * @param headers, optional\n   * @returns {Promise<*>}\n   */\n\n\n  async do(headers = {}) {\n    let res = await this.c.get(\"/v2/blocks/\" + this.round, this.query, headers);\n\n    if (res.body && res.body.byteLength > 0) {\n      return encoding.decode(res.body);\n    }\n\n    return undefined;\n  }\n\n}\n\nmodule.exports = {\n  Block\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/algod/block.js"],"names":["encoding","require","Block","constructor","c","roundNumber","Number","isInteger","Error","round","query","do","headers","res","get","body","byteLength","decode","undefined","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEA,MAAMC,KAAN,CAAY;AACXC,EAAAA,WAAW,CAACC,CAAD,EAAIC,WAAJ,EAAgB;AAC1B,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,CAAL,EAAoC,MAAMG,KAAK,CAAC,kCAAD,CAAX;AACpC,SAAKJ,CAAL,GAASA,CAAT;AACA,SAAKK,KAAL,GAAaJ,WAAb;AACA,SAAKK,KAAL,GAAa;AAAC,gBAAU;AAAX,KAAb;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMC,EAAN,CAASC,OAAO,GAAC,EAAjB,EAAqB;AACpB,QAAIC,GAAG,GAAG,MAAM,KAAKT,CAAL,CAAOU,GAAP,CAAW,gBAAgB,KAAKL,KAAhC,EAAuC,KAAKC,KAA5C,EAAmDE,OAAnD,CAAhB;;AACA,QAAIC,GAAG,CAACE,IAAJ,IAAYF,GAAG,CAACE,IAAJ,CAASC,UAAT,GAAsB,CAAtC,EAAyC;AACxC,aAAOhB,QAAQ,CAACiB,MAAT,CAAgBJ,GAAG,CAACE,IAApB,CAAP;AACA;;AACD,WAAOG,SAAP;AACA;;AAnBU;;AAsBZC,MAAM,CAACC,OAAP,GAAiB;AAAElB,EAAAA;AAAF,CAAjB","sourcesContent":["const encoding = require('../../../encoding/encoding')\n\nclass Block {\n\tconstructor(c, roundNumber){\n\t\tif (!Number.isInteger(roundNumber)) throw Error(\"roundNumber should be an integer\");\n\t\tthis.c = c;\n\t\tthis.round = roundNumber;\n\t\tthis.query = {\"format\": \"msgpack\"}\n\t}\n\n\t/**\n\t * block gets the block info for the given round. this call may block\n\t * @param headers, optional\n\t * @returns {Promise<*>}\n\t */\n\tasync do(headers={}) {\n\t\tlet res = await this.c.get(\"/v2/blocks/\" + this.round, this.query, headers);\n\t\tif (res.body && res.body.byteLength > 0) {\n\t\t\treturn encoding.decode(res.body);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nmodule.exports = { Block };"]},"metadata":{},"sourceType":"script"}
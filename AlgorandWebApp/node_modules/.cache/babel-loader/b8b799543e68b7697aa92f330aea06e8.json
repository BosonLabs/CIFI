{"ast":null,"code":"const txnBuilder = require('./transaction');\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makePaymentTxn(from, to, fee, amount, closeRemainderTo, firstRound, lastRound, note, genesisHash, genesisID, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo);\n}\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *      If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"from\": from,\n    \"to\": to,\n    \"amount\": amount,\n    \"closeRemainderTo\": closeRemainderTo,\n    \"note\": note,\n    \"suggestedParams\": suggestedParams,\n    \"type\": \"pay\",\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n  return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo, o.note, o.suggestedParams, o.rekeyTo);\n}\n/**\n * makeKeyRegistrationTxn takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeKeyRegistrationTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo);\n}\n/**\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"from\": from,\n    \"note\": note,\n    \"voteKey\": voteKey,\n    \"selectionKey\": selectionKey,\n    \"voteFirst\": voteFirst,\n    \"voteLast\": voteLast,\n    \"voteKeyDilution\": voteKeyDilution,\n    \"suggestedParams\": suggestedParams,\n    \"type\": \"keyreg\",\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n  return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast, o.voteKeyDilution, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - string representation of some sort of hash commitment with respect to the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetCreateTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo);\n}\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - string representation of some sort of hash commitment with respect to the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"from\": from,\n    \"note\": note,\n    \"suggestedParams\": suggestedParams,\n    \"assetTotal\": total,\n    \"assetDecimals\": decimals,\n    \"assetDefaultFrozen\": defaultFrozen,\n    \"assetUnitName\": unitName,\n    \"assetName\": assetName,\n    \"assetURL\": assetURL,\n    \"assetMetadataHash\": assetMetadataHash,\n    \"assetManager\": manager,\n    \"assetReserve\": reserve,\n    \"assetFreeze\": freeze,\n    \"assetClawback\": clawback,\n    \"type\": \"acfg\",\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager, o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetConfigTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking = true, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking, rekeyTo);\n}\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking = true, rekeyTo = undefined) {\n  if (strictEmptyAddressChecking && (manager === undefined || reserve === undefined || freeze === undefined || clawback === undefined)) {\n    throw Error(\"strict empty address checking was turned on, but at least one empty address was provided\");\n  }\n\n  let o = {\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"assetIndex\": assetIndex,\n    \"assetManager\": manager,\n    \"assetReserve\": reserve,\n    \"assetFreeze\": freeze,\n    \"assetClawback\": clawback,\n    \"type\": \"acfg\",\n    \"note\": note,\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo);\n}\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetDestroyTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo);\n}\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"assetIndex\": assetIndex,\n    \"type\": \"acfg\",\n    \"note\": note,\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetFreezeTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, freezeTarget, freezeState, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo);\n}\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"from\": from,\n    \"type\": \"afrz\",\n    \"freezeAccount\": freezeTarget,\n    \"assetIndex\": assetIndex,\n    \"freezeState\": freezeState,\n    \"note\": note,\n    \"suggestedParams\": suggestedParams,\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget, o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\n\n\nfunction makeAssetTransferTxn(from, to, closeRemainderTo, revocationTarget, fee, amount, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo = undefined) {\n  let suggestedParams = {\n    \"genesisHash\": genesisHash,\n    \"genesisID\": genesisID,\n    \"firstRound\": firstRound,\n    \"lastRound\": lastRound,\n    \"fee\": fee\n  };\n  return makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo);\n}\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\n\n\nfunction makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"axfer\",\n    \"from\": from,\n    \"to\": to,\n    \"amount\": amount,\n    \"suggestedParams\": suggestedParams,\n    \"assetIndex\": assetIndex,\n    \"note\": note,\n    \"assetRevocationTarget\": revocationTarget,\n    \"closeRemainderTo\": closeRemainderTo,\n    \"rekeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\n\n\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n  return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget, o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n/*\n * Enums for application transactions on-transaction-complete behavior\n */\n\n\nlet OnApplicationComplete = {\n  // NoOpOC indicates that an application transaction will simply call its\n  // ApprovalProgram\n  NoOpOC: 0,\n  // OptInOC indicates that an application transaction will allocate some\n  // LocalState for the application in the sender's account\n  OptInOC: 1,\n  // CloseOutOC indicates that an application transaction will deallocate\n  // some LocalState for the application from the user's account\n  CloseOutOC: 2,\n  // ClearStateOC is similar to CloseOutOC, but may never fail. This\n  // allows users to reclaim their minimum balance from an application\n  // they no longer wish to opt in to.\n  ClearStateOC: 3,\n  // UpdateApplicationOC indicates that an application transaction will\n  // update the ApprovalProgram and ClearStateProgram for the application\n  UpdateApplicationOC: 4,\n  // DeleteApplicationOC indicates that an application transaction will\n  // delete the AppParams for the application from the creator's balance\n  // record\n  DeleteApplicationOC: 5\n};\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\nfunction makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram, numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": 0,\n    \"appOnComplete\": onComplete,\n    \"appLocalInts\": numLocalInts,\n    \"appLocalByteSlices\": numLocalByteSlices,\n    \"appGlobalInts\": numGlobalInts,\n    \"appGlobalByteSlices\": numGlobalByteSlices,\n    \"appApprovalProgram\": approvalProgram,\n    \"appClearProgram\": clearProgram,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationCreateTxn, instead accepting an arguments object\n\n\nfunction makeApplicationCreateTxnFromObject(o) {\n  return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram, o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appApprovalProgram\": approvalProgram,\n    \"appOnComplete\": OnApplicationComplete.UpdateApplicationOC,\n    \"appClearProgram\": clearProgram,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationUpdateTxn, instead accepting an arguments object\n\n\nfunction makeApplicationUpdateTxnFromObject(o) {\n  return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationDeleteTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appOnComplete\": OnApplicationComplete.DeleteApplicationOC,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationDeleteTxn, instead accepting an arguments object\n\n\nfunction makeApplicationDeleteTxnFromObject(o) {\n  return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationOptInTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appOnComplete\": OnApplicationComplete.OptInOC,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationOptInTxn, instead accepting an argument object\n\n\nfunction makeApplicationOptInTxnFromObject(o) {\n  return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationCloseOutTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appOnComplete\": OnApplicationComplete.CloseOutOC,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationCloseOutTxn, instead accepting an argument object\n\n\nfunction makeApplicationCloseOutTxnFromObject(o) {\n  return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationClearStateTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appOnComplete\": OnApplicationComplete.ClearStateOC,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationClearStateTxn, instead accepting an argument object\n\n\nfunction makeApplicationClearStateTxnFromObject(o) {\n  return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\n\n\nfunction makeApplicationNoOpTxn(from, suggestedParams, appIndex, appArgs = undefined, accounts = undefined, foreignApps = undefined, foreignAssets = undefined, note = undefined, lease = undefined, rekeyTo = undefined) {\n  let o = {\n    \"type\": \"appl\",\n    \"from\": from,\n    \"suggestedParams\": suggestedParams,\n    \"appIndex\": appIndex,\n    \"appOnComplete\": OnApplicationComplete.NoOpOC,\n    \"appArgs\": appArgs,\n    \"appAccounts\": accounts,\n    \"appForeignApps\": foreignApps,\n    \"appForeignAssets\": foreignAssets,\n    \"note\": note,\n    \"lease\": lease,\n    \"reKeyTo\": rekeyTo\n  };\n  return new txnBuilder.Transaction(o);\n} // helper for above makeApplicationNoOpTxn, instead accepting an argument object\n\n\nfunction makeApplicationNoOpTxnFromObject(o) {\n  return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex, o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\nmodule.exports = {\n  makePaymentTxn,\n  makePaymentTxnWithSuggestedParams,\n  makePaymentTxnWithSuggestedParamsFromObject,\n  makeKeyRegistrationTxn,\n  makeKeyRegistrationTxnWithSuggestedParams,\n  makeKeyRegistrationTxnWithSuggestedParamsFromObject,\n  makeAssetCreateTxn,\n  makeAssetCreateTxnWithSuggestedParams,\n  makeAssetCreateTxnWithSuggestedParamsFromObject,\n  makeAssetConfigTxn,\n  makeAssetConfigTxnWithSuggestedParams,\n  makeAssetConfigTxnWithSuggestedParamsFromObject,\n  makeAssetDestroyTxn,\n  makeAssetDestroyTxnWithSuggestedParams,\n  makeAssetDestroyTxnWithSuggestedParamsFromObject,\n  makeAssetFreezeTxn,\n  makeAssetFreezeTxnWithSuggestedParams,\n  makeAssetFreezeTxnWithSuggestedParamsFromObject,\n  makeAssetTransferTxn,\n  makeAssetTransferTxnWithSuggestedParams,\n  makeAssetTransferTxnWithSuggestedParamsFromObject,\n  OnApplicationComplete,\n  makeApplicationCreateTxn,\n  makeApplicationCreateTxnFromObject,\n  makeApplicationUpdateTxn,\n  makeApplicationUpdateTxnFromObject,\n  makeApplicationDeleteTxn,\n  makeApplicationDeleteTxnFromObject,\n  makeApplicationOptInTxn,\n  makeApplicationOptInTxnFromObject,\n  makeApplicationCloseOutTxn,\n  makeApplicationCloseOutTxnFromObject,\n  makeApplicationClearStateTxn,\n  makeApplicationClearStateTxnFromObject,\n  makeApplicationNoOpTxn,\n  makeApplicationNoOpTxnFromObject\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/makeTxn.js"],"names":["txnBuilder","require","makePaymentTxn","from","to","fee","amount","closeRemainderTo","firstRound","lastRound","note","genesisHash","genesisID","rekeyTo","undefined","suggestedParams","makePaymentTxnWithSuggestedParams","o","Transaction","makePaymentTxnWithSuggestedParamsFromObject","makeKeyRegistrationTxn","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","makeKeyRegistrationTxnWithSuggestedParams","makeKeyRegistrationTxnWithSuggestedParamsFromObject","makeAssetCreateTxn","total","decimals","defaultFrozen","manager","reserve","freeze","clawback","unitName","assetName","assetURL","assetMetadataHash","makeAssetCreateTxnWithSuggestedParams","makeAssetCreateTxnWithSuggestedParamsFromObject","makeAssetConfigTxn","assetIndex","strictEmptyAddressChecking","makeAssetConfigTxnWithSuggestedParams","Error","makeAssetConfigTxnWithSuggestedParamsFromObject","makeAssetDestroyTxn","makeAssetDestroyTxnWithSuggestedParams","makeAssetDestroyTxnWithSuggestedParamsFromObject","makeAssetFreezeTxn","freezeTarget","freezeState","makeAssetFreezeTxnWithSuggestedParams","makeAssetFreezeTxnWithSuggestedParamsFromObject","makeAssetTransferTxn","revocationTarget","makeAssetTransferTxnWithSuggestedParams","makeAssetTransferTxnWithSuggestedParamsFromObject","OnApplicationComplete","NoOpOC","OptInOC","CloseOutOC","ClearStateOC","UpdateApplicationOC","DeleteApplicationOC","makeApplicationCreateTxn","onComplete","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","accounts","foreignApps","foreignAssets","lease","makeApplicationCreateTxnFromObject","makeApplicationUpdateTxn","appIndex","makeApplicationUpdateTxnFromObject","makeApplicationDeleteTxn","makeApplicationDeleteTxnFromObject","makeApplicationOptInTxn","makeApplicationOptInTxnFromObject","makeApplicationCloseOutTxn","makeApplicationCloseOutTxnFromObject","makeApplicationClearStateTxn","makeApplicationClearStateTxnFromObject","makeApplicationNoOpTxn","makeApplicationNoOpTxnFromObject","module","exports"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,EAA9B,EAAkCC,GAAlC,EAAuCC,MAAvC,EAA+CC,gBAA/C,EAAiEC,UAAjE,EAA6EC,SAA7E,EAAwFC,IAAxF,EAA8FC,WAA9F,EAA2GC,SAA3G,EAAsHC,OAAO,GAACC,SAA9H,EAAyI;AACrI,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOW,iCAAiC,CAACb,IAAD,EAAOC,EAAP,EAAWE,MAAX,EAAmBC,gBAAnB,EAAqCG,IAArC,EAA2CK,eAA3C,EAA4DF,OAA5D,CAAxC;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,iCAAT,CAA2Cb,IAA3C,EAAiDC,EAAjD,EAAqDE,MAArD,EAA6DC,gBAA7D,EAA+EG,IAA/E,EAAqFK,eAArF,EAAsGF,OAAO,GAACC,SAA9G,EAAyH;AACrH,MAAIG,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,UAAMC,EAFF;AAGJ,cAAUE,MAHN;AAIJ,wBAAoBC,gBAJhB;AAKJ,YAAQG,IALJ;AAMJ,uBAAmBK,eANf;AAOJ,YAAQ,KAPJ;AAQJ,eAAWF;AARP,GAAR;AAUA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASE,2CAAT,CAAqDF,CAArD,EAAwD;AACpD,SAAOD,iCAAiC,CAACC,CAAC,CAACd,IAAH,EAASc,CAAC,CAACb,EAAX,EAAea,CAAC,CAACX,MAAjB,EAAyBW,CAAC,CAACV,gBAA3B,EACpCU,CAAC,CAACP,IADkC,EAC5BO,CAAC,CAACF,eAD0B,EACTE,CAAC,CAACJ,OADO,CAAxC;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,sBAAT,CAAgCjB,IAAhC,EAAsCE,GAAtC,EAA2CG,UAA3C,EAAuDC,SAAvD,EAAkEC,IAAlE,EAAwEC,WAAxE,EAAqFC,SAArF,EACgCS,OADhC,EACyCC,YADzC,EACuDC,SADvD,EACkEC,QADlE,EAC4EC,eAD5E,EAC6FZ,OAAO,GAACC,SADrG,EACgH;AAC5G,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOqB,yCAAyC,CAACvB,IAAD,EAAOO,IAAP,EAAaW,OAAb,EAAsBC,YAAtB,EAAoCC,SAApC,EAA+CC,QAA/C,EAAyDC,eAAzD,EAA0EV,eAA1E,EAA2FF,OAA3F,CAAhD;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASa,yCAAT,CAAmDvB,IAAnD,EAAyDO,IAAzD,EAA+DW,OAA/D,EAAwEC,YAAxE,EAAsFC,SAAtF,EAAiGC,QAAjG,EAA2GC,eAA3G,EAA4HV,eAA5H,EAA6IF,OAAO,GAACC,SAArJ,EAAgK;AAC5J,MAAIG,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,YAAQO,IAFJ;AAGJ,eAAWW,OAHP;AAIJ,oBAAgBC,YAJZ;AAKJ,iBAAaC,SALT;AAMJ,gBAAYC,QANR;AAOJ,uBAAmBC,eAPf;AAQJ,uBAAmBV,eARf;AASJ,YAAQ,QATJ;AAUJ,eAAWF;AAVP,GAAR;AAYA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASU,mDAAT,CAA6DV,CAA7D,EAAgE;AAC5D,SAAOS,yCAAyC,CAACT,CAAC,CAACd,IAAH,EAASc,CAAC,CAACP,IAAX,EAAiBO,CAAC,CAACI,OAAnB,EAA4BJ,CAAC,CAACK,YAA9B,EAA4CL,CAAC,CAACM,SAA9C,EAAyDN,CAAC,CAACO,QAA3D,EAC5CP,CAAC,CAACQ,eAD0C,EACzBR,CAAC,CAACF,eADuB,EACNE,CAAC,CAACJ,OADI,CAAhD;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASe,kBAAT,CAA4BzB,IAA5B,EAAkCE,GAAlC,EAAuCG,UAAvC,EAAmDC,SAAnD,EAA8DC,IAA9D,EAAoEC,WAApE,EAAiFC,SAAjF,EAC4BiB,KAD5B,EACmCC,QADnC,EAC6CC,aAD7C,EAC4DC,OAD5D,EACqEC,OADrE,EAC8EC,MAD9E,EAE4BC,QAF5B,EAEsCC,QAFtC,EAEgDC,SAFhD,EAE2DC,QAF3D,EAEqEC,iBAFrE,EAEwF1B,OAAO,GAACC,SAFhG,EAE2G;AACvG,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOmC,qCAAqC,CAACrC,IAAD,EAAOO,IAAP,EAAamB,KAAb,EAAoBC,QAApB,EAA8BC,aAA9B,EAA6CC,OAA7C,EAAsDC,OAAtD,EAA+DC,MAA/D,EAAuEC,QAAvE,EACxCC,QADwC,EAC9BC,SAD8B,EACnBC,QADmB,EACTC,iBADS,EACUxB,eADV,EAC2BF,OAD3B,CAA5C;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2B,qCAAT,CAA+CrC,IAA/C,EAAqDO,IAArD,EAA2DmB,KAA3D,EAAkEC,QAAlE,EAA4EC,aAA5E,EAA2FC,OAA3F,EAAoGC,OAApG,EAA6GC,MAA7G,EAC4BC,QAD5B,EACsCC,QADtC,EACgDC,SADhD,EAC2DC,QAD3D,EACqEC,iBADrE,EACwFxB,eADxF,EACyGF,OAAO,GAACC,SADjH,EAC4H;AACxH,MAAIG,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,YAAQO,IAFJ;AAGJ,uBAAmBK,eAHf;AAIJ,kBAAcc,KAJV;AAKJ,qBAAiBC,QALb;AAMJ,0BAAsBC,aANlB;AAOJ,qBAAiBK,QAPb;AAQJ,iBAAaC,SART;AASJ,gBAAYC,QATR;AAUJ,yBAAqBC,iBAVjB;AAWJ,oBAAgBP,OAXZ;AAYJ,oBAAgBC,OAZZ;AAaJ,mBAAeC,MAbX;AAcJ,qBAAiBC,QAdb;AAeJ,YAAQ,MAfJ;AAgBJ,eAAWtB;AAhBP,GAAR;AAkBA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASwB,+CAAT,CAAyDxB,CAAzD,EAA4D;AACxD,SAAOuB,qCAAqC,CAACvB,CAAC,CAACd,IAAH,EAASc,CAAC,CAACP,IAAX,EAAiBO,CAAC,CAACY,KAAnB,EAA0BZ,CAAC,CAACa,QAA5B,EAAsCb,CAAC,CAACc,aAAxC,EAAuDd,CAAC,CAACe,OAAzD,EACxCf,CAAC,CAACgB,OADsC,EAC7BhB,CAAC,CAACiB,MAD2B,EACnBjB,CAAC,CAACkB,QADiB,EACPlB,CAAC,CAACmB,QADK,EACKnB,CAAC,CAACoB,SADP,EACkBpB,CAAC,CAACqB,QADpB,EAC8BrB,CAAC,CAACsB,iBADhC,EACmDtB,CAAC,CAACF,eADrD,EAExCE,CAAC,CAACJ,OAFsC,CAA5C;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6B,kBAAT,CAA4BvC,IAA5B,EAAkCE,GAAlC,EAAuCG,UAAvC,EAAmDC,SAAnD,EAA8DC,IAA9D,EAAoEC,WAApE,EAAiFC,SAAjF,EAC4B+B,UAD5B,EACwCX,OADxC,EACiDC,OADjD,EAC0DC,MAD1D,EACkEC,QADlE,EAC4ES,0BAA0B,GAAC,IADvG,EAC6G/B,OAAO,GAACC,SADrH,EACgI;AAC5H,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOwC,qCAAqC,CAAC1C,IAAD,EAAOO,IAAP,EAAaiC,UAAb,EAAyBX,OAAzB,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmDC,QAAnD,EAA6DpB,eAA7D,EAA8E6B,0BAA9E,EAA0G/B,OAA1G,CAA5C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,qCAAT,CAA+C1C,IAA/C,EAAqDO,IAArD,EAA2DiC,UAA3D,EACsCX,OADtC,EAC+CC,OAD/C,EACwDC,MADxD,EACgEC,QADhE,EAC0EpB,eAD1E,EAC2F6B,0BAA0B,GAAC,IADtH,EAC4H/B,OAAO,GAACC,SADpI,EAC+I;AAC3I,MAAI8B,0BAA0B,KAAMZ,OAAO,KAAKlB,SAAb,IAA4BmB,OAAO,KAAKnB,SAAxC,IAAuDoB,MAAM,KAAKpB,SAAlE,IAAiFqB,QAAQ,KAAKrB,SAAnG,CAA9B,EAA8I;AAC1I,UAAMgC,KAAK,CAAC,0FAAD,CAAX;AACH;;AACD,MAAI7B,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,uBAAmBY,eAFf;AAGJ,kBAAc4B,UAHV;AAIJ,oBAAgBX,OAJZ;AAKJ,oBAAgBC,OALZ;AAMJ,mBAAeC,MANX;AAOJ,qBAAiBC,QAPb;AAQJ,YAAQ,MARJ;AASJ,YAAQzB,IATJ;AAUJ,eAAWG;AAVP,GAAR;AAYA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAAS8B,+CAAT,CAAyD9B,CAAzD,EAA4D;AACxD,SAAO4B,qCAAqC,CAAC5B,CAAC,CAACd,IAAH,EAASc,CAAC,CAACP,IAAX,EAAiBO,CAAC,CAAC0B,UAAnB,EACxC1B,CAAC,CAACe,OADsC,EAC7Bf,CAAC,CAACgB,OAD2B,EAClBhB,CAAC,CAACiB,MADgB,EACRjB,CAAC,CAACkB,QADM,EACIlB,CAAC,CAACF,eADN,EACuBE,CAAC,CAAC2B,0BADzB,EACqD3B,CAAC,CAACJ,OADvD,CAA5C;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmC,mBAAT,CAA6B7C,IAA7B,EAAmCE,GAAnC,EAAwCG,UAAxC,EAAoDC,SAApD,EAA+DC,IAA/D,EAAqEC,WAArE,EAAkFC,SAAlF,EAA6F+B,UAA7F,EAAyG9B,OAAO,GAACC,SAAjH,EAA4H;AACxH,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAO4C,sCAAsC,CAAC9C,IAAD,EAAOO,IAAP,EAAaiC,UAAb,EAAyB5B,eAAzB,EAA0CF,OAA1C,CAA7C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoC,sCAAT,CAAgD9C,IAAhD,EAAsDO,IAAtD,EAA4DiC,UAA5D,EAAwE5B,eAAxE,EAAyFF,OAAO,GAACC,SAAjG,EAA4G;AACxG,MAAIG,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,uBAAmBY,eAFf;AAGJ,kBAAc4B,UAHV;AAIJ,YAAQ,MAJJ;AAKJ,YAAQjC,IALJ;AAMJ,eAAWG;AANP,GAAR;AAQA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASiC,gDAAT,CAA0DjC,CAA1D,EAA6D;AACzD,SAAOgC,sCAAsC,CAAChC,CAAC,CAACd,IAAH,EAASc,CAAC,CAACP,IAAX,EAAiBO,CAAC,CAAC0B,UAAnB,EAA+B1B,CAAC,CAACF,eAAjC,EAAkDE,CAAC,CAACJ,OAApD,CAA7C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsC,kBAAT,CAA4BhD,IAA5B,EAAkCE,GAAlC,EAAuCG,UAAvC,EAAmDC,SAAnD,EAA8DC,IAA9D,EAAoEC,WAApE,EAAiFC,SAAjF,EAC4B+B,UAD5B,EACwCS,YADxC,EACsDC,WADtD,EACmExC,OAAO,GAACC,SAD3E,EACsF;AAClF,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOiD,qCAAqC,CAACnD,IAAD,EAAOO,IAAP,EAAaiC,UAAb,EAAyBS,YAAzB,EAAuCC,WAAvC,EAAoDtC,eAApD,EAAqEF,OAArE,CAA5C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyC,qCAAT,CAA+CnD,IAA/C,EAAqDO,IAArD,EAA2DiC,UAA3D,EAAuES,YAAvE,EAAqFC,WAArF,EAAkGtC,eAAlG,EAAmHF,OAAO,GAACC,SAA3H,EAAsI;AAClI,MAAIG,CAAC,GAAG;AACJ,YAAQd,IADJ;AAEJ,YAAQ,MAFJ;AAGJ,qBAAiBiD,YAHb;AAIJ,kBAAcT,UAJV;AAKJ,mBAAgBU,WALZ;AAMJ,YAAQ3C,IANJ;AAOJ,uBAAmBK,eAPf;AAQJ,eAAWF;AARP,GAAR;AAUA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASsC,+CAAT,CAAyDtC,CAAzD,EAA4D;AACxD,SAAOqC,qCAAqC,CAACrC,CAAC,CAACd,IAAH,EAASc,CAAC,CAACP,IAAX,EAAiBO,CAAC,CAAC0B,UAAnB,EAA+B1B,CAAC,CAACmC,YAAjC,EACxCnC,CAAC,CAACoC,WADsC,EACzBpC,CAAC,CAACF,eADuB,EACNE,CAAC,CAACJ,OADI,CAA5C;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2C,oBAAT,CAA8BrD,IAA9B,EAAoCC,EAApC,EAAwCG,gBAAxC,EAA0DkD,gBAA1D,EAC8BpD,GAD9B,EACmCC,MADnC,EAC2CE,UAD3C,EACuDC,SADvD,EACkEC,IADlE,EACwEC,WADxE,EACqFC,SADrF,EACgG+B,UADhG,EAC4G9B,OAAO,GAACC,SADpH,EAC+H;AAC3H,MAAIC,eAAe,GAAG;AAClB,mBAAeJ,WADG;AAElB,iBAAaC,SAFK;AAGlB,kBAAcJ,UAHI;AAIlB,iBAAaC,SAJK;AAKlB,WAAOJ;AALW,GAAtB;AAOA,SAAOqD,uCAAuC,CAACvD,IAAD,EAAOC,EAAP,EAAWG,gBAAX,EAA6BkD,gBAA7B,EAA+CnD,MAA/C,EAAuDI,IAAvD,EAA6DiC,UAA7D,EAAyE5B,eAAzE,EAA0FF,OAA1F,CAA9C;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6C,uCAAT,CAAiDvD,IAAjD,EAAuDC,EAAvD,EAA2DG,gBAA3D,EAA6EkD,gBAA7E,EAC8BnD,MAD9B,EACsCI,IADtC,EAC4CiC,UAD5C,EACwD5B,eADxD,EACyEF,OAAO,GAACC,SADjF,EAC4F;AACxF,MAAIG,CAAC,GAAG;AACJ,YAAQ,OADJ;AAEJ,YAAQd,IAFJ;AAGJ,UAAMC,EAHF;AAIJ,cAAUE,MAJN;AAKJ,uBAAmBS,eALf;AAMJ,kBAAc4B,UANV;AAOJ,YAAQjC,IAPJ;AAQJ,6BAAyB+C,gBARrB;AASJ,wBAAoBlD,gBAThB;AAUJ,eAAWM;AAVP,GAAR;AAYA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAAS0C,iDAAT,CAA2D1C,CAA3D,EAA8D;AAC1D,SAAOyC,uCAAuC,CAACzC,CAAC,CAACd,IAAH,EAASc,CAAC,CAACb,EAAX,EAAea,CAAC,CAACV,gBAAjB,EAAmCU,CAAC,CAACwC,gBAArC,EAC1CxC,CAAC,CAACX,MADwC,EAChCW,CAAC,CAACP,IAD8B,EACxBO,CAAC,CAAC0B,UADsB,EACV1B,CAAC,CAACF,eADQ,EACSE,CAAC,CAACJ,OADX,CAA9C;AAEH;AAED;AACA;AACA;;;AACA,IAAI+C,qBAAqB,GAAG;AACxB;AACA;AACAC,EAAAA,MAAM,EAAG,CAHe;AAIxB;AACA;AACAC,EAAAA,OAAO,EAAG,CANc;AAOxB;AACA;AACAC,EAAAA,UAAU,EAAG,CATW;AAUxB;AACA;AACA;AACAC,EAAAA,YAAY,EAAG,CAbS;AAcxB;AACA;AACAC,EAAAA,mBAAmB,EAAG,CAhBE;AAiBxB;AACA;AACA;AACAC,EAAAA,mBAAmB,EAAG;AApBE,CAA5B;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,wBAAT,CAAkChE,IAAlC,EAAwCY,eAAxC,EAAyDqD,UAAzD,EAAqEC,eAArE,EAAsFC,YAAtF,EACkCC,YADlC,EACgDC,kBADhD,EACoEC,aADpE,EACmFC,mBADnF,EAEkCC,OAAO,GAAE7D,SAF3C,EAEsD8D,QAAQ,GAAE9D,SAFhE,EAE2E+D,WAAW,GAAE/D,SAFxF,EAGkCgE,aAAa,GAAGhE,SAHlD,EAIkCJ,IAAI,GAAGI,SAJzC,EAIoDiE,KAAK,GAAGjE,SAJ5D,EAIuED,OAAO,GAAGC,SAJjF,EAI4F;AACxF,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAY,CAJR;AAKJ,qBAAiBqD,UALb;AAMJ,oBAAgBG,YANZ;AAOJ,0BAAsBC,kBAPlB;AAQJ,qBAAiBC,aARb;AASJ,2BAAuBC,mBATnB;AAUJ,0BAAsBL,eAVlB;AAWJ,uBAAmBC,YAXf;AAYJ,eAAWK,OAZP;AAaJ,mBAAeC,QAbX;AAcJ,sBAAkBC,WAdd;AAeJ,wBAAoBC,aAfhB;AAgBJ,YAAQpE,IAhBJ;AAiBJ,aAASqE,KAjBL;AAkBJ,eAAWlE;AAlBP,GAAR;AAoBA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAAS+D,kCAAT,CAA4C/D,CAA5C,EAA+C;AAC3C,SAAOkD,wBAAwB,CAAClD,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACmD,UAA9B,EAA0CnD,CAAC,CAACoD,eAA5C,EAA6DpD,CAAC,CAACqD,YAA/D,EAC3BrD,CAAC,CAACsD,YADyB,EACXtD,CAAC,CAACuD,kBADS,EACWvD,CAAC,CAACwD,aADb,EAC4BxD,CAAC,CAACyD,mBAD9B,EAE3BzD,CAAC,CAAC0D,OAFyB,EAEhB1D,CAAC,CAAC2D,QAFc,EAEJ3D,CAAC,CAAC4D,WAFE,EAEW5D,CAAC,CAAC6D,aAFb,EAE4B7D,CAAC,CAACP,IAF9B,EAEoCO,CAAC,CAAC8D,KAFtC,EAE6C9D,CAAC,CAACJ,OAF/C,CAA/B;AAGH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoE,wBAAT,CAAkC9E,IAAlC,EAAwCY,eAAxC,EAAyDmE,QAAzD,EAAmEb,eAAnE,EAAoFC,YAApF,EACkCK,OAAO,GAAG7D,SAD5C,EACuD8D,QAAQ,GAAG9D,SADlE,EAC6E+D,WAAW,GAAG/D,SAD3F,EAEkCgE,aAAa,GAAGhE,SAFlD,EAGkCJ,IAAI,GAAGI,SAHzC,EAGoDiE,KAAK,GAAGjE,SAH5D,EAGuED,OAAO,GAAGC,SAHjF,EAG4F;AACxF,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,0BAAsBb,eALlB;AAMJ,qBAAiBT,qBAAqB,CAACK,mBANnC;AAOJ,uBAAmBK,YAPf;AAQJ,eAAWK,OARP;AASJ,mBAAeC,QATX;AAUJ,sBAAkBC,WAVd;AAWJ,wBAAoBC,aAXhB;AAYJ,YAAQpE,IAZJ;AAaJ,aAASqE,KAbL;AAcJ,eAAWlE;AAdP,GAAR;AAgBA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASkE,kCAAT,CAA4ClE,CAA5C,EAA+C;AAC3C,SAAOgE,wBAAwB,CAAChE,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EAAwCjE,CAAC,CAACoD,eAA1C,EAA2DpD,CAAC,CAACqD,YAA7D,EAC3BrD,CAAC,CAAC0D,OADyB,EAChB1D,CAAC,CAAC2D,QADc,EACJ3D,CAAC,CAAC4D,WADE,EACW5D,CAAC,CAAC6D,aADb,EAC4B7D,CAAC,CAACP,IAD9B,EACoCO,CAAC,CAAC8D,KADtC,EAC6C9D,CAAC,CAACJ,OAD/C,CAA/B;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASuE,wBAAT,CAAkCjF,IAAlC,EAAwCY,eAAxC,EAAyDmE,QAAzD,EACkCP,OAAO,GAAG7D,SAD5C,EACuD8D,QAAQ,GAAG9D,SADlE,EAC6E+D,WAAW,GAAG/D,SAD3F,EAEkCgE,aAAa,GAAGhE,SAFlD,EAGkCJ,IAAI,GAAGI,SAHzC,EAGoDiE,KAAK,GAAGjE,SAH5D,EAGuED,OAAO,GAAGC,SAHjF,EAG4F;AACxF,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,qBAAiBtB,qBAAqB,CAACM,mBALnC;AAMJ,eAAWS,OANP;AAOJ,mBAAeC,QAPX;AAQJ,sBAAkBC,WARd;AASJ,wBAAoBC,aAThB;AAUJ,YAAQpE,IAVJ;AAWJ,aAASqE,KAXL;AAYJ,eAAWlE;AAZP,GAAR;AAcA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASoE,kCAAT,CAA4CpE,CAA5C,EAA+C;AAC5C,SAAOmE,wBAAwB,CAACnE,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EAC3BjE,CAAC,CAAC0D,OADyB,EAChB1D,CAAC,CAAC2D,QADc,EACJ3D,CAAC,CAAC4D,WADE,EACW5D,CAAC,CAAC6D,aADb,EAC4B7D,CAAC,CAACP,IAD9B,EACoCO,CAAC,CAAC8D,KADtC,EAC6C9D,CAAC,CAACJ,OAD/C,CAA/B;AAEF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASyE,uBAAT,CAAiCnF,IAAjC,EAAuCY,eAAvC,EAAwDmE,QAAxD,EACiCP,OAAO,GAAG7D,SAD3C,EACsD8D,QAAQ,GAAG9D,SADjE,EAC4E+D,WAAW,GAAG/D,SAD1F,EAEiCgE,aAAa,GAAGhE,SAFjD,EAGiCJ,IAAI,GAAGI,SAHxC,EAGmDiE,KAAK,GAAGjE,SAH3D,EAGsED,OAAO,GAAGC,SAHhF,EAG2F;AACvF,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,qBAAiBtB,qBAAqB,CAACE,OALnC;AAMJ,eAAWa,OANP;AAOJ,mBAAeC,QAPX;AAQJ,sBAAkBC,WARd;AASJ,wBAAoBC,aAThB;AAUJ,YAAQpE,IAVJ;AAWJ,aAASqE,KAXL;AAYJ,eAAWlE;AAZP,GAAR;AAcA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASsE,iCAAT,CAA2CtE,CAA3C,EAA8C;AAC1C,SAAOqE,uBAAuB,CAACrE,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EAC1BjE,CAAC,CAAC0D,OADwB,EACf1D,CAAC,CAAC2D,QADa,EACH3D,CAAC,CAAC4D,WADC,EACY5D,CAAC,CAAC6D,aADd,EAC6B7D,CAAC,CAACP,IAD/B,EACqCO,CAAC,CAAC8D,KADvC,EAC8C9D,CAAC,CAACJ,OADhD,CAA9B;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2E,0BAAT,CAAoCrF,IAApC,EAA0CY,eAA1C,EAA2DmE,QAA3D,EACoCP,OAAO,GAAG7D,SAD9C,EACyD8D,QAAQ,GAAG9D,SADpE,EAC+E+D,WAAW,GAAG/D,SAD7F,EAEoCgE,aAAa,GAAGhE,SAFpD,EAGoCJ,IAAI,GAAGI,SAH3C,EAGsDiE,KAAK,GAAGjE,SAH9D,EAGyED,OAAO,GAAGC,SAHnF,EAG8F;AAC1F,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,qBAAiBtB,qBAAqB,CAACG,UALnC;AAMJ,eAAWY,OANP;AAOJ,mBAAeC,QAPX;AAQJ,sBAAkBC,WARd;AASJ,wBAAoBC,aAThB;AAUJ,YAAQpE,IAVJ;AAWJ,aAASqE,KAXL;AAYJ,eAAWlE;AAZP,GAAR;AAcA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAASwE,oCAAT,CAA8CxE,CAA9C,EAAiD;AAC7C,SAAOuE,0BAA0B,CAACvE,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EAC7BjE,CAAC,CAAC0D,OAD2B,EAClB1D,CAAC,CAAC2D,QADgB,EACN3D,CAAC,CAAC4D,WADI,EACS5D,CAAC,CAAC6D,aADX,EAC0B7D,CAAC,CAACP,IAD5B,EACkCO,CAAC,CAAC8D,KADpC,EAC2C9D,CAAC,CAACJ,OAD7C,CAAjC;AAEH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS6E,4BAAT,CAAsCvF,IAAtC,EAA4CY,eAA5C,EAA6DmE,QAA7D,EACsCP,OAAO,GAAG7D,SADhD,EAC2D8D,QAAQ,GAAG9D,SADtE,EACiF+D,WAAW,GAAG/D,SAD/F,EAEsCgE,aAAa,GAAGhE,SAFtD,EAGsCJ,IAAI,GAAGI,SAH7C,EAGwDiE,KAAK,GAAGjE,SAHhE,EAG2ED,OAAO,GAAGC,SAHrF,EAGgG;AAC5F,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,qBAAiBtB,qBAAqB,CAACI,YALnC;AAMJ,eAAWW,OANP;AAOJ,mBAAeC,QAPX;AAQJ,sBAAkBC,WARd;AASJ,wBAAoBC,aAThB;AAUJ,YAAQpE,IAVJ;AAWJ,aAASqE,KAXL;AAYJ,eAAWlE;AAZP,GAAR;AAcA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAAS0E,sCAAT,CAAgD1E,CAAhD,EAAmD;AAC/C,SAAOyE,4BAA4B,CAACzE,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EAC/BjE,CAAC,CAAC0D,OAD6B,EACpB1D,CAAC,CAAC2D,QADkB,EACR3D,CAAC,CAAC4D,WADM,EACO5D,CAAC,CAAC6D,aADT,EACwB7D,CAAC,CAACP,IAD1B,EACgCO,CAAC,CAAC8D,KADlC,EACyC9D,CAAC,CAACJ,OAD3C,CAAnC;AAEH;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS+E,sBAAT,CAAgCzF,IAAhC,EAAsCY,eAAtC,EAAuDmE,QAAvD,EACgCP,OAAO,GAAG7D,SAD1C,EACqD8D,QAAQ,GAAG9D,SADhE,EAC2E+D,WAAW,GAAG/D,SADzF,EAEgCgE,aAAa,GAAGhE,SAFhD,EAGgCJ,IAAI,GAAGI,SAHvC,EAGkDiE,KAAK,GAAGjE,SAH1D,EAGqED,OAAO,GAAGC,SAH/E,EAG0F;AACtF,MAAIG,CAAC,GAAG;AACJ,YAAS,MADL;AAEJ,YAAQd,IAFJ;AAGJ,uBAAmBY,eAHf;AAIJ,gBAAYmE,QAJR;AAKJ,qBAAiBtB,qBAAqB,CAACC,MALnC;AAMJ,eAAWc,OANP;AAOJ,mBAAeC,QAPX;AAQJ,sBAAkBC,WARd;AASJ,wBAAoBC,aAThB;AAUJ,YAAQpE,IAVJ;AAWJ,aAASqE,KAXL;AAYJ,eAAWlE;AAZP,GAAR;AAcA,SAAO,IAAIb,UAAU,CAACkB,WAAf,CAA2BD,CAA3B,CAAP;AACH,C,CAED;;;AACA,SAAS4E,gCAAT,CAA0C5E,CAA1C,EAA6C;AACzC,SAAO2E,sBAAsB,CAAC3E,CAAC,CAACd,IAAH,EAASc,CAAC,CAACF,eAAX,EAA4BE,CAAC,CAACiE,QAA9B,EACzBjE,CAAC,CAAC0D,OADuB,EACd1D,CAAC,CAAC2D,QADY,EACF3D,CAAC,CAAC4D,WADA,EACa5D,CAAC,CAAC6D,aADf,EAC8B7D,CAAC,CAACP,IADhC,EACsCO,CAAC,CAAC8D,KADxC,EAC+C9D,CAAC,CAACJ,OADjD,CAA7B;AAEH;;AAEDiF,MAAM,CAACC,OAAP,GAAiB;AACb7F,EAAAA,cADa;AAEbc,EAAAA,iCAFa;AAGbG,EAAAA,2CAHa;AAIbC,EAAAA,sBAJa;AAKbM,EAAAA,yCALa;AAMbC,EAAAA,mDANa;AAObC,EAAAA,kBAPa;AAQbY,EAAAA,qCARa;AASbC,EAAAA,+CATa;AAUbC,EAAAA,kBAVa;AAWbG,EAAAA,qCAXa;AAYbE,EAAAA,+CAZa;AAabC,EAAAA,mBAba;AAcbC,EAAAA,sCAda;AAebC,EAAAA,gDAfa;AAgBbC,EAAAA,kBAhBa;AAiBbG,EAAAA,qCAjBa;AAkBbC,EAAAA,+CAlBa;AAmBbC,EAAAA,oBAnBa;AAoBbE,EAAAA,uCApBa;AAqBbC,EAAAA,iDArBa;AAsBbC,EAAAA,qBAtBa;AAuBbO,EAAAA,wBAvBa;AAwBba,EAAAA,kCAxBa;AAyBbC,EAAAA,wBAzBa;AA0BbE,EAAAA,kCA1Ba;AA2BbC,EAAAA,wBA3Ba;AA4BbC,EAAAA,kCA5Ba;AA6BbC,EAAAA,uBA7Ba;AA8BbC,EAAAA,iCA9Ba;AA+BbC,EAAAA,0BA/Ba;AAgCbC,EAAAA,oCAhCa;AAiCbC,EAAAA,4BAjCa;AAkCbC,EAAAA,sCAlCa;AAmCbC,EAAAA,sBAnCa;AAoCbC,EAAAA;AApCa,CAAjB","sourcesContent":["const txnBuilder = require('./transaction');\n\n/**\n * makePaymentTxn takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n * If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makePaymentTxn(from, to, fee, amount, closeRemainderTo, firstRound, lastRound, note, genesisHash, genesisID, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo);\n}\n\n/**\n * makePaymentTxnWithSuggestedParams takes payment arguments and returns a Transaction object\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of recipient\n * @param amount - integer amount to send, in microAlgos\n * @param closeRemainderTo - optionally close out remaining account balance to this account, represented as string rep of Algorand address\n * @param note - uint8array of arbitrary data for sender to store\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *      If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makePaymentTxnWithSuggestedParams(from, to, amount, closeRemainderTo, note, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"from\": from,\n        \"to\": to,\n        \"amount\": amount,\n        \"closeRemainderTo\": closeRemainderTo,\n        \"note\": note,\n        \"suggestedParams\": suggestedParams,\n        \"type\": \"pay\",\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makePaymentTxnWithSuggestedParams, instead accepting an arguments object\nfunction makePaymentTxnWithSuggestedParamsFromObject(o) {\n    return makePaymentTxnWithSuggestedParams(o.from, o.to, o.amount, o.closeRemainderTo,\n        o.note, o.suggestedParams, o.rekeyTo);\n}\n\n/**\n * makeKeyRegistrationTxn takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeKeyRegistrationTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID,\n                                voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo);\n}\n\n/**\n * makeKeyRegistrationTxnWithSuggestedParams takes key registration arguments and returns a Transaction object for\n * that key registration operation\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param voteKey - string representation of voting key. for key deregistration, leave undefined\n * @param selectionKey - string representation of selection key. for key deregistration, leave undefined\n * @param voteFirst - first round on which voteKey is valid\n * @param voteLast - last round on which voteKey is valid\n * @param voteKeyDilution - integer\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeKeyRegistrationTxnWithSuggestedParams(from, note, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"from\": from,\n        \"note\": note,\n        \"voteKey\": voteKey,\n        \"selectionKey\": selectionKey,\n        \"voteFirst\": voteFirst,\n        \"voteLast\": voteLast,\n        \"voteKeyDilution\": voteKeyDilution,\n        \"suggestedParams\": suggestedParams,\n        \"type\": \"keyreg\",\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeKeyRegistrationTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeKeyRegistrationTxnWithSuggestedParamsFromObject(o) {\n    return makeKeyRegistrationTxnWithSuggestedParams(o.from, o.note, o.voteKey, o.selectionKey, o.voteFirst, o.voteLast,\n        o.voteKeyDilution, o.suggestedParams, o.rekeyTo);\n}\n\n/** makeAssetCreateTxn takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - string representation of some sort of hash commitment with respect to the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetCreateTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID,\n                            total, decimals, defaultFrozen, manager, reserve, freeze,\n                            clawback, unitName, assetName, assetURL, assetMetadataHash, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze, clawback,\n        unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo);\n}\n\n/** makeAssetCreateTxnWithSuggestedParams takes asset creation arguments and returns a Transaction object\n * for creating that asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param total - integer total supply of the asset\n * @param decimals - integer number of decimals for asset unit calculation\n * @param defaultFrozen - boolean whether asset accounts should default to being frozen\n * @param manager - string representation of Algorand address in charge of reserve, freeze, clawback, destruction, etc\n * @param reserve - string representation of Algorand address representing asset reserve\n * @param freeze - string representation of Algorand address with power to freeze/unfreeze asset holdings\n * @param clawback - string representation of Algorand address with power to revoke asset holdings\n * @param unitName - string units name for this asset\n * @param assetName - string name for this asset\n * @param assetURL - string URL relating to this asset\n * @param assetMetadataHash - string representation of some sort of hash commitment with respect to the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetCreateTxnWithSuggestedParams(from, note, total, decimals, defaultFrozen, manager, reserve, freeze,\n                            clawback, unitName, assetName, assetURL, assetMetadataHash, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"from\": from,\n        \"note\": note,\n        \"suggestedParams\": suggestedParams,\n        \"assetTotal\": total,\n        \"assetDecimals\": decimals,\n        \"assetDefaultFrozen\": defaultFrozen,\n        \"assetUnitName\": unitName,\n        \"assetName\": assetName,\n        \"assetURL\": assetURL,\n        \"assetMetadataHash\": assetMetadataHash,\n        \"assetManager\": manager,\n        \"assetReserve\": reserve,\n        \"assetFreeze\": freeze,\n        \"assetClawback\": clawback,\n        \"type\": \"acfg\",\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetCreateTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetCreateTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetCreateTxnWithSuggestedParams(o.from, o.note, o.total, o.decimals, o.defaultFrozen, o.manager,\n        o.reserve, o.freeze, o.clawback, o.unitName, o.assetName, o.assetURL, o.assetMetadataHash, o.suggestedParams,\n        o.rekeyTo) ;\n}\n\n/** makeAssetConfigTxn can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetConfigTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID,\n                            assetIndex, manager, reserve, freeze, clawback, strictEmptyAddressChecking=true, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex, manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking, rekeyTo);\n}\n\n/** makeAssetConfigTxnWithSuggestedParams can be issued by the asset manager to change the manager, reserve, freeze, or clawback\n * you must respecify existing addresses to keep them the same; leaving a field blank is the same as turning\n * that feature off for this asset\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param manager - string representation of new asset manager Algorand address\n * @param reserve - string representation of new reserve Algorand address\n * @param freeze - string representation of new freeze manager Algorand address\n * @param clawback - string representation of new revocation manager Algorand address\n * @param strictEmptyAddressChecking - boolean - throw an error if any of manager, reserve, freeze, or clawback are undefined. optional, defaults to true.\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetConfigTxnWithSuggestedParams(from, note, assetIndex,\n                                      manager, reserve, freeze, clawback, suggestedParams, strictEmptyAddressChecking=true, rekeyTo=undefined) {\n    if (strictEmptyAddressChecking && ((manager === undefined) || (reserve === undefined) || (freeze === undefined) || (clawback === undefined))) {\n        throw Error(\"strict empty address checking was turned on, but at least one empty address was provided\");\n    }\n    let o = {\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"assetIndex\": assetIndex,\n        \"assetManager\": manager,\n        \"assetReserve\": reserve,\n        \"assetFreeze\": freeze,\n        \"assetClawback\": clawback,\n        \"type\": \"acfg\",\n        \"note\": note,\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetConfigTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetConfigTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetConfigTxnWithSuggestedParams(o.from, o.note, o.assetIndex,\n        o.manager, o.reserve, o.freeze, o.clawback, o.suggestedParams, o.strictEmptyAddressChecking, o.rekeyTo) ;\n}\n\n/** makeAssetDestroyTxn will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetDestroyTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo);\n}\n\n/** makeAssetDestroyTxnWithSuggestedParams will allow the asset's manager to remove this asset from the ledger, so long\n * as all outstanding assets are held by the creator.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetDestroyTxnWithSuggestedParams(from, note, assetIndex, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"assetIndex\": assetIndex,\n        \"type\": \"acfg\",\n        \"note\": note,\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetDestroyTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetDestroyTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetDestroyTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n\n/** makeAssetFreezeTxn will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetFreezeTxn(from, fee, firstRound, lastRound, note, genesisHash, genesisID,\n                            assetIndex, freezeTarget, freezeState, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo);\n}\n\n/** makeAssetFreezeTxnWithSuggestedParams will allow the asset's freeze manager to freeze or un-freeze an account,\n * blocking or allowing asset transfers to and from the targeted account.\n *\n * @param from - string representation of Algorand address of sender\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param freezeTarget - string representation of Algorand address being frozen or unfrozen\n * @param freezeState - true if freezeTarget should be frozen, false if freezeTarget should be allowed to transact\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetFreezeTxnWithSuggestedParams(from, note, assetIndex, freezeTarget, freezeState, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"from\": from,\n        \"type\": \"afrz\",\n        \"freezeAccount\": freezeTarget,\n        \"assetIndex\": assetIndex,\n        \"freezeState\" : freezeState,\n        \"note\": note,\n        \"suggestedParams\": suggestedParams,\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetFreezeTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetFreezeTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetFreezeTxnWithSuggestedParams(o.from, o.note, o.assetIndex, o.freezeTarget,\n        o.freezeState, o.suggestedParams, o.rekeyTo);\n}\n\n/** makeAssetTransferTxn allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param fee - integer fee per byte, in microAlgos. for a flat fee, overwrite the fee property on the returned object\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * @param amount - integer amount of assets to send\n * @param firstRound - integer first protocol round on which this txn is valid\n * @param lastRound - integer last protocol round on which this txn is valid\n * @param note - uint8array of arbitrary data for sender to store\n * @param genesisHash - string specifies hash genesis block of network in use\n * @param genesisID - string specifies genesis ID of network in use\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param rekeyTo - rekeyTo address, optional\n * @Deprecated in version 2.0 this will change to use the \"WithSuggestedParams\" signature.\n * @returns {Transaction}\n */\nfunction makeAssetTransferTxn(from, to, closeRemainderTo, revocationTarget,\n                              fee, amount, firstRound, lastRound, note, genesisHash, genesisID, assetIndex, rekeyTo=undefined) {\n    let suggestedParams = {\n        \"genesisHash\": genesisHash,\n        \"genesisID\": genesisID,\n        \"firstRound\": firstRound,\n        \"lastRound\": lastRound,\n        \"fee\": fee\n    };\n    return makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget, amount, note, assetIndex, suggestedParams, rekeyTo);\n}\n\n/** makeAssetTransferTxnWithSuggestedParams allows for the creation of an asset transfer transaction.\n * Special case: to begin accepting assets, set amount=0 and from=to.\n *\n * @param from - string representation of Algorand address of sender\n * @param to - string representation of Algorand address of asset recipient\n * @param closeRemainderTo - optional - string representation of Algorand address - if provided,\n * send all remaining assets after transfer to the \"closeRemainderTo\" address and close \"from\"'s asset holdings\n * @param revocationTarget - optional - string representation of Algorand address - if provided,\n * and if \"from\" is the asset's revocation manager, then deduct from \"revocationTarget\" rather than \"from\"\n * @param amount - integer amount of assets to send\n * @param note - uint8array of arbitrary data for sender to store\n * @param assetIndex - int asset index uniquely specifying the asset\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param rekeyTo - rekeyTo address, optional\n * @returns {Transaction}\n */\nfunction makeAssetTransferTxnWithSuggestedParams(from, to, closeRemainderTo, revocationTarget,\n                              amount, note, assetIndex, suggestedParams, rekeyTo=undefined) {\n    let o = {\n        \"type\": \"axfer\",\n        \"from\": from,\n        \"to\": to,\n        \"amount\": amount,\n        \"suggestedParams\": suggestedParams,\n        \"assetIndex\": assetIndex,\n        \"note\": note,\n        \"assetRevocationTarget\": revocationTarget,\n        \"closeRemainderTo\": closeRemainderTo,\n        \"rekeyTo\": rekeyTo\n    };\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeAssetTransferTxnWithSuggestedParams, instead accepting an arguments object\nfunction makeAssetTransferTxnWithSuggestedParamsFromObject(o) {\n    return makeAssetTransferTxnWithSuggestedParams(o.from, o.to, o.closeRemainderTo, o.revocationTarget,\n        o.amount, o.note, o.assetIndex, o.suggestedParams, o.rekeyTo);\n}\n\n/*\n * Enums for application transactions on-transaction-complete behavior\n */\nlet OnApplicationComplete = {\n    // NoOpOC indicates that an application transaction will simply call its\n    // ApprovalProgram\n    NoOpOC : 0,\n    // OptInOC indicates that an application transaction will allocate some\n    // LocalState for the application in the sender's account\n    OptInOC : 1,\n    // CloseOutOC indicates that an application transaction will deallocate\n    // some LocalState for the application from the user's account\n    CloseOutOC : 2,\n    // ClearStateOC is similar to CloseOutOC, but may never fail. This\n    // allows users to reclaim their minimum balance from an application\n    // they no longer wish to opt in to.\n    ClearStateOC : 3,\n    // UpdateApplicationOC indicates that an application transaction will\n    // update the ApprovalProgram and ClearStateProgram for the application\n    UpdateApplicationOC : 4,\n    // DeleteApplicationOC indicates that an application transaction will\n    // delete the AppParams for the application from the creator's balance\n    // record\n    DeleteApplicationOC : 5\n}\n\n/**\n * Make a transaction that will create an application.\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param onComplete - algosdk.OnApplicationComplete, what application should do once the program is done being run\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param numLocalInts - restricts number of ints in per-user local state\n * @param numLocalByteSlices - restricts number of byte slices in per-user local state\n * @param numGlobalInts - restricts number of ints in global state\n * @param numGlobalByteSlices - restricts number of byte slices in global state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationCreateTxn(from, suggestedParams, onComplete, approvalProgram, clearProgram,\n                                  numLocalInts, numLocalByteSlices, numGlobalInts, numGlobalByteSlices,\n                                  appArgs= undefined, accounts= undefined, foreignApps= undefined,\n                                  foreignAssets = undefined,\n                                  note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": 0,\n        \"appOnComplete\": onComplete,\n        \"appLocalInts\": numLocalInts,\n        \"appLocalByteSlices\": numLocalByteSlices,\n        \"appGlobalInts\": numGlobalInts,\n        \"appGlobalByteSlices\": numGlobalByteSlices,\n        \"appApprovalProgram\": approvalProgram,\n        \"appClearProgram\": clearProgram,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCreateTxn, instead accepting an arguments object\nfunction makeApplicationCreateTxnFromObject(o) {\n    return makeApplicationCreateTxn(o.from, o.suggestedParams, o.onComplete, o.approvalProgram, o.clearProgram,\n        o.numLocalInts, o.numLocalByteSlices, o.numGlobalInts, o.numGlobalByteSlices,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\n/**\n * Make a transaction that changes an application's approval and clear programs\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be updated\n * @param approvalProgram - Uint8Array, the compiled TEAL that approves a transaction\n * @param clearProgram - Uint8Array, the compiled TEAL that runs when clearing state\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationUpdateTxn(from, suggestedParams, appIndex, approvalProgram, clearProgram,\n                                  appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                  foreignAssets = undefined,\n                                  note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appApprovalProgram\": approvalProgram,\n        \"appOnComplete\": OnApplicationComplete.UpdateApplicationOC,\n        \"appClearProgram\": clearProgram,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationUpdateTxn, instead accepting an arguments object\nfunction makeApplicationUpdateTxnFromObject(o) {\n    return makeApplicationUpdateTxn(o.from, o.suggestedParams, o.appIndex, o.approvalProgram, o.clearProgram,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\n/**\n * Make a transaction that deletes an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to be deleted\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationDeleteTxn(from, suggestedParams, appIndex,\n                                  appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                  foreignAssets = undefined,\n                                  note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appOnComplete\": OnApplicationComplete.DeleteApplicationOC,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationDeleteTxn, instead accepting an arguments object\nfunction makeApplicationDeleteTxnFromObject(o) {\n   return makeApplicationDeleteTxn(o.from, o.suggestedParams, o.appIndex,\n       o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\n/**\n * Make a transaction that opts in to use an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to join\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationOptInTxn(from, suggestedParams, appIndex,\n                                 appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                 foreignAssets = undefined,\n                                 note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appOnComplete\": OnApplicationComplete.OptInOC,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationOptInTxn, instead accepting an argument object\nfunction makeApplicationOptInTxnFromObject(o) {\n    return makeApplicationOptInTxn(o.from, o.suggestedParams, o.appIndex,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\n/**\n * Make a transaction that closes out a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationCloseOutTxn(from, suggestedParams, appIndex,\n                                    appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                    foreignAssets = undefined,\n                                    note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appOnComplete\": OnApplicationComplete.CloseOutOC,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationCloseOutTxn, instead accepting an argument object\nfunction makeApplicationCloseOutTxnFromObject(o) {\n    return makeApplicationCloseOutTxn(o.from, o.suggestedParams, o.appIndex,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\n\n/**\n * Make a transaction that clears a user's state in an application\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationClearStateTxn(from, suggestedParams, appIndex,\n                                      appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                      foreignAssets = undefined,\n                                      note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appOnComplete\": OnApplicationComplete.ClearStateOC,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationClearStateTxn, instead accepting an argument object\nfunction makeApplicationClearStateTxnFromObject(o) {\n    return makeApplicationClearStateTxn(o.from, o.suggestedParams, o.appIndex,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo)\n}\n\n\n/**\n * Make a transaction that just calls an application, doing nothing on completion\n * @param from - address of sender\n * @param suggestedParams - a dict holding common-to-all-txns args:\n * fee - integer fee per byte, in microAlgos. for a flat fee, set flatFee to true\n * flatFee - bool optionally set this to true to specify fee as microalgos-per-txn\n *  If the final calculated fee is lower than the protocol minimum fee, the fee will be increased to match the minimum.\n * firstRound - integer first protocol round on which this txn is valid\n * lastRound - integer last protocol round on which this txn is valid\n * genesisHash - string specifies hash genesis block of network in use\n * genesisID - string specifies genesis ID of network in use\n * @param appIndex - the ID of the app to use\n * @param appArgs, optional - Array of Uint8Array, any additional arguments to the application\n * @param accounts, optional - Array of Address strings, any additional accounts to supply to the application\n * @param foreignApps, optional - Array of int, any other apps used by the application, identified by index\n * @param foreignAssets, optional - Array of int, any assets used by the application, identified by index\n * @param note, optional\n * @param lease, optional\n * @param rekeyTo, optional\n */\nfunction makeApplicationNoOpTxn(from, suggestedParams, appIndex,\n                                appArgs = undefined, accounts = undefined, foreignApps = undefined,\n                                foreignAssets = undefined,\n                                note = undefined, lease = undefined, rekeyTo = undefined) {\n    let o = {\n        \"type\" : \"appl\",\n        \"from\": from,\n        \"suggestedParams\": suggestedParams,\n        \"appIndex\": appIndex,\n        \"appOnComplete\": OnApplicationComplete.NoOpOC,\n        \"appArgs\": appArgs,\n        \"appAccounts\": accounts,\n        \"appForeignApps\": foreignApps,\n        \"appForeignAssets\": foreignAssets,\n        \"note\": note,\n        \"lease\": lease,\n        \"reKeyTo\": rekeyTo\n    }\n    return new txnBuilder.Transaction(o);\n}\n\n// helper for above makeApplicationNoOpTxn, instead accepting an argument object\nfunction makeApplicationNoOpTxnFromObject(o) {\n    return makeApplicationNoOpTxn(o.from, o.suggestedParams, o.appIndex,\n        o.appArgs, o.accounts, o.foreignApps, o.foreignAssets, o.note, o.lease, o.rekeyTo);\n}\n\nmodule.exports = {\n    makePaymentTxn,\n    makePaymentTxnWithSuggestedParams,\n    makePaymentTxnWithSuggestedParamsFromObject,\n    makeKeyRegistrationTxn,\n    makeKeyRegistrationTxnWithSuggestedParams,\n    makeKeyRegistrationTxnWithSuggestedParamsFromObject,\n    makeAssetCreateTxn,\n    makeAssetCreateTxnWithSuggestedParams,\n    makeAssetCreateTxnWithSuggestedParamsFromObject,\n    makeAssetConfigTxn,\n    makeAssetConfigTxnWithSuggestedParams,\n    makeAssetConfigTxnWithSuggestedParamsFromObject,\n    makeAssetDestroyTxn,\n    makeAssetDestroyTxnWithSuggestedParams,\n    makeAssetDestroyTxnWithSuggestedParamsFromObject,\n    makeAssetFreezeTxn,\n    makeAssetFreezeTxnWithSuggestedParams,\n    makeAssetFreezeTxnWithSuggestedParamsFromObject,\n    makeAssetTransferTxn,\n    makeAssetTransferTxnWithSuggestedParams,\n    makeAssetTransferTxnWithSuggestedParamsFromObject,\n    OnApplicationComplete,\n    makeApplicationCreateTxn,\n    makeApplicationCreateTxnFromObject,\n    makeApplicationUpdateTxn,\n    makeApplicationUpdateTxnFromObject,\n    makeApplicationDeleteTxn,\n    makeApplicationDeleteTxnFromObject,\n    makeApplicationOptInTxn,\n    makeApplicationOptInTxnFromObject,\n    makeApplicationCloseOutTxn,\n    makeApplicationCloseOutTxnFromObject,\n    makeApplicationClearStateTxn,\n    makeApplicationClearStateTxnFromObject,\n    makeApplicationNoOpTxn,\n    makeApplicationNoOpTxnFromObject,\n};\n"]},"metadata":{},"sourceType":"script"}
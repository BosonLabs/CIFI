{"ast":null,"code":"const {\n  Buffer\n} = require(\"buffer\");\n\nconst address = require(\"./encoding/address\");\n\nconst encoding = require(\"./encoding/encoding\");\n\nconst nacl = require(\"./nacl/naclWrappers\");\n\nconst utils = require(\"./utils/utils\");\n\nconst base32 = require('hi-base32');\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_MIN_TX_FEE = 1000; // version v5\n\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\n\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5;\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\n/**\n * Transaction enables construction of Algorand transactions\n * */\n\nclass Transaction {\n  constructor({\n    from,\n    to,\n    fee,\n    amount,\n    firstRound,\n    lastRound,\n    note,\n    genesisID,\n    genesisHash,\n    lease,\n    closeRemainderTo,\n    voteKey,\n    selectionKey,\n    voteFirst,\n    voteLast,\n    voteKeyDilution,\n    assetIndex,\n    assetTotal,\n    assetDecimals,\n    assetDefaultFrozen,\n    assetManager,\n    assetReserve,\n    assetFreeze,\n    assetClawback,\n    assetUnitName,\n    assetName,\n    assetURL,\n    assetMetadataHash,\n    freezeAccount,\n    freezeState,\n    assetRevocationTarget,\n    appIndex,\n    appOnComplete,\n    appLocalInts,\n    appLocalByteSlices,\n    appGlobalInts,\n    appGlobalByteSlices,\n    appApprovalProgram,\n    appClearProgram,\n    appArgs,\n    appAccounts,\n    appForeignApps,\n    appForeignAssets,\n    type = \"pay\",\n    flatFee = false,\n    suggestedParams = undefined,\n    reKeyTo = undefined\n  }) {\n    this.name = \"Transaction\";\n    this.tag = Buffer.from(\"TX\");\n\n    if (suggestedParams !== undefined) {\n      genesisHash = suggestedParams.genesisHash;\n      fee = suggestedParams.fee;\n      if (suggestedParams.flatFee !== undefined) flatFee = suggestedParams.flatFee;\n      firstRound = suggestedParams.firstRound;\n      lastRound = suggestedParams.lastRound;\n      genesisID = suggestedParams.genesisID;\n    }\n\n    from = address.decodeAddress(from);\n    if (to !== undefined) to = address.decodeAddress(to);\n    if (closeRemainderTo !== undefined) closeRemainderTo = address.decodeAddress(closeRemainderTo);\n    if (assetManager !== undefined) assetManager = address.decodeAddress(assetManager);\n    if (assetReserve !== undefined) assetReserve = address.decodeAddress(assetReserve);\n    if (assetFreeze !== undefined) assetFreeze = address.decodeAddress(assetFreeze);\n    if (assetClawback !== undefined) assetClawback = address.decodeAddress(assetClawback);\n    if (assetRevocationTarget !== undefined) assetRevocationTarget = address.decodeAddress(assetRevocationTarget);\n    if (freezeAccount !== undefined) freezeAccount = address.decodeAddress(freezeAccount);\n    if (reKeyTo !== undefined) reKeyTo = address.decodeAddress(reKeyTo);\n    if (genesisHash === undefined) throw Error(\"genesis hash must be specified and in a base64 string.\");\n    genesisHash = Buffer.from(genesisHash, 'base64');\n    if (amount !== undefined && (!Number.isSafeInteger(amount) || amount < 0)) throw Error(\"Amount must be a positive number and smaller than 2^53-1\");\n    if (!Number.isSafeInteger(fee) || fee < 0) throw Error(\"fee must be a positive number and smaller than 2^53-1\");\n    if (!Number.isSafeInteger(firstRound) || firstRound < 0) throw Error(\"firstRound must be a positive number\");\n    if (!Number.isSafeInteger(lastRound) || lastRound < 0) throw Error(\"lastRound must be a positive number\");\n    if (assetTotal !== undefined && (!Number.isSafeInteger(assetTotal) || assetTotal < 0)) throw Error(\"Total asset issuance must be a positive number and smaller than 2^53-1\");\n    if (assetDecimals !== undefined && (!Number.isSafeInteger(assetDecimals) || assetDecimals < 0 || assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(\"assetDecimals must be a positive number and smaller than \" + ALGORAND_MAX_ASSET_DECIMALS.toString());\n    if (assetIndex !== undefined && (!Number.isSafeInteger(assetIndex) || assetIndex < 0)) throw Error(\"Asset index must be a positive number and smaller than 2^53-1\");\n    if (appIndex !== undefined && (!Number.isSafeInteger(appIndex) || appIndex < 0)) throw Error(\"Application index must be a positive number and smaller than 2^53-1\");\n    if (appLocalInts !== undefined && (!Number.isSafeInteger(appLocalInts) || appLocalInts < 0)) throw Error(\"Application local ints count must be a positive number and smaller than 2^53-1\");\n    if (appLocalByteSlices !== undefined && (!Number.isSafeInteger(appLocalByteSlices) || appLocalByteSlices < 0)) throw Error(\"Application local byte slices count must be a positive number and smaller than 2^53-1\");\n    if (appGlobalInts !== undefined && (!Number.isSafeInteger(appGlobalInts) || appGlobalInts < 0)) throw Error(\"Application global ints count must be a positive number and smaller than 2^53-1\");\n    if (appGlobalByteSlices !== undefined && (!Number.isSafeInteger(appGlobalByteSlices) || appGlobalByteSlices < 0)) throw Error(\"Application global byte slices count must be a positive number and smaller than 2^53-1\");\n\n    if (appApprovalProgram !== undefined) {\n      if (appApprovalProgram.constructor !== Uint8Array) throw Error(\"appApprovalProgram must be a Uint8Array.\");\n    }\n\n    if (appClearProgram !== undefined) {\n      if (appClearProgram.constructor !== Uint8Array) throw Error(\"appClearProgram must be a Uint8Array.\");\n    }\n\n    if (appArgs !== undefined) {\n      if (!Array.isArray(appArgs)) throw Error(\"appArgs must be an Array of Uint8Array.\");\n      appArgs.forEach(arg => {\n        if (arg.constructor !== Uint8Array) throw Error(\"each element of AppArgs must be a Uint8Array.\");\n      });\n    } else {\n      appArgs = new Uint8Array(0);\n    }\n\n    if (appAccounts !== undefined) {\n      appAccounts.forEach((addressAsString, index) => {\n        appAccounts[index] = address.decodeAddress(addressAsString);\n      });\n    }\n\n    if (appForeignApps !== undefined) {\n      appForeignApps.forEach(foreignAppIndex => {\n        if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error(\"each foreign application index must be a positive number and smaller than 2^53-1\");\n      });\n    }\n\n    if (appForeignAssets !== undefined) {\n      appForeignAssets.forEach(foreignAssetIndex => {\n        if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error(\"each foreign asset index must be a positive number and smaller than 2^53-1\");\n      });\n    }\n\n    if (note !== undefined) {\n      if (note.constructor !== Uint8Array) throw Error(\"note must be a Uint8Array.\");\n    } else {\n      note = new Uint8Array(0);\n    }\n\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \" + ALGORAND_TRANSACTION_LEASE_LENGTH.toString() + \".\");\n    } else {\n      lease = new Uint8Array(0);\n    }\n\n    if (voteKey !== undefined) {\n      voteKey = Buffer.from(voteKey, \"base64\");\n    }\n\n    if (selectionKey !== undefined) {\n      selectionKey = Buffer.from(selectionKey, \"base64\");\n    }\n\n    Object.assign(this, {\n      from,\n      to,\n      fee,\n      amount,\n      firstRound,\n      lastRound,\n      note,\n      genesisID,\n      genesisHash,\n      lease,\n      closeRemainderTo,\n      voteKey,\n      selectionKey,\n      voteFirst,\n      voteLast,\n      voteKeyDilution,\n      assetIndex,\n      assetTotal,\n      assetDecimals,\n      assetDefaultFrozen,\n      assetManager,\n      assetReserve,\n      assetFreeze,\n      assetClawback,\n      assetUnitName,\n      assetName,\n      assetURL,\n      assetMetadataHash,\n      freezeAccount,\n      freezeState,\n      assetRevocationTarget,\n      appIndex,\n      appOnComplete,\n      appLocalInts,\n      appLocalByteSlices,\n      appGlobalInts,\n      appGlobalByteSlices,\n      appApprovalProgram,\n      appClearProgram,\n      appArgs,\n      appAccounts,\n      appForeignApps,\n      appForeignAssets,\n      type,\n      reKeyTo\n    }); // Modify Fee\n\n    if (!flatFee) {\n      this.fee *= this.estimateSize();\n    } // If suggested fee too small and will be rejected, set to min tx fee\n\n\n    if (this.fee < ALGORAND_MIN_TX_FEE) {\n      this.fee = ALGORAND_MIN_TX_FEE;\n    } // say we are aware of groups\n\n\n    this.group = undefined;\n  }\n\n  get_obj_for_encoding() {\n    if (this.type == \"pay\") {\n      let txn = {\n        \"amt\": this.amount,\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"type\": \"pay\",\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group\n      }; // parse close address\n\n      if (this.closeRemainderTo !== undefined && address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING) {\n        txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n      }\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      } // allowed zero values\n\n\n      if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n      if (!txn.note.length) delete txn.note;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.rekey) delete txn.rekey;\n      return txn;\n    } else if (this.type == \"keyreg\") {\n      let txn = {\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"type\": this.type,\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group,\n        \"votekey\": this.voteKey,\n        \"selkey\": this.selectionKey,\n        \"votefst\": this.voteFirst,\n        \"votelst\": this.voteLast,\n        \"votekd\": this.voteKeyDilution\n      }; // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      return txn;\n    } else if (this.type == \"acfg\") {\n      // asset creation, or asset reconfigure, or asset destruction\n      let txn = {\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"type\": this.type,\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group,\n        \"caid\": this.assetIndex,\n        \"apar\": {\n          \"t\": this.assetTotal,\n          \"df\": this.assetDefaultFrozen,\n          \"dc\": this.assetDecimals\n        }\n      };\n      if (this.assetManager !== undefined) txn.apar.m = Buffer.from(this.assetManager.publicKey);\n      if (this.assetReserve !== undefined) txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n      if (this.assetFreeze !== undefined) txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n      if (this.assetClawback !== undefined) txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n      if (this.assetName !== undefined) txn.apar.an = this.assetName;\n      if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n      if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n      if (this.assetMetadataHash !== undefined) txn.apar.am = Buffer.from(this.assetMetadataHash); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (!txn.caid) delete txn.caid;\n\n      if (!txn.apar.t && !txn.apar.un && !txn.apar.an && !txn.apar.df && !txn.apar.m && !txn.apar.r && !txn.apar.f && !txn.apar.c && !txn.apar.au && !txn.apar.am && !txn.apar.dc) {\n        delete txn.apar;\n      } else {\n        if (!txn.apar.t) delete txn.apar.t;\n        if (!txn.apar.dc) delete txn.apar.dc;\n        if (!txn.apar.un) delete txn.apar.un;\n        if (!txn.apar.an) delete txn.apar.an;\n        if (!txn.apar.df) delete txn.apar.df;\n        if (!txn.apar.m) delete txn.apar.m;\n        if (!txn.apar.r) delete txn.apar.r;\n        if (!txn.apar.f) delete txn.apar.f;\n        if (!txn.apar.c) delete txn.apar.c;\n        if (!txn.apar.au) delete txn.apar.au;\n        if (!txn.apar.am) delete txn.apar.am;\n      }\n\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    } else if (this.type == \"axfer\") {\n      // asset transfer, acceptance, revocation, mint, or burn\n      let txn = {\n        \"aamt\": this.amount,\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"arcv\": Buffer.from(this.to.publicKey),\n        \"type\": this.type,\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group,\n        \"xaid\": this.assetIndex\n      };\n      if (this.closeRemainderTo !== undefined) txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n      if (this.assetRevocationTarget !== undefined) txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.aamt) delete txn.aamt;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (txn.grp === undefined) delete txn.grp;\n      if (!txn.aclose) delete txn.aclose;\n      if (!txn.asnd) delete txn.asnd;\n      if (!txn.rekey) delete txn.rekey;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      return txn;\n    } else if (this.type == \"afrz\") {\n      // asset freeze or unfreeze\n      let txn = {\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"type\": this.type,\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group,\n        \"faid\": this.assetIndex,\n        \"afrz\": this.freezeState\n      };\n      if (this.freezeAccount !== undefined) txn.fadd = Buffer.from(this.freezeAccount.publicKey); // allowed zero values\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.afrz) delete txn.afrz;\n      if (txn.grp === undefined) delete txn.grp;\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      return txn;\n    } else if (this.type == \"appl\") {\n      // application call of some kind\n      let txn = {\n        \"fee\": this.fee,\n        \"fv\": this.firstRound,\n        \"lv\": this.lastRound,\n        \"note\": Buffer.from(this.note),\n        \"snd\": Buffer.from(this.from.publicKey),\n        \"type\": this.type,\n        \"gen\": this.genesisID,\n        \"gh\": this.genesisHash,\n        \"lx\": Buffer.from(this.lease),\n        \"grp\": this.group,\n        \"apid\": this.appIndex,\n        \"apan\": this.appOnComplete,\n        \"apls\": {\n          \"nui\": this.appLocalInts,\n          \"nbs\": this.appLocalByteSlices\n        },\n        \"apgs\": {\n          \"nui\": this.appGlobalInts,\n          \"nbs\": this.appGlobalByteSlices\n        },\n        \"apfa\": this.appForeignApps,\n        \"apas\": this.appForeignAssets\n      };\n\n      if (this.reKeyTo !== undefined) {\n        txn.rekey = Buffer.from(this.reKeyTo.publicKey);\n      }\n\n      if (this.appApprovalProgram !== undefined) {\n        txn.apap = Buffer.from(this.appApprovalProgram);\n      }\n\n      if (this.appClearProgram !== undefined) {\n        txn.apsu = Buffer.from(this.appClearProgram);\n      }\n\n      if (this.appArgs !== undefined) {\n        txn.apaa = [];\n        this.appArgs.forEach(arg => {\n          txn.apaa.push(Buffer.from(arg));\n        });\n      }\n\n      if (this.appAccounts !== undefined) {\n        txn.apat = [];\n        this.appAccounts.forEach(decodedAddress => {\n          txn.apat.push(Buffer.from(decodedAddress.publicKey));\n        });\n      } // allowed zero values\n\n\n      if (!txn.note.length) delete txn.note;\n      if (!txn.lx.length) delete txn.lx;\n      if (!txn.amt) delete txn.amt;\n      if (!txn.fee) delete txn.fee;\n      if (!txn.gen) delete txn.gen;\n      if (!txn.apid) delete txn.apid;\n      if (!txn.apls.nui) delete txn.apls.nui;\n      if (!txn.apls.nbs) delete txn.apls.nbs;\n      if (!txn.apls.nui && !txn.apls.nbs) delete txn.apls;\n      if (!txn.apgs.nui) delete txn.apgs.nui;\n      if (!txn.apgs.nbs) delete txn.apgs.nbs;\n      if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n      if (!txn.apgs.nui && !txn.apgs.nbs) delete txn.apgs;\n      if (!txn.apap) delete txn.apap;\n      if (!txn.apsu) delete txn.apsu;\n      if (!txn.apan) delete txn.apan;\n      if (!txn.apfa) delete txn.apfa;\n      if (!txn.apas) delete txn.apas;\n      if (txn.grp === undefined) delete txn.grp;\n      return txn;\n    }\n  }\n\n  static from_obj_for_encoding(txnForEnc) {\n    let txn = Object.create(this.prototype);\n    txn.name = \"Transaction\";\n    txn.tag = Buffer.from(\"TX\");\n    txn.genesisID = txnForEnc.gen;\n    txn.genesisHash = Buffer.from(txnForEnc.gh);\n    txn.type = txnForEnc.type;\n    txn.fee = txnForEnc.fee;\n    txn.firstRound = txnForEnc.fv;\n    txn.lastRound = txnForEnc.lv;\n    txn.note = new Uint8Array(txnForEnc.note);\n    txn.lease = new Uint8Array(txnForEnc.lx);\n    txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n    if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n    if (txnForEnc.rekey !== undefined) txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n\n    if (txnForEnc.type === \"pay\") {\n      txn.amount = txnForEnc.amt;\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n      if (txnForEnc.close !== undefined) txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n    } else if (txnForEnc.type === \"keyreg\") {\n      txn.voteKey = Buffer.from(txnForEnc.votekey);\n      txn.selectionKey = Buffer.from(txnForEnc.selkey);\n      txn.voteKeyDilution = txnForEnc.votekd;\n      txn.voteFirst = txnForEnc.votefst;\n      txn.voteLast = txnForEnc.votelst;\n    } else if (txnForEnc.type === \"acfg\") {\n      // asset creation, or asset reconfigure, or asset destruction\n      if (txnForEnc.caid !== undefined) {\n        txn.assetIndex = txnForEnc.caid;\n      }\n\n      if (txnForEnc.apar !== undefined) {\n        txn.assetTotal = txnForEnc.apar.t;\n        txn.assetDefaultFrozen = txnForEnc.apar.df;\n        if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n        if (txnForEnc.apar.m !== undefined) txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n        if (txnForEnc.apar.r !== undefined) txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n        if (txnForEnc.apar.f !== undefined) txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n        if (txnForEnc.apar.c !== undefined) txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n        if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n        if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n        if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n        if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n      }\n    } else if (txnForEnc.type === \"axfer\") {\n      // asset transfer, acceptance, revocation, mint, or burn\n      if (txnForEnc.xaid !== undefined) {\n        txn.assetIndex = txnForEnc.xaid;\n      }\n\n      if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n\n      if (txnForEnc.aclose !== undefined) {\n        txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n      }\n\n      if (txnForEnc.asnd !== undefined) {\n        txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n      }\n\n      txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n    } else if (txnForEnc.type === \"afrz\") {\n      if (txnForEnc.afrz !== undefined) {\n        txn.freezeState = txnForEnc.afrz;\n      }\n\n      if (txnForEnc.faid !== undefined) {\n        txn.assetIndex = txnForEnc.faid;\n      }\n\n      txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n    } else if (txnForEnc.type === \"appl\") {\n      if (txnForEnc.apid !== undefined) {\n        txn.appIndex = txnForEnc.apid;\n      }\n\n      if (txnForEnc.apan !== undefined) {\n        txn.appOnComplete = txnForEnc.apan;\n      }\n\n      if (txnForEnc.apls !== undefined) {\n        if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n        if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n      }\n\n      if (txnForEnc.apgs !== undefined) {\n        if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n        if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n      }\n\n      if (txnForEnc.apap !== undefined) {\n        txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n      }\n\n      if (txnForEnc.apsu !== undefined) {\n        txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n      }\n\n      if (txnForEnc.apaa !== undefined) {\n        txn.appArgs = [];\n        txnForEnc.apaa.forEach(arg => {\n          txn.appArgs.push(new Uint8Array(arg));\n        });\n      }\n\n      if (txnForEnc.apat !== undefined) {\n        txn.appAccounts = [];\n        txnForEnc.apat.forEach(addressBytes => {\n          txn.appAccounts.push(address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));\n        });\n      }\n\n      if (txnForEnc.apfa !== undefined) {\n        txn.appForeignApps = txnForEnc.apfa;\n      }\n\n      if (txnForEnc.apas !== undefined) {\n        txn.appForeignAssets = txnForEnc.apas;\n      }\n    }\n\n    return txn;\n  }\n\n  estimateSize() {\n    return this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING;\n  }\n\n  bytesToSign() {\n    let encodedMsg = this.toByte();\n    return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n  }\n\n  toByte() {\n    return encoding.encode(this.get_obj_for_encoding());\n  } // returns the raw signature\n\n\n  rawSignTxn(sk) {\n    const toBeSigned = this.bytesToSign();\n    const sig = nacl.sign(toBeSigned, sk);\n    return Buffer.from(sig);\n  }\n\n  signTxn(sk) {\n    // construct signed message\n    let sTxn = {\n      \"sig\": this.rawSignTxn(sk),\n      \"txn\": this.get_obj_for_encoding()\n    }; // add AuthAddr if signing with a different key than From indicates\n\n    let keypair = nacl.keyPairFromSecretKey(sk);\n    let pubKeyFromSk = keypair[\"publicKey\"];\n\n    if (address.encodeAddress(pubKeyFromSk) != address.encodeAddress(this.from[\"publicKey\"])) {\n      sTxn[\"sgnr\"] = Buffer.from(pubKeyFromSk);\n    }\n\n    return new Uint8Array(encoding.encode(sTxn));\n  }\n\n  rawTxID() {\n    const en_msg = this.toByte();\n    const gh = Buffer.from(utils.concatArrays(this.tag, en_msg));\n    return Buffer.from(nacl.genericHash(gh));\n  }\n\n  txID() {\n    const hash = this.rawTxID();\n    return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n  } // add a lease to a transaction not yet having\n  // supply feePerByte to increment fee accordingly\n\n\n  addLease(lease, feePerByte = 0) {\n    if (lease !== undefined) {\n      if (lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n      if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \" + ALGORAND_TRANSACTION_LEASE_LENGTH.toString() + \".\");\n    } else {\n      lease = new Uint8Array(0);\n    }\n\n    this.lease = lease;\n\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n    }\n  } // add the rekey-to field to a transaction not yet having it\n  // supply feePerByte to increment fee accordingly\n\n\n  addRekey(reKeyTo, feePerByte = 0) {\n    if (reKeyTo !== undefined) {\n      this.reKeyTo = address.decodeAddress(reKeyTo);\n    }\n\n    if (feePerByte !== 0) {\n      this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n    }\n  } // build display dict for prettyPrint and toString\n\n\n  _getDictForDisplay() {\n    let forPrinting = { ...this\n    };\n    forPrinting.tag = forPrinting.tag.toString();\n    forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n    if (forPrinting.to !== undefined) forPrinting.to = address.encodeAddress(forPrinting.to.publicKey); // things that need fixing:\n\n    if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n    if (forPrinting.assetManager !== undefined) forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n    if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n    if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n    if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n    if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n    if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n    forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n    return forPrinting;\n  } // pretty print the transaction to console\n\n\n  prettyPrint() {\n    console.log(this._getDictForDisplay());\n  } // get string representation\n\n\n  toString() {\n    return JSON.stringify(this._getDictForDisplay());\n  }\n\n}\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject the completed Transaction object\n * @returns {Uint8Array}\n */\n\n\nfunction encodeUnsignedTransaction(transactionObject) {\n  let objToEncode = transactionObject.get_obj_for_encoding();\n  return encoding.encode(objToEncode);\n}\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Transaction}\n */\n\n\nfunction decodeUnsignedTransaction(transactionBuffer) {\n  let partlyDecodedObject = encoding.decode(transactionBuffer);\n  return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Object} containing a Transaction, the signature, and possibly an auth-addr field\n */\n\n\nfunction decodeSignedTransaction(transactionBuffer) {\n  let stxnDecoded = encoding.decode(transactionBuffer);\n  stxnDecoded.txn = Transaction.from_obj_for_encoding(stxnDecoded.txn);\n  return stxnDecoded;\n}\n\nmodule.exports = {\n  Transaction,\n  ALGORAND_MIN_TX_FEE,\n  encodeUnsignedTransaction,\n  decodeUnsignedTransaction,\n  decodeSignedTransaction\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/transaction.js"],"names":["Buffer","require","address","encoding","nacl","utils","base32","ALGORAND_TRANSACTION_LENGTH","ALGORAND_MIN_TX_FEE","ALGORAND_TRANSACTION_LEASE_LENGTH","ALGORAND_MAX_ASSET_DECIMALS","NUM_ADDL_BYTES_AFTER_SIGNING","ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH","ALGORAND_TRANSACTION_ADDRESS_LENGTH","ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH","Transaction","constructor","from","to","fee","amount","firstRound","lastRound","note","genesisID","genesisHash","lease","closeRemainderTo","voteKey","selectionKey","voteFirst","voteLast","voteKeyDilution","assetIndex","assetTotal","assetDecimals","assetDefaultFrozen","assetManager","assetReserve","assetFreeze","assetClawback","assetUnitName","assetName","assetURL","assetMetadataHash","freezeAccount","freezeState","assetRevocationTarget","appIndex","appOnComplete","appLocalInts","appLocalByteSlices","appGlobalInts","appGlobalByteSlices","appApprovalProgram","appClearProgram","appArgs","appAccounts","appForeignApps","appForeignAssets","type","flatFee","suggestedParams","undefined","reKeyTo","name","tag","decodeAddress","Error","Number","isSafeInteger","toString","Uint8Array","Array","isArray","forEach","arg","addressAsString","index","foreignAppIndex","foreignAssetIndex","length","Object","assign","estimateSize","group","get_obj_for_encoding","txn","publicKey","encodeAddress","ALGORAND_ZERO_ADDRESS_STRING","close","rekey","rcv","amt","gen","grp","lx","apar","m","r","f","c","an","un","au","am","caid","t","df","dc","aclose","asnd","aamt","fadd","afrz","apap","apsu","apaa","push","apat","decodedAddress","apid","apls","nui","nbs","apgs","apan","apfa","apas","from_obj_for_encoding","txnForEnc","create","prototype","gh","fv","lv","snd","votekey","selkey","votekd","votefst","votelst","xaid","arcv","faid","addressBytes","toByte","bytesToSign","encodedMsg","concatArrays","encode","rawSignTxn","sk","toBeSigned","sig","sign","signTxn","sTxn","keypair","keyPairFromSecretKey","pubKeyFromSk","rawTxID","en_msg","genericHash","txID","hash","slice","addLease","feePerByte","addRekey","_getDictForDisplay","forPrinting","prettyPrint","console","log","JSON","stringify","encodeUnsignedTransaction","transactionObject","objToEncode","decodeUnsignedTransaction","transactionBuffer","partlyDecodedObject","decode","decodeSignedTransaction","stxnDecoded","module","exports"],"mappings":"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","sourcesContent":["const { Buffer } = require(\"buffer\");\nconst address = require(\"./encoding/address\");\nconst encoding = require(\"./encoding/encoding\");\nconst nacl = require(\"./nacl/naclWrappers\");\nconst utils = require(\"./utils/utils\");\nconst base32 = require('hi-base32');\n\nconst ALGORAND_TRANSACTION_LENGTH = 52;\nconst ALGORAND_MIN_TX_FEE = 1000; // version v5\nconst ALGORAND_TRANSACTION_LEASE_LENGTH = 32;\nconst ALGORAND_MAX_ASSET_DECIMALS = 19;\nconst NUM_ADDL_BYTES_AFTER_SIGNING = 75; // NUM_ADDL_BYTES_AFTER_SIGNING is the number of bytes added to a txn after signing it\nconst ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH = 5\nconst ALGORAND_TRANSACTION_ADDRESS_LENGTH = 32;\nconst ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH = 5;\n/**\n * Transaction enables construction of Algorand transactions\n * */\nclass Transaction {\n    constructor({from, to, fee, amount, firstRound, lastRound, note, genesisID, genesisHash, lease,\n                 closeRemainderTo, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution, \n                 assetIndex, assetTotal, assetDecimals, assetDefaultFrozen, assetManager, assetReserve,\n                 assetFreeze, assetClawback, assetUnitName, assetName, assetURL, assetMetadataHash,\n                 freezeAccount, freezeState, assetRevocationTarget,\n                 appIndex, appOnComplete, appLocalInts, appLocalByteSlices,\n                 appGlobalInts, appGlobalByteSlices, appApprovalProgram, appClearProgram,\n                 appArgs, appAccounts, appForeignApps, appForeignAssets,\n                 type=\"pay\", flatFee=false, suggestedParams=undefined,\n                 reKeyTo=undefined}) {\n        this.name = \"Transaction\";\n        this.tag = Buffer.from(\"TX\");\n\n        if (suggestedParams !== undefined) {\n            genesisHash = suggestedParams.genesisHash;\n            fee = suggestedParams.fee;\n            if (suggestedParams.flatFee !== undefined) flatFee = suggestedParams.flatFee;\n            firstRound = suggestedParams.firstRound;\n            lastRound = suggestedParams.lastRound;\n            genesisID = suggestedParams.genesisID;\n        }\n\n        from = address.decodeAddress(from);\n        if (to !== undefined) to = address.decodeAddress(to);\n        if (closeRemainderTo !== undefined) closeRemainderTo = address.decodeAddress(closeRemainderTo);\n        if (assetManager !== undefined) assetManager = address.decodeAddress(assetManager);\n        if (assetReserve !== undefined) assetReserve = address.decodeAddress(assetReserve);\n        if (assetFreeze !== undefined) assetFreeze = address.decodeAddress(assetFreeze);\n        if (assetClawback !== undefined) assetClawback = address.decodeAddress(assetClawback);\n        if (assetRevocationTarget !== undefined) assetRevocationTarget = address.decodeAddress(assetRevocationTarget);\n        if (freezeAccount !== undefined) freezeAccount = address.decodeAddress(freezeAccount);\n        if (reKeyTo !== undefined) reKeyTo = address.decodeAddress(reKeyTo);\n        if (genesisHash === undefined) throw Error(\"genesis hash must be specified and in a base64 string.\");\n\n        genesisHash = Buffer.from(genesisHash, 'base64');\n\n        if (amount !== undefined && (!Number.isSafeInteger(amount) || amount < 0)) throw Error(\"Amount must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(fee) || fee < 0) throw Error(\"fee must be a positive number and smaller than 2^53-1\");\n        if (!Number.isSafeInteger(firstRound) || firstRound < 0) throw Error(\"firstRound must be a positive number\");\n        if (!Number.isSafeInteger(lastRound) || lastRound < 0) throw Error(\"lastRound must be a positive number\");\n        if (assetTotal !== undefined && (!Number.isSafeInteger(assetTotal) || assetTotal < 0)) throw Error(\"Total asset issuance must be a positive number and smaller than 2^53-1\");\n        if (assetDecimals !== undefined && (!Number.isSafeInteger(assetDecimals) || assetDecimals < 0 || assetDecimals > ALGORAND_MAX_ASSET_DECIMALS)) throw Error(\"assetDecimals must be a positive number and smaller than \" + ALGORAND_MAX_ASSET_DECIMALS.toString());\n        if (assetIndex !== undefined && (!Number.isSafeInteger(assetIndex) || assetIndex < 0)) throw Error(\"Asset index must be a positive number and smaller than 2^53-1\");\n        if (appIndex !== undefined && (!Number.isSafeInteger(appIndex) || appIndex < 0)) throw Error(\"Application index must be a positive number and smaller than 2^53-1\");\n        if (appLocalInts !== undefined && (!Number.isSafeInteger(appLocalInts) || appLocalInts < 0)) throw Error(\"Application local ints count must be a positive number and smaller than 2^53-1\");\n        if (appLocalByteSlices !== undefined && (!Number.isSafeInteger(appLocalByteSlices) || appLocalByteSlices < 0)) throw Error(\"Application local byte slices count must be a positive number and smaller than 2^53-1\");\n        if (appGlobalInts !== undefined && (!Number.isSafeInteger(appGlobalInts) || appGlobalInts < 0)) throw Error(\"Application global ints count must be a positive number and smaller than 2^53-1\");\n        if (appGlobalByteSlices !== undefined && (!Number.isSafeInteger(appGlobalByteSlices) || appGlobalByteSlices < 0)) throw Error(\"Application global byte slices count must be a positive number and smaller than 2^53-1\")\n        if (appApprovalProgram !== undefined) {\n            if (appApprovalProgram.constructor !== Uint8Array) throw Error(\"appApprovalProgram must be a Uint8Array.\");\n        }\n        if (appClearProgram !== undefined) {\n            if (appClearProgram.constructor !== Uint8Array) throw Error(\"appClearProgram must be a Uint8Array.\");\n        }\n        if (appArgs !== undefined) {\n            if (!Array.isArray(appArgs)) throw Error(\"appArgs must be an Array of Uint8Array.\");\n            appArgs.forEach((arg) => {\n                if (arg.constructor !== Uint8Array) throw Error(\"each element of AppArgs must be a Uint8Array.\");\n            });\n        } else {\n            appArgs = new Uint8Array(0);\n        }\n        if (appAccounts !== undefined) {\n            appAccounts.forEach((addressAsString, index) => {\n               appAccounts[index] = address.decodeAddress(addressAsString);\n            })\n        }\n        if (appForeignApps !== undefined) {\n            appForeignApps.forEach((foreignAppIndex) => {\n               if (!Number.isSafeInteger(foreignAppIndex) || foreignAppIndex < 0) throw Error(\"each foreign application index must be a positive number and smaller than 2^53-1\");\n            });\n        }\n        if (appForeignAssets !== undefined) {\n            appForeignAssets.forEach((foreignAssetIndex) => {\n                if (!Number.isSafeInteger(foreignAssetIndex) || foreignAssetIndex < 0) throw Error(\"each foreign asset index must be a positive number and smaller than 2^53-1\");\n            });\n        }\n        if (note !== undefined) {\n            if (note.constructor !== Uint8Array) throw Error(\"note must be a Uint8Array.\");\n        }\n        else {\n          note = new Uint8Array(0);\n        }\n        if (lease !== undefined) {\n            if (lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n            if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \" + ALGORAND_TRANSACTION_LEASE_LENGTH.toString() + \".\");\n        }\n        else {\n            lease = new Uint8Array(0);\n        }\n        if (voteKey !== undefined) {\n            voteKey = Buffer.from(voteKey, \"base64\");\n        }\n        if (selectionKey !== undefined) {\n            selectionKey = Buffer.from(selectionKey, \"base64\");\n        }\n\n        Object.assign(this, {\n            from, to, fee, amount, firstRound, lastRound, note, genesisID, genesisHash, lease,\n            closeRemainderTo, voteKey, selectionKey, voteFirst, voteLast, voteKeyDilution,\n            assetIndex, assetTotal, assetDecimals, assetDefaultFrozen, assetManager, assetReserve,\n            assetFreeze, assetClawback, assetUnitName, assetName, assetURL, assetMetadataHash,\n            freezeAccount, freezeState, assetRevocationTarget,\n            appIndex, appOnComplete, appLocalInts, appLocalByteSlices, appGlobalInts, appGlobalByteSlices,\n            appApprovalProgram, appClearProgram, appArgs, appAccounts, appForeignApps, appForeignAssets,\n            type, reKeyTo\n        });\n\n        // Modify Fee\n        if (!flatFee){\n            this.fee *= this.estimateSize();\n        }\n        // If suggested fee too small and will be rejected, set to min tx fee\n        if (this.fee < ALGORAND_MIN_TX_FEE) {\n            this.fee = ALGORAND_MIN_TX_FEE;\n        }\n\n        // say we are aware of groups\n        this.group = undefined;\n    }\n\n    get_obj_for_encoding() {\n        if (this.type == \"pay\") {\n            let txn = {\n                \"amt\": this.amount,\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"type\": \"pay\",\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n            };\n\n            // parse close address\n            if ((this.closeRemainderTo !== undefined) && (address.encodeAddress(this.closeRemainderTo.publicKey) !== address.ALGORAND_ZERO_ADDRESS_STRING)) {\n                txn.close = Buffer.from(this.closeRemainderTo.publicKey);\n            }\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n            // allowed zero values\n            if (this.to !== undefined) txn.rcv = Buffer.from(this.to.publicKey);\n            if (!txn.note.length) delete txn.note;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.rekey) delete txn.rekey;\n            return txn;\n        }\n        else if (this.type == \"keyreg\") {\n            let txn = {\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"type\": this.type,\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n                \"votekey\": this.voteKey,\n                \"selkey\": this.selectionKey,\n                \"votefst\": this.voteFirst,\n                \"votelst\": this.voteLast,\n                \"votekd\": this.voteKeyDilution,\n            };\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n            return txn;\n        }\n        else if (this.type == \"acfg\") {\n            // asset creation, or asset reconfigure, or asset destruction\n            let txn = {\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"type\": this.type,\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n                \"caid\": this.assetIndex,\n                \"apar\": {\n                    \"t\": this.assetTotal,\n                    \"df\": this.assetDefaultFrozen,\n                    \"dc\": this.assetDecimals,\n                }\n            };\n            if (this.assetManager !== undefined) txn.apar.m = Buffer.from(this.assetManager.publicKey);\n            if (this.assetReserve !== undefined) txn.apar.r = Buffer.from(this.assetReserve.publicKey);\n            if (this.assetFreeze !== undefined) txn.apar.f = Buffer.from(this.assetFreeze.publicKey);\n            if (this.assetClawback !== undefined) txn.apar.c = Buffer.from(this.assetClawback.publicKey);\n            if (this.assetName !== undefined) txn.apar.an =this.assetName;\n            if (this.assetUnitName !== undefined) txn.apar.un = this.assetUnitName;\n            if (this.assetURL !== undefined) txn.apar.au = this.assetURL;\n            if (this.assetMetadataHash !== undefined) txn.apar.am = Buffer.from(this.assetMetadataHash);\n\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n\n            if (!txn.caid) delete txn.caid;\n            if ((!txn.apar.t) &&\n                (!txn.apar.un) &&\n                (!txn.apar.an) &&\n                (!txn.apar.df) &&\n                (!txn.apar.m) &&\n                (!txn.apar.r) &&\n                (!txn.apar.f) &&\n                (!txn.apar.c) &&\n                (!txn.apar.au) &&\n                (!txn.apar.am) &&\n                (!txn.apar.dc)){\n                    delete txn.apar\n            }\n            else {\n                if (!txn.apar.t) delete txn.apar.t;\n                if (!txn.apar.dc) delete txn.apar.dc;\n                if (!txn.apar.un) delete txn.apar.un;\n                if (!txn.apar.an) delete txn.apar.an;\n                if (!txn.apar.df) delete txn.apar.df;\n                if (!txn.apar.m) delete txn.apar.m;\n                if (!txn.apar.r) delete txn.apar.r;\n                if (!txn.apar.f) delete txn.apar.f;\n                if (!txn.apar.c) delete txn.apar.c;\n                if (!txn.apar.au) delete txn.apar.au;\n                if (!txn.apar.am) delete txn.apar.am;\n            }\n            if (txn.grp === undefined) delete txn.grp;\n\n            return txn;\n        }\n        else if (this.type == \"axfer\") {\n            // asset transfer, acceptance, revocation, mint, or burn\n            let txn = {\n                \"aamt\": this.amount,\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"arcv\": Buffer.from(this.to.publicKey),\n                \"type\": this.type,\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n                \"xaid\": this.assetIndex,\n            };\n            if (this.closeRemainderTo !== undefined) txn.aclose = Buffer.from(this.closeRemainderTo.publicKey);\n            if (this.assetRevocationTarget !== undefined) txn.asnd = Buffer.from(this.assetRevocationTarget.publicKey);\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.aamt) delete txn.aamt;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if (txn.grp === undefined) delete txn.grp;\n            if (!txn.aclose) delete txn.aclose;\n            if (!txn.asnd) delete txn.asnd;\n            if (!txn.rekey) delete txn.rekey;\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n            return txn;\n        }\n        else if (this.type == \"afrz\") {\n            // asset freeze or unfreeze\n            let txn = {\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"type\": this.type,\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n                \"faid\": this.assetIndex,\n                \"afrz\": this.freezeState,\n            };\n            if (this.freezeAccount !== undefined) txn.fadd = Buffer.from(this.freezeAccount.publicKey);\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if (!txn.afrz) delete txn.afrz;\n            if (txn.grp === undefined) delete txn.grp;\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n            return txn;\n        }\n        else if (this.type == \"appl\") {\n            // application call of some kind\n            let txn = {\n                \"fee\": this.fee,\n                \"fv\": this.firstRound,\n                \"lv\": this.lastRound,\n                \"note\": Buffer.from(this.note),\n                \"snd\": Buffer.from(this.from.publicKey),\n                \"type\": this.type,\n                \"gen\": this.genesisID,\n                \"gh\": this.genesisHash,\n                \"lx\": Buffer.from(this.lease),\n                \"grp\": this.group,\n                \"apid\": this.appIndex,\n                \"apan\": this.appOnComplete,\n                \"apls\": {\n                    \"nui\": this.appLocalInts,\n                    \"nbs\": this.appLocalByteSlices\n                },\n                \"apgs\": {\n                    \"nui\": this.appGlobalInts,\n                    \"nbs\": this.appGlobalByteSlices\n                },\n                \"apfa\": this.appForeignApps,\n                \"apas\": this.appForeignAssets,\n            };\n            if ((this.reKeyTo !== undefined)) {\n                txn.rekey = Buffer.from(this.reKeyTo.publicKey)\n            }\n            if (this.appApprovalProgram !== undefined) {\n                txn.apap = Buffer.from(this.appApprovalProgram);\n            }\n            if (this.appClearProgram !== undefined) {\n                txn.apsu = Buffer.from(this.appClearProgram);\n            }\n            if (this.appArgs !== undefined) {\n                txn.apaa = [];\n                this.appArgs.forEach((arg) => {\n                    txn.apaa.push(Buffer.from(arg));\n                });\n            }\n            if (this.appAccounts !== undefined) {\n                txn.apat = [];\n                this.appAccounts.forEach((decodedAddress) => {\n                    txn.apat.push(Buffer.from(decodedAddress.publicKey));\n                });\n            }\n            // allowed zero values\n            if (!txn.note.length) delete txn.note;\n            if (!txn.lx.length) delete txn.lx;\n            if (!txn.amt) delete txn.amt;\n            if (!txn.fee) delete txn.fee;\n            if (!txn.gen) delete txn.gen;\n            if (!txn.apid) delete txn.apid;\n            if (!txn.apls.nui) delete txn.apls.nui;\n            if (!txn.apls.nbs) delete txn.apls.nbs;\n            if ((!txn.apls.nui) && (!txn.apls.nbs)) delete txn.apls;\n            if (!txn.apgs.nui) delete txn.apgs.nui;\n            if (!txn.apgs.nbs) delete txn.apgs.nbs;\n            if (!txn.apaa || !txn.apaa.length) delete txn.apaa;\n            if ((!txn.apgs.nui) && (!txn.apgs.nbs)) delete txn.apgs;\n            if (!txn.apap) delete txn.apap;\n            if (!txn.apsu) delete txn.apsu;\n            if (!txn.apan) delete txn.apan;\n            if (!txn.apfa) delete txn.apfa;\n            if (!txn.apas) delete txn.apas;\n            if (txn.grp === undefined) delete txn.grp;\n            return txn;\n        }\n    }\n\n    static from_obj_for_encoding(txnForEnc) {\n        let txn = Object.create(this.prototype);\n        txn.name = \"Transaction\";\n        txn.tag = Buffer.from(\"TX\");\n\n        txn.genesisID = txnForEnc.gen;\n        txn.genesisHash = Buffer.from(txnForEnc.gh);\n        txn.type = txnForEnc.type;\n        txn.fee = txnForEnc.fee;\n        txn.firstRound = txnForEnc.fv;\n        txn.lastRound = txnForEnc.lv;\n        txn.note = new Uint8Array(txnForEnc.note);\n        txn.lease = new Uint8Array(txnForEnc.lx);\n        txn.from = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.snd)));\n        if (txnForEnc.grp !== undefined) txn.group = Buffer.from(txnForEnc.grp);\n        if (txnForEnc.rekey !== undefined) txn.reKeyTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rekey)));\n\n        if (txnForEnc.type === \"pay\") {\n            txn.amount = txnForEnc.amt;\n            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.rcv)));\n            if (txnForEnc.close !== undefined) txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(txnForEnc.close));\n        }\n        else if (txnForEnc.type === \"keyreg\") {\n            txn.voteKey = Buffer.from(txnForEnc.votekey);\n            txn.selectionKey = Buffer.from(txnForEnc.selkey);\n            txn.voteKeyDilution = txnForEnc.votekd;\n            txn.voteFirst = txnForEnc.votefst;\n            txn.voteLast = txnForEnc.votelst;\n        }\n        else if (txnForEnc.type === \"acfg\") {\n            // asset creation, or asset reconfigure, or asset destruction\n            if (txnForEnc.caid !== undefined){\n                txn.assetIndex = txnForEnc.caid;\n            }\n            if (txnForEnc.apar !== undefined){\n                txn.assetTotal = txnForEnc.apar.t;\n                txn.assetDefaultFrozen = txnForEnc.apar.df;\n                if (txnForEnc.apar.dc !== undefined) txn.assetDecimals = txnForEnc.apar.dc;\n                if (txnForEnc.apar.m !== undefined) txn.assetManager = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.m)));\n                if (txnForEnc.apar.r !== undefined) txn.assetReserve = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.r)));\n                if (txnForEnc.apar.f !== undefined) txn.assetFreeze = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.f)));\n                if (txnForEnc.apar.c !== undefined) txn.assetClawback = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.apar.c)));\n                if (txnForEnc.apar.un !== undefined) txn.assetUnitName = txnForEnc.apar.un;\n                if (txnForEnc.apar.an !== undefined) txn.assetName = txnForEnc.apar.an;\n                if (txnForEnc.apar.au !== undefined) txn.assetURL = txnForEnc.apar.au;\n                if (txnForEnc.apar.am !== undefined) txn.assetMetadataHash = txnForEnc.apar.am;\n            }\n        }\n        else if (txnForEnc.type === \"axfer\") {\n            // asset transfer, acceptance, revocation, mint, or burn\n            if (txnForEnc.xaid !== undefined) {\n                txn.assetIndex = txnForEnc.xaid;\n            }\n            if (txnForEnc.aamt !== undefined) txn.amount = txnForEnc.aamt;\n            if (txnForEnc.aclose !== undefined) {\n                txn.closeRemainderTo = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.aclose)));\n            }\n            if (txnForEnc.asnd !== undefined) {\n                txn.assetRevocationTarget = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.asnd)));\n            }\n            txn.to = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.arcv)));\n        }\n        else if (txnForEnc.type === \"afrz\") {\n            if (txnForEnc.afrz !== undefined) {\n                txn.freezeState = txnForEnc.afrz;\n            }\n            if (txnForEnc.faid !== undefined) {\n                txn.assetIndex = txnForEnc.faid;\n            }\n            txn.freezeAccount = address.decodeAddress(address.encodeAddress(new Uint8Array(txnForEnc.fadd)));\n        } else if (txnForEnc.type === \"appl\") {\n            if (txnForEnc.apid !== undefined) {\n                txn.appIndex = txnForEnc.apid;\n            }\n            if (txnForEnc.apan !== undefined) {\n                txn.appOnComplete = txnForEnc.apan;\n            }\n            if (txnForEnc.apls !== undefined) {\n                if (txnForEnc.apls.nui !== undefined) txn.appLocalInts = txnForEnc.apls.nui;\n                if (txnForEnc.apls.nbs !== undefined) txn.appLocalByteSlices = txnForEnc.apls.nbs;\n            }\n            if (txnForEnc.apgs !== undefined) {\n                if (txnForEnc.apgs.nui !== undefined) txn.appGlobalInts = txnForEnc.apgs.nui;\n                if (txnForEnc.apgs.nbs !== undefined) txn.appGlobalByteSlices = txnForEnc.apgs.nbs;\n            }\n            if (txnForEnc.apap !== undefined) {\n                txn.appApprovalProgram = new Uint8Array(txnForEnc.apap);\n            }\n            if (txnForEnc.apsu !== undefined) {\n                txn.appClearProgram = new Uint8Array(txnForEnc.apsu);\n            }\n            if (txnForEnc.apaa !== undefined) {\n                txn.appArgs = [];\n                txnForEnc.apaa.forEach((arg) => {\n                    txn.appArgs.push(new Uint8Array(arg));\n                });\n            }\n            if (txnForEnc.apat !== undefined) {\n                txn.appAccounts = [];\n                txnForEnc.apat.forEach((addressBytes) => {\n                   txn.appAccounts.push(address.decodeAddress(address.encodeAddress(new Uint8Array(addressBytes))));\n                });\n            }\n            if (txnForEnc.apfa !== undefined) {\n                txn.appForeignApps = txnForEnc.apfa;\n            }\n            if (txnForEnc.apas !== undefined) {\n                txn.appForeignAssets = txnForEnc.apas;\n            }\n        }\n        return txn;\n    }\n\n    estimateSize() {\n        return (this.toByte().length + NUM_ADDL_BYTES_AFTER_SIGNING)\n    }\n\n    bytesToSign() {\n        let encodedMsg = this.toByte();\n        return Buffer.from(utils.concatArrays(this.tag, encodedMsg));\n    }\n\n    toByte() {\n        return encoding.encode(this.get_obj_for_encoding());\n    }\n\n    // returns the raw signature\n    rawSignTxn(sk) {\n        const toBeSigned = this.bytesToSign();\n        const sig = nacl.sign(toBeSigned, sk);\n        return Buffer.from(sig);\n    }\n\n    signTxn(sk) {\n        // construct signed message\n        let sTxn = {\n            \"sig\": this.rawSignTxn(sk),\n            \"txn\": this.get_obj_for_encoding(),\n        };\n        // add AuthAddr if signing with a different key than From indicates\n        let keypair = nacl.keyPairFromSecretKey(sk);\n        let pubKeyFromSk = keypair[\"publicKey\"];\n        if (address.encodeAddress(pubKeyFromSk) != address.encodeAddress(this.from[\"publicKey\"])) {\n            sTxn[\"sgnr\"] = Buffer.from(pubKeyFromSk);\n        }\n        return new Uint8Array(encoding.encode(sTxn));\n    }\n\n    rawTxID() {\n        const en_msg = this.toByte();\n        const gh = Buffer.from(utils.concatArrays(this.tag, en_msg));\n        return Buffer.from(nacl.genericHash(gh));\n    }\n\n    txID() {\n        const hash = this.rawTxID();\n        return base32.encode(hash).slice(0, ALGORAND_TRANSACTION_LENGTH);\n    }\n\n    // add a lease to a transaction not yet having\n    // supply feePerByte to increment fee accordingly\n    addLease(lease, feePerByte=0) {\n        if (lease !== undefined) {\n            if (lease.constructor !== Uint8Array) throw Error(\"lease must be a Uint8Array.\");\n            if (lease.length !== ALGORAND_TRANSACTION_LEASE_LENGTH) throw Error(\"lease must be of length \" + ALGORAND_TRANSACTION_LEASE_LENGTH.toString() + \".\");\n        }\n        else {\n            lease = new Uint8Array(0);\n        }\n        this.lease = lease;\n        if (feePerByte !== 0) {\n            this.fee += (ALGORAND_TRANSACTION_LEASE_LABEL_LENGTH + ALGORAND_TRANSACTION_LEASE_LENGTH) * feePerByte;\n        }\n    }\n\n    // add the rekey-to field to a transaction not yet having it\n    // supply feePerByte to increment fee accordingly\n    addRekey(reKeyTo, feePerByte=0) {\n        if (reKeyTo !== undefined) {\n            this.reKeyTo = address.decodeAddress(reKeyTo);\n        }\n        if (feePerByte !== 0) {\n            this.fee += (ALGORAND_TRANSACTION_REKEY_LABEL_LENGTH + ALGORAND_TRANSACTION_ADDRESS_LENGTH) * feePerByte;\n        }\n    }\n\n    // build display dict for prettyPrint and toString\n    _getDictForDisplay() {\n        let forPrinting = {\n            ...this\n        };\n        forPrinting.tag = forPrinting.tag.toString();\n        forPrinting.from = address.encodeAddress(forPrinting.from.publicKey);\n        if (forPrinting.to !== undefined) forPrinting.to = address.encodeAddress(forPrinting.to.publicKey);\n        // things that need fixing:\n        if (forPrinting.closeRemainderTo !== undefined) forPrinting.closeRemainderTo = address.encodeAddress(forPrinting.closeRemainderTo.publicKey);\n        if (forPrinting.assetManager !== undefined) forPrinting.assetManager = address.encodeAddress(forPrinting.assetManager.publicKey);\n        if (forPrinting.assetReserve !== undefined) forPrinting.assetReserve = address.encodeAddress(forPrinting.assetReserve.publicKey);\n        if (forPrinting.assetFreeze !== undefined) forPrinting.assetFreeze = address.encodeAddress(forPrinting.assetFreeze.publicKey);\n        if (forPrinting.assetClawback !== undefined) forPrinting.assetClawback = address.encodeAddress(forPrinting.assetClawback.publicKey);\n        if (forPrinting.assetRevocationTarget !== undefined) forPrinting.assetRevocationTarget = address.encodeAddress(forPrinting.assetRevocationTarget.publicKey);\n        if (forPrinting.reKeyTo !== undefined) forPrinting.reKeyTo = address.encodeAddress(forPrinting.reKeyTo.publicKey);\n        forPrinting.genesisHash = forPrinting.genesisHash.toString('base64');\n        return forPrinting;\n    }\n\n    // pretty print the transaction to console\n    prettyPrint() {\n        console.log(this._getDictForDisplay());\n    }\n\n    // get string representation\n    toString() {\n        return JSON.stringify(this._getDictForDisplay());\n    }\n}\n\n/**\n * encodeUnsignedTransaction takes a completed txnBuilder.Transaction object, such as from the makeFoo\n * family of transactions, and converts it to a Buffer\n * @param transactionObject the completed Transaction object\n * @returns {Uint8Array}\n */\nfunction encodeUnsignedTransaction(transactionObject) {\n    let objToEncode = transactionObject.get_obj_for_encoding();\n    return encoding.encode(objToEncode);\n}\n\n/**\n * decodeUnsignedTransaction takes a Buffer (as if from encodeUnsignedTransaction) and converts it to a txnBuilder.Transaction object\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Transaction}\n */\nfunction decodeUnsignedTransaction(transactionBuffer) {\n    let partlyDecodedObject = encoding.decode(transactionBuffer);\n    return Transaction.from_obj_for_encoding(partlyDecodedObject);\n}\n\n/**\n * decodeSignedTransaction takes a Buffer (from transaction.signTxn) and converts it to an object\n * containing the Transaction (txn), the signature (sig), and the auth-addr field if applicable (sgnr)\n * @param transactionBuffer the Uint8Array containing a transaction\n * @returns {Object} containing a Transaction, the signature, and possibly an auth-addr field\n */\nfunction decodeSignedTransaction(transactionBuffer) {\n    let stxnDecoded = encoding.decode(transactionBuffer);\n    stxnDecoded.txn = Transaction.from_obj_for_encoding(stxnDecoded.txn);\n    return stxnDecoded;\n}\n\nmodule.exports = {\n    Transaction,\n    ALGORAND_MIN_TX_FEE,\n    encodeUnsignedTransaction,\n    decodeUnsignedTransaction,\n    decodeSignedTransaction,\n};\n"]},"metadata":{},"sourceType":"script"}
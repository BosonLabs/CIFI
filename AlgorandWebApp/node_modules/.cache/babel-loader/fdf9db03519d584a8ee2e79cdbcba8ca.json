{"ast":null,"code":"import algosdk from 'algosdk';\n\nclass AlgoTransaction {\n  constructor() {\n    this.SERVER_HOST = \"https://dispenser-server.testnet.aws.algodev.network\";\n  }\n\n  // SERVER_HOST = \"http://localhost:3001\";\n  checkValidAccount(account) {\n    return algosdk.isValidAddress(account);\n  }\n\n  async getAccountInfo(account, updateAccountInfocallback, recaptchaToken) {\n    this.updateAccountInfocallback = updateAccountInfocallback;\n    let options = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + this.YOUR_API_KEY\n      }\n    };\n    let accountInfo = await fetch(`${this.SERVER_HOST}/session/account/${account}/${recaptchaToken}`, options).then(res => {\n      if (res.ok) {\n        res.json().then(json => {\n          console.log(`recieved account info ${JSON.stringify(json)}`);\n          this.updateAccountInfocallback(json);\n        });\n      }\n    });\n  }\n\n  async createAndSendTransaction(account, amount, updateTransactionStatusCallback, recaptchaToken) {\n    console.log(`create and send Algorand transaction to account '${account}' with amount: '${amount}'`);\n    this.updateTransactionStatusCallback = updateTransactionStatusCallback;\n    let options = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        \"Authorization\": \"Bearer \" + this.YOUR_API_KEY\n      }\n    };\n    let transaction = await fetch(`${this.SERVER_HOST}/session/transaction/${account}/${amount}/${recaptchaToken}`, options).then(res => {\n      if (res.ok) {\n        res.json().then(json => {\n          console.log(`recieved transaction info ${JSON.stringify(json)}`);\n          this.updateTransactionStatusCallback(json);\n        });\n      }\n    });\n  }\n\n}\n\nexport default new AlgoTransaction();","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/src/AlgoTransaction.js"],"names":["algosdk","AlgoTransaction","SERVER_HOST","checkValidAccount","account","isValidAddress","getAccountInfo","updateAccountInfocallback","recaptchaToken","options","method","headers","YOUR_API_KEY","accountInfo","fetch","then","res","ok","json","console","log","JSON","stringify","createAndSendTransaction","amount","updateTransactionStatusCallback","transaction"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;;AAGA,MAAMC,eAAN,CAAsB;AAAA;AAAA,SAElBC,WAFkB,GAEJ,sDAFI;AAAA;;AAGlB;AAEAC,EAAAA,iBAAiB,CAACC,OAAD,EAAU;AACvB,WAAOJ,OAAO,CAACK,cAAR,CAAuBD,OAAvB,CAAP;AACH;;AAED,QAAME,cAAN,CAAqBF,OAArB,EAA8BG,yBAA9B,EAAyDC,cAAzD,EAAyE;AAErE,SAAKD,yBAAL,GAAiCA,yBAAjC;AAEA,QAAIE,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,KADE;AAEVC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAiB,YAAY,KAAKC;AAH7B;AAFC,KAAd;AASA,QAAIC,WAAW,GAAG,MAAMC,KAAK,CAAE,GAAE,KAAKZ,WAAY,oBAAmBE,OAAQ,IAAGI,cAAe,EAAlE,EAAqEC,OAArE,CAAL,CACnBM,IADmB,CACdC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,EAAR,EAAY;AACRD,QAAAA,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBG,IAAI,IAAI;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAa,yBAAwBC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAqB,EAA1D;AACA,eAAKX,yBAAL,CAA+BW,IAA/B;AACH,SAHD;AAIH;AACJ,KARmB,CAAxB;AASH;;AAGD,QAAMK,wBAAN,CAA+BnB,OAA/B,EAAwCoB,MAAxC,EAAgDC,+BAAhD,EAAiFjB,cAAjF,EAAiG;AAE7FW,IAAAA,OAAO,CAACC,GAAR,CAAa,oDAAmDhB,OAAQ,mBAAkBoB,MAAO,GAAjG;AAEA,SAAKC,+BAAL,GAAuCA,+BAAvC;AAEA,QAAIhB,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,OAAO,EAAE;AACL,kBAAU,kBADL;AAEL,wBAAgB,kBAFX;AAGL,yBAAiB,YAAY,KAAKC;AAH7B;AAFC,KAAd;AASA,QAAIc,WAAW,GAAG,MAAMZ,KAAK,CAAE,GAAE,KAAKZ,WAAY,wBAAuBE,OAAQ,IAAGoB,MAAO,IAAGhB,cAAe,EAAhF,EAAmFC,OAAnF,CAAL,CACnBM,IADmB,CACdC,GAAG,IAAI;AACT,UAAIA,GAAG,CAACC,EAAR,EAAY;AACRD,QAAAA,GAAG,CAACE,IAAJ,GAAWH,IAAX,CAAgBG,IAAI,IAAI;AACpBC,UAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAAqB,EAA9D;AAEA,eAAKO,+BAAL,CAAqCP,IAArC;AACH,SAJD;AAKH;AACJ,KATmB,CAAxB;AAUH;;AA3DiB;;AA+DtB,eAAe,IAAIjB,eAAJ,EAAf","sourcesContent":["import algosdk from 'algosdk';\r\n\r\n\r\nclass AlgoTransaction {\r\n\r\n    SERVER_HOST = \"https://dispenser-server.testnet.aws.algodev.network\";\r\n    // SERVER_HOST = \"http://localhost:3001\";\r\n\r\n    checkValidAccount(account) {\r\n        return algosdk.isValidAddress(account);\r\n    }\r\n\r\n    async getAccountInfo(account, updateAccountInfocallback, recaptchaToken) {\r\n\r\n        this.updateAccountInfocallback = updateAccountInfocallback;\r\n\r\n        let options = {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.YOUR_API_KEY,\r\n            }\r\n        };\r\n\r\n        let accountInfo = await fetch(`${this.SERVER_HOST}/session/account/${account}/${recaptchaToken}`, options)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        console.log(`recieved account info ${JSON.stringify(json)}`);\r\n                        this.updateAccountInfocallback(json);\r\n                    });\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    async createAndSendTransaction(account, amount, updateTransactionStatusCallback, recaptchaToken) {\r\n\r\n        console.log(`create and send Algorand transaction to account '${account}' with amount: '${amount}'`);\r\n\r\n        this.updateTransactionStatusCallback = updateTransactionStatusCallback;\r\n\r\n        let options = {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Authorization\": \"Bearer \" + this.YOUR_API_KEY,\r\n            }\r\n        };\r\n\r\n        let transaction = await fetch(`${this.SERVER_HOST}/session/transaction/${account}/${amount}/${recaptchaToken}`, options)\r\n            .then(res => {\r\n                if (res.ok) {\r\n                    res.json().then(json => {\r\n                        console.log(`recieved transaction info ${JSON.stringify(json)}`);\r\n\r\n                        this.updateTransactionStatusCallback(json);\r\n                    });\r\n                }\r\n            });\r\n    }\r\n\r\n}\r\n\r\nexport default new AlgoTransaction();\r\n"]},"metadata":{},"sourceType":"module"}
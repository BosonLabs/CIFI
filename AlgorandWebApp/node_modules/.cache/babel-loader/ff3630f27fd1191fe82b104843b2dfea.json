{"ast":null,"code":"class SearchForTransactions {\n  constructor(c) {\n    this.c = c;\n    this.query = {};\n  }\n  /**\n   * returns information about indexed transactions\n   * @param headers, optional\n   * @returns Promise<*>\n   */\n\n\n  async do(headers = {}) {\n    let res = await this.c.get(\"/v2/transactions\", this.query, headers);\n    return res.body;\n  }\n\n  // notePrefix to filter with, as uint8array\n  notePrefix(prefix) {\n    this.query[\"note-prefix\"] = prefix;\n    return this;\n  } // txtype to filter with, as string\n\n\n  txType(type) {\n    this.query[\"tx-type\"] = type;\n    return this;\n  } // sigtype to filter with, as string\n\n\n  sigType(type) {\n    this.query[\"sig-type\"] = type;\n    return this;\n  } // txid to filter with, as string\n\n\n  txid(txid) {\n    this.query[\"txid\"] = txid;\n    return this;\n  } // round to filter with, as int\n\n\n  round(round) {\n    this.query[\"round\"] = round;\n    return this;\n  } // min round to filter with, as int\n\n\n  minRound(round) {\n    this.query[\"min-round\"] = round;\n    return this;\n  } // max round to filter with, as int\n\n\n  maxRound(round) {\n    this.query[\"max-round\"] = round;\n    return this;\n  } // asset ID to filter with, as int\n\n\n  assetID(id) {\n    this.query[\"asset-id\"] = id;\n    return this;\n  } // limit for filter, as int\n\n\n  limit(limit) {\n    this.query[\"limit\"] = limit;\n    return this;\n  } // before-time to filter with, as rfc3339 string\n\n\n  beforeTime(before) {\n    this.query[\"before-time\"] = before;\n    return this;\n  } // after-time to filter with, as rfc3339 string\n\n\n  afterTime(after) {\n    this.query[\"after-time\"] = after;\n    return this;\n  } // filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyGreaterThan(greater) {\n    this.query[\"currency-greater-than\"] = greater;\n    return this;\n  } // filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\n\n  currencyLessThan(lesser) {\n    this.query[\"currency-less-than\"] = lesser;\n    return this;\n  } // combined with address, defines what address to filter on, as string\n\n\n  addressRole(role) {\n    this.query[\"address-role\"] = role;\n    return this;\n  } // address to filter with, as string\n\n\n  address(address) {\n    this.query[\"address\"] = address;\n    return this;\n  } // whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n\n\n  excludeCloseTo(exclude) {\n    this.query[\"exclude-close-to\"] = exclude;\n    return this;\n  } // used for pagination\n\n\n  nextToken(nextToken) {\n    this.query['next'] = nextToken;\n    return this;\n  } // whether or not to include rekeying transactions\n\n\n  rekeyTo(rekeyTo) {\n    this.query['rekey-to'] = rekeyTo;\n    return this;\n  } // filter for this application\n\n\n  applicationID(applicationID) {\n    this.query['application-id'] = applicationID;\n    return this;\n  }\n\n}\n\nmodule.exports = {\n  SearchForTransactions\n};","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/react-dispenser-usdc-algo/dispenser-react-app/node_modules/algosdk/src/client/v2/indexer/searchForTransactions.js"],"names":["SearchForTransactions","constructor","c","query","do","headers","res","get","body","notePrefix","prefix","txType","type","sigType","txid","round","minRound","maxRound","assetID","id","limit","beforeTime","before","afterTime","after","currencyGreaterThan","greater","currencyLessThan","lesser","addressRole","role","address","excludeCloseTo","exclude","nextToken","rekeyTo","applicationID","module","exports"],"mappings":"AAAA,MAAMA,qBAAN,CAA4B;AAC3BC,EAAAA,WAAW,CAACC,CAAD,EAAI;AACd,SAAKA,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAa,EAAb;AACA;AAED;AACD;AACA;AACA;AACA;;;AACC,QAAMC,EAAN,CAASC,OAAO,GAAG,EAAnB,EAAuB;AACtB,QAAIC,GAAG,GAAG,MAAM,KAAKJ,CAAL,CAAOK,GAAP,CAAW,kBAAX,EAA+B,KAAKJ,KAApC,EAA2CE,OAA3C,CAAhB;AACA,WAAOC,GAAG,CAACE,IAAX;AACA;;AAED;AACAC,EAAAA,UAAU,CAACC,MAAD,EAAS;AAClB,SAAKP,KAAL,CAAW,aAAX,IAA4BO,MAA5B;AACA,WAAO,IAAP;AACA,GApB0B,CAsB3B;;;AACAC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACZ,SAAKT,KAAL,CAAW,SAAX,IAAwBS,IAAxB;AACA,WAAO,IAAP;AACA,GA1B0B,CA4B3B;;;AACAC,EAAAA,OAAO,CAACD,IAAD,EAAO;AACb,SAAKT,KAAL,CAAW,UAAX,IAAyBS,IAAzB;AACA,WAAO,IAAP;AACA,GAhC0B,CAkC3B;;;AACAE,EAAAA,IAAI,CAACA,IAAD,EAAO;AACV,SAAKX,KAAL,CAAW,MAAX,IAAqBW,IAArB;AACA,WAAO,IAAP;AACA,GAtC0B,CAwC3B;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKZ,KAAL,CAAW,OAAX,IAAsBY,KAAtB;AACA,WAAO,IAAP;AACA,GA5C0B,CA8C3B;;;AACAC,EAAAA,QAAQ,CAACD,KAAD,EAAQ;AACf,SAAKZ,KAAL,CAAW,WAAX,IAA0BY,KAA1B;AACA,WAAO,IAAP;AACA,GAlD0B,CAoD3B;;;AACAE,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACf,SAAKZ,KAAL,CAAW,WAAX,IAA0BY,KAA1B;AACA,WAAO,IAAP;AACA,GAxD0B,CA0D3B;;;AACAG,EAAAA,OAAO,CAACC,EAAD,EAAK;AACX,SAAKhB,KAAL,CAAW,UAAX,IAAyBgB,EAAzB;AACA,WAAO,IAAP;AACA,GA9D0B,CAgE3B;;;AACAC,EAAAA,KAAK,CAACA,KAAD,EAAQ;AACZ,SAAKjB,KAAL,CAAW,OAAX,IAAsBiB,KAAtB;AACA,WAAO,IAAP;AACA,GApE0B,CAsE3B;;;AACAC,EAAAA,UAAU,CAACC,MAAD,EAAS;AAClB,SAAKnB,KAAL,CAAW,aAAX,IAA4BmB,MAA5B;AACA,WAAO,IAAP;AACA,GA1E0B,CA4E3B;;;AACAC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AAChB,SAAKrB,KAAL,CAAW,YAAX,IAA2BqB,KAA3B;AACA,WAAO,IAAP;AACA,GAhF0B,CAkF3B;;;AACAC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC5B,SAAKvB,KAAL,CAAW,uBAAX,IAAsCuB,OAAtC;AACA,WAAO,IAAP;AACA,GAtF0B,CAwF3B;;;AACAC,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACxB,SAAKzB,KAAL,CAAW,oBAAX,IAAmCyB,MAAnC;AACA,WAAO,IAAP;AACA,GA5F0B,CA8F3B;;;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACjB,SAAK3B,KAAL,CAAW,cAAX,IAA6B2B,IAA7B;AACA,WAAO,IAAP;AACA,GAlG0B,CAoG3B;;;AACAC,EAAAA,OAAO,CAACA,OAAD,EAAU;AAChB,SAAK5B,KAAL,CAAW,SAAX,IAAwB4B,OAAxB;AACA,WAAO,IAAP;AACA,GAxG0B,CA0G3B;;;AACAC,EAAAA,cAAc,CAACC,OAAD,EAAU;AACvB,SAAK9B,KAAL,CAAW,kBAAX,IAAiC8B,OAAjC;AACA,WAAO,IAAP;AACA,GA9G0B,CAgH3B;;;AACAC,EAAAA,SAAS,CAACA,SAAD,EAAY;AACpB,SAAK/B,KAAL,CAAW,MAAX,IAAqB+B,SAArB;AACA,WAAO,IAAP;AACA,GApH0B,CAsH3B;;;AACAC,EAAAA,OAAO,CAACA,OAAD,EAAU;AAChB,SAAKhC,KAAL,CAAW,UAAX,IAAyBgC,OAAzB;AACA,WAAO,IAAP;AACA,GA1H0B,CA4H3B;;;AACAC,EAAAA,aAAa,CAACA,aAAD,EAAgB;AAC5B,SAAKjC,KAAL,CAAW,gBAAX,IAA+BiC,aAA/B;AACA,WAAO,IAAP;AACA;;AAhI0B;;AAmI5BC,MAAM,CAACC,OAAP,GAAiB;AAACtC,EAAAA;AAAD,CAAjB","sourcesContent":["class SearchForTransactions {\n\tconstructor(c) {\n\t\tthis.c = c;\n\t\tthis.query = {};\n\t}\n\n\t/**\n\t * returns information about indexed transactions\n\t * @param headers, optional\n\t * @returns Promise<*>\n\t */\n\tasync do(headers = {}) {\n\t\tlet res = await this.c.get(\"/v2/transactions\", this.query, headers);\n\t\treturn res.body;\n\t};\n\n\t// notePrefix to filter with, as uint8array\n\tnotePrefix(prefix) {\n\t\tthis.query[\"note-prefix\"] = prefix;\n\t\treturn this;\n\t}\n\n\t// txtype to filter with, as string\n\ttxType(type) {\n\t\tthis.query[\"tx-type\"] = type;\n\t\treturn this;\n\t}\n\n\t// sigtype to filter with, as string\n\tsigType(type) {\n\t\tthis.query[\"sig-type\"] = type;\n\t\treturn this;\n\t}\n\n\t// txid to filter with, as string\n\ttxid(txid) {\n\t\tthis.query[\"txid\"] = txid;\n\t\treturn this;\n\t}\n\n\t// round to filter with, as int\n\tround(round) {\n\t\tthis.query[\"round\"] = round;\n\t\treturn this;\n\t}\n\n\t// min round to filter with, as int\n\tminRound(round) {\n\t\tthis.query[\"min-round\"] = round;\n\t\treturn this;\n\t}\n\n\t// max round to filter with, as int\n\tmaxRound(round) {\n\t\tthis.query[\"max-round\"] = round;\n\t\treturn this;\n\t}\n\n\t// asset ID to filter with, as int\n\tassetID(id) {\n\t\tthis.query[\"asset-id\"] = id;\n\t\treturn this;\n\t}\n\n\t// limit for filter, as int\n\tlimit(limit) {\n\t\tthis.query[\"limit\"] = limit;\n\t\treturn this;\n\t}\n\n\t// before-time to filter with, as rfc3339 string\n\tbeforeTime(before) {\n\t\tthis.query[\"before-time\"] = before;\n\t\treturn this;\n\t}\n\n\t// after-time to filter with, as rfc3339 string\n\tafterTime(after) {\n\t\tthis.query[\"after-time\"] = after;\n\t\treturn this;\n\t}\n\n\t// filtered results should have an amount greater than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\tcurrencyGreaterThan(greater) {\n\t\tthis.query[\"currency-greater-than\"] = greater;\n\t\treturn this;\n\t}\n\n\t// filtered results should have an amount less than this value, as int, representing microAlgos, unless an asset-id is provided, in which case units are in the asset's units\n\tcurrencyLessThan(lesser) {\n\t\tthis.query[\"currency-less-than\"] = lesser;\n\t\treturn this;\n\t}\n\n\t// combined with address, defines what address to filter on, as string\n\taddressRole(role) {\n\t\tthis.query[\"address-role\"] = role;\n\t\treturn this;\n\t}\n\n\t// address to filter with, as string\n\taddress(address) {\n\t\tthis.query[\"address\"] = address;\n\t\treturn this;\n\t}\n\n\t// whether or not to consider the close-to field as a receiver when filtering transactions, as bool. set to true to ignore close-to\n\texcludeCloseTo(exclude) {\n\t\tthis.query[\"exclude-close-to\"] = exclude;\n\t\treturn this;\n\t}\n\n\t// used for pagination\n\tnextToken(nextToken) {\n\t\tthis.query['next'] = nextToken;\n\t\treturn this;\n\t}\n\n\t// whether or not to include rekeying transactions\n\trekeyTo(rekeyTo) {\n\t\tthis.query['rekey-to'] = rekeyTo;\n\t\treturn this;\n\t}\n\n\t// filter for this application\n\tapplicationID(applicationID) {\n\t\tthis.query['application-id'] = applicationID;\n\t\treturn this;\n\t}\n}\n\nmodule.exports = {SearchForTransactions};\n"]},"metadata":{},"sourceType":"script"}
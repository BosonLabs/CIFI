{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\CIFI\\\\AlgorandWebApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst appId = 13793863;\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [res, setRes] = useState(\"\");\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/apps\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"JZDWH47zlZEMMWCk3q73Cem4iBQ=\");\n\n_c = ExampleAlgoSigner;\n\nconst CheckAlgoSigner = () => {\n  _s2();\n\n  const action = useCallback(() => {\n    if (typeof AlgoSigner !== 'undefined') {\n      return \"AlgoSigner is installed.\";\n    } else {\n      return \"AlgoSigner is NOT installed.\";\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CheckAlgoSigner\",\n    buttonText: \"Check\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(CheckAlgoSigner, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = CheckAlgoSigner;\nlet arr = [];\n\nconst GetAccounts = () => {\n  _s3();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    }); //const accts = await AlgoSigner.accounts({})\n    //alert(\"acc\"+accts);\n\n    arr.push(JSON.stringify(accts, null, 2));\n    return JSON.stringify(accts[0], null, 2);\n  }, []); //\n\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Accounts\",\n    buttonText: \"Get Accounts\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAccounts, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAccounts;\nconsole.log(\"logg\", arr); // const GetParams = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.algod({\n//         ledger: 'TestNet',\n//         path: `/v2/transactions/params`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\n// };\n// const GetAppGlobalState = () => {\n//   const action = useCallback(async () => {\n//     try {\n//       const r = await AlgoSigner.indexer({\n//         ledger: 'TestNet',\n//         path: `/v2/applications/${appId}`\n//       });\n//       return JSON.stringify(r, null, 2);\n//     } catch (e) {\n//       console.error(e);\n//       return JSON.stringify(e, null, 2);\n//     }\n//   }, []);\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n// };\n\nconst con = async () => {//   await AlgoSigner.connect();\n  // let client = new algosdk.Algodv2(...);\n  // let testNetParams = await client.getTransactionParams().do();\n  // testNetParams.flatFee = true;\n  // let tx1 = new algosdk.Transaction({\n  //   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // let tx2 = new algosdk.Transaction({\n  //   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\n  //   amount: 1,\n  //   ...testNetParams,\n  // });\n  // algosdk.assignGroupID([tx1, tx2]);\n  // let sdkTxs = [tx1, tx2];\n  // let base64Txs = sdkTxs.map((tx) => {\n  //   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\n  // });\n  // let walletTxs = base64Txs.map((b64) => {\n  //   return { tx: b64 };\n  // });\n  // let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\n  // let sendResult = await client\n  //   .sendRawTransaction(\n  //     signedTxs.map((signedTx) =>\n  //       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\n  //     )\n  //   )\n  //   .do();\n};\n\nconst App = () => {\n  const AccCreate = () => {\n    const algosdk = require('algosdk'); // In order to do this ASA tutorial, we will need to generate 3 accounts\n    // once created copy off the values which we will past into the TutorialASA code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    let acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\");\n  };\n\n  const create = async () => {\n    const algosdk = require('algosdk');\n\n    const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    const server = \"http://localhost\";\n    const port = 4001;\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\n    // Asset creation specific parameters\n    // The following parameters are asset specific\n    // Throughout the example these will be re-used. \n    // We will also change the manager later in the example\n    //let addr = recoveredAccount1.addr;\n\n    let addr = \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\"; // Whether user accounts will need to be unfrozen before transacting    \n\n    let defaultFrozen = false; // integer number of decimals for asset unit calculation\n\n    let decimals = 0; // total number of this asset available for circulation   \n\n    let totalIssuance = 1000; // Used to display asset units to user    \n\n    let unitName = \"LATINUM\"; // Friendly name of the asset    \n\n    let assetName = \"latinum\"; // Optional string pointing to a URL relating to the asset\n\n    let assetURL = \"http://someurl\"; // Optional hash commitment of some sort relating to the asset. 32 character length.\n\n    let assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\"; // The following parameters are the only ones\n    // that can be changed, and they have to be changed\n    // by the current manager\n    // Specified address can change reserve, freeze, clawback, and manager\n\n    let manager = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; //let manager = recoveredAccount2.addr;\n    // Specified address is considered the asset reserve\n    // (it has no special privileges, this is only informational)\n    //let reserve = recoveredAccount2.addr;\n\n    let reserve = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can freeze or unfreeze user asset holdings \n    //let freeze = recoveredAccount2.addr;\n\n    let freeze = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\"; // Specified address can revoke user asset holdings and send \n    // them to other addresses    \n    //let clawback = recoveredAccount2.addr;\n\n    let clawback = \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\n    let params = await algodclient.getTransactionParams().do(); //comment out the next two lines to use suggested fee\n\n    params.fee = 1000;\n    params.flatFee = true;\n    console.log(params); // signing and sending \"txn\" allows \"addr\" to create an asset\n\n    let txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note, totalIssuance, decimals, defaultFrozen, manager, reserve, freeze, clawback, unitName, assetName, assetURL, assetMetadataHash, params); //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\n\n    let rawSignedTxn = txn.signTxn(addr.sk);\n    let tx = await algodclient.sendRawTransaction(rawSignedTxn).do();\n    console.log(\"Transaction : \" + tx.txId);\n    let assetID = null; // wait for transaction to be confirmed\n\n    await waitForConfirmation(algodclient, tx.txId); // Get the new asset's information from the creator account\n\n    let ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\n    assetID = ptx[\"asset-index\"];\n  };\n\n  const balance = async () => {\n    const algosdk = require('algosdk'); // In order to do an ASA tutorial, we will need to generate 3 accounts\n    // once created, copy off the values which we will paste into the tutorial code\n    // once created sucessfully, you will need to add funds to all three\n    // The Algorand TestNet Dispenser is located here: \n    // https://bank.testnet.algorand.network/\n\n\n    var acct = null;\n    acct = algosdk.generateAccount();\n    let account1 = acct.addr;\n    console.log(\"Account 1 = \" + account1);\n    var account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\n    console.log(\"Account Mnemonic 1 = \" + account1_mnemonic);\n    var recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\n    var isValid = algosdk.isValidAddress(recoveredAccount1.addr);\n    console.log(\"Is this a valid address: \" + isValid);\n    console.log(\"Account created. Save off Mnemonic and address\"); // sandbox\n\n    const token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\n    const server = \"http://localhost\";\n    const port = 4001; // Instantiate the algod wrapper\n\n    let algodclient = new algosdk.Algodv2(token, server, port);\n    (async () => {\n      let account_info = await algodclient.accountInformation(recoveredAccount1.addr).do();\n      let acct_string = JSON.stringify(account_info);\n      console.log(\"Account 1 Info: \" + acct_string);\n    })().catch(e => {\n      console.log(e);\n    }); //     const algosdk = require('algosdk');\n    //   let account = algosdk.generateAccount();\n    // console.log(\"Account Address: \", account.addr);\n    // let mn = algosdk.secretKeyToMnemonic(account.sk);\n    // console.log(\"Account Mnemonic: \", mn);\n    // const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\n    // const server = \"http://localhost\";\n    // const port = 4001;\n    // // Instantiate the algod wrapper\n    // let algodclient = new algosdk.Algodv2(token, server, port);\n    // // (async () => {\n    // //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\n    // // let acct_string = JSON.stringify(account_info);\n    // // console.log(\"Account Info: \" + acct_string);\n    // // })().catch(e => {\n    // // console.log(e);\n    // // });\n    //     //alert(\"balance\")\n    //     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\n    //     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\n    //     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\n    //     console.log(\"My address: %s\", myAccount.addr)\n    //     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\n    //     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h1\",\n        dividing: true,\n        children: \"Simple React App Using AlgoSigner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(CheckAlgoSigner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(GetAccounts, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: AccCreate,\n      children: \"Balance\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n};\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"CheckAlgoSigner\");\n$RefreshReg$(_c3, \"GetAccounts\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/CIFI/AlgorandWebApp/src/App.js"],"names":["Button","Container","Header","Message","useState","useCallback","Link","appId","ExampleAlgoSigner","title","buttonText","buttonAction","res","setRes","result","setResult","onClick","r","CheckAlgoSigner","action","AlgoSigner","arr","GetAccounts","connect","ledger","accts","accounts","push","JSON","stringify","console","log","con","App","AccCreate","algosdk","require","acct","generateAccount","account1","addr","account1_mnemonic","secretKeyToMnemonic","sk","recoveredAccount1","mnemonicToSecretKey","isValid","isValidAddress","create","token","server","port","algodclient","Algodv2","note","undefined","defaultFrozen","decimals","totalIssuance","unitName","assetName","assetURL","assetMetadataHash","manager","reserve","freeze","clawback","params","getTransactionParams","do","fee","flatFee","txn","makeAssetCreateTxnWithSuggestedParams","rawSignedTxn","signTxn","tx","sendRawTransaction","txId","assetID","waitForConfirmation","ptx","pendingTransactionInformation","balance","account_info","accountInformation","acct_string","catch","e"],"mappings":";;;;;;;;AAAA;AACA,OAAO,WAAP;AACA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,OAAnC,QAAiD,mBAAjD;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AACA,SAASC,IAAT,QAAqB,kBAArB;AAEA,MAAMC,KAAK,GAAG,QAAd;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AAAA;;AAC/D,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA9B;AAEA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AACA,QAAMY,OAAO,GAAGX,WAAW,CAAC,YAAY;AACtC,UAAMY,CAAC,GAAG,MAAMN,YAAY,EAA5B;AACAI,IAAAA,SAAS,CAACE,CAAD,CAAT;AACD,GAH0B,EAGxB,CAACN,YAAD,CAHwB,CAA3B;AAKA,sBACE;AAAA,4BAEE,QAAC,IAAD;AACQ,MAAA,EAAE,EAAC;AADX;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,QAAQ,MAAxB;AAAA,gBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,IAAjB;AAAuB,MAAA,OAAO,EAAEO,OAAhC;AAAA,gBAA0CN;AAA1C;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,OAAD;AAAA,6BACE;AAAA,kBACGI;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAiBD,CA1BD,C,CA4BA;;;GA5BMN,iB;;KAAAA,iB;;AA8BN,MAAMU,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMC,MAAM,GAAGd,WAAW,CAAC,MAAM;AAC/B,QAAI,OAAOe,UAAP,KAAsB,WAA1B,EAAuC;AACrC,aAAO,0BAAP;AACD,KAFD,MAEO;AACL,aAAO,8BAAP;AACD;AACF,GANyB,EAMvB,EANuB,CAA1B;AAQA,sBAAO,QACL,iBADK;AACa,IAAA,KAAK,EAAC,iBADnB;AACqC,IAAA,UAAU,EAAC,OADhD;AACwD,IAAA,YAAY,EAAED;AADtE;AAAA;AAAA;AAAA;AAAA,UAAP;AAGD,CAZD;;IAAMD,e;;MAAAA,e;AAcN,IAAIG,GAAG,GAAC,EAAR;;AAGA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAMH,MAAM,GAAGd,WAAW,CAAC,YAAY;AACrC,UAAMe,UAAU,CAACG,OAAX,CAAmB;AACvBC,MAAAA,MAAM,EAAE;AADe,KAAnB,CAAN;AAGA,UAAMC,KAAK,GAAG,MAAML,UAAU,CAACM,QAAX,CAAoB;AACtCF,MAAAA,MAAM,EAAE;AAD8B,KAApB,CAApB,CAJqC,CAOrC;AACA;;AACAH,IAAAA,GAAG,CAACM,IAAJ,CAASC,IAAI,CAACC,SAAL,CAAeJ,KAAf,EAAsB,IAAtB,EAA4B,CAA5B,CAAT;AAEA,WAAOG,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAAC,CAAD,CAApB,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;AAGD,GAdyB,EAcvB,EAduB,CAA1B,CADwB,CAkBxB;;AAEA,sBAAO,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,cAAzB;AAAwC,IAAA,UAAU,EAAC,cAAnD;AAAkE,IAAA,YAAY,EAAEN;AAAhF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArBD;;IAAMG,W;;MAAAA,W;AAyBNQ,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBV,GAAnB,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,MAAMW,GAAG,GAAC,YAAS,CAGnB;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEC,CA3CD;;AA8CA,MAAMC,GAAG,GAAG,MAAM;AAEhB,QAAMC,SAAS,GAAC,MAAI;AAClB,UAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,CADkB,CAEtB;AACA;AACA;AACA;AACA;;;AACA,QAAIC,IAAI,GAAG,IAAX;AAEAA,IAAAA,IAAI,GAAGF,OAAO,CAACG,eAAR,EAAP;AAEA,QAAIC,QAAQ,GAAGF,IAAI,CAACG,IAApB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBQ,QAA7B;AACA,QAAIE,iBAAiB,GAAGN,OAAO,CAACO,mBAAR,CAA4BL,IAAI,CAACM,EAAjC,CAAxB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAyBU,iBAArC;AACA,QAAIG,iBAAiB,GAAGT,OAAO,CAACU,mBAAR,CAA4BJ,iBAA5B,CAAxB;AACA,QAAIK,OAAO,GAAGX,OAAO,CAACY,cAAR,CAAuBH,iBAAiB,CAACJ,IAAzC,CAAd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8Be,OAA1C;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ;AACG,GAnBD;;AAwBA,QAAMiB,MAAM,GAAC,YAAS;AAEpB,UAAMb,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEJ,UAAMa,KAAK,GAAG,kEAAd;AACA,UAAMC,MAAM,GAAG,kBAAf;AACA,UAAMC,IAAI,GAAG,IAAb;AAEA,QAAIC,WAAW,GAAG,IAAIjB,OAAO,CAACkB,OAAZ,CAAoBJ,KAApB,EAA2BC,MAA3B,EAAmCC,IAAnC,CAAlB;AAEI,QAAIG,IAAI,GAAGC,SAAX,CAVoB,CAUE;AAC1B;AACA;AACA;AACA;AACA;;AACA,QAAIf,IAAI,GAAC,4DAAT,CAhBwB,CAiBxB;;AACA,QAAIgB,aAAa,GAAG,KAApB,CAlBwB,CAmBxB;;AACA,QAAIC,QAAQ,GAAG,CAAf,CApBwB,CAqBxB;;AACA,QAAIC,aAAa,GAAG,IAApB,CAtBwB,CAuBxB;;AACA,QAAIC,QAAQ,GAAG,SAAf,CAxBwB,CAyBxB;;AACA,QAAIC,SAAS,GAAG,SAAhB,CA1BwB,CA2BxB;;AACA,QAAIC,QAAQ,GAAG,gBAAf,CA5BwB,CA6BxB;;AACA,QAAIC,iBAAiB,GAAG,kCAAxB,CA9BwB,CA+BxB;AACA;AACA;AACA;;AACA,QAAIC,OAAO,GAAC,4DAAZ,CAnCwB,CAoCxB;AACA;AACA;AACA;;AACA,QAAIC,OAAO,GAAC,4DAAZ,CAxCwB,CAyCxB;AACA;;AACA,QAAIC,MAAM,GAAC,4DAAX,CA3CwB,CA4CxB;AACA;AACA;;AACA,QAAIC,QAAQ,GAAC,4DAAb;AAEA,QAAIC,MAAM,GAAG,MAAMf,WAAW,CAACgB,oBAAZ,GAAmCC,EAAnC,EAAnB,CAjDwB,CAkDpB;;AACAF,IAAAA,MAAM,CAACG,GAAP,GAAa,IAAb;AACAH,IAAAA,MAAM,CAACI,OAAP,GAAiB,IAAjB;AACAzC,IAAAA,OAAO,CAACC,GAAR,CAAYoC,MAAZ,EArDoB,CAuDxB;;AACA,QAAIK,GAAG,GAAGrC,OAAO,CAACsC,qCAAR,CAA8CjC,IAA9C,EAAoDc,IAApD,EACFI,aADE,EACaD,QADb,EACuBD,aADvB,EACsCO,OADtC,EAC+CC,OAD/C,EACwDC,MADxD,EAENC,QAFM,EAEIP,QAFJ,EAEcC,SAFd,EAEyBC,QAFzB,EAEmCC,iBAFnC,EAEsDK,MAFtD,CAAV,CAxDwB,CA4DpB;;AACJ,QAAIO,YAAY,GAAGF,GAAG,CAACG,OAAJ,CAAYnC,IAAI,CAACG,EAAjB,CAAnB;AACA,QAAIiC,EAAE,GAAI,MAAMxB,WAAW,CAACyB,kBAAZ,CAA+BH,YAA/B,EAA6CL,EAA7C,EAAhB;AACAvC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAmB6C,EAAE,CAACE,IAAlC;AACA,QAAIC,OAAO,GAAG,IAAd,CAhEwB,CAiExB;;AACA,UAAMC,mBAAmB,CAAC5B,WAAD,EAAcwB,EAAE,CAACE,IAAjB,CAAzB,CAlEwB,CAmExB;;AACA,QAAIG,GAAG,GAAG,MAAM7B,WAAW,CAAC8B,6BAAZ,CAA0CN,EAAE,CAACE,IAA7C,EAAmDT,EAAnD,EAAhB;AACAU,IAAAA,OAAO,GAAGE,GAAG,CAAC,aAAD,CAAb;AACG,GAtED;;AAyEA,QAAME,OAAO,GAAC,YAAS;AAGrB,UAAMhD,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,CAHqB,CAIzB;AACA;AACA;AACA;AACA;;;AACA,QAAIC,IAAI,GAAG,IAAX;AAEAA,IAAAA,IAAI,GAAGF,OAAO,CAACG,eAAR,EAAP;AAEA,QAAIC,QAAQ,GAAGF,IAAI,CAACG,IAApB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBQ,QAA7B;AACA,QAAIE,iBAAiB,GAAGN,OAAO,CAACO,mBAAR,CAA4BL,IAAI,CAACM,EAAjC,CAAxB;AACAb,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAyBU,iBAArC;AACA,QAAIG,iBAAiB,GAAGT,OAAO,CAACU,mBAAR,CAA4BJ,iBAA5B,CAAxB;AACA,QAAIK,OAAO,GAAGX,OAAO,CAACY,cAAR,CAAuBH,iBAAiB,CAACJ,IAAzC,CAAd;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8Be,OAA1C;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,gDAAZ,EApByB,CAwBzB;;AACA,UAAMkB,KAAK,GAAG,8CAAd;AACA,UAAMC,MAAM,GAAG,kBAAf;AACA,UAAMC,IAAI,GAAG,IAAb,CA3ByB,CA4BzB;;AACA,QAAIC,WAAW,GAAG,IAAIjB,OAAO,CAACkB,OAAZ,CAAoBJ,KAApB,EAA2BC,MAA3B,EAAmCC,IAAnC,CAAlB;AAEA,KAAC,YAAY;AACT,UAAIiC,YAAY,GAAI,MAAMhC,WAAW,CAACiC,kBAAZ,CAA+BzC,iBAAiB,CAACJ,IAAjD,EAAuD6B,EAAvD,EAA1B;AACA,UAAIiB,WAAW,GAAG1D,IAAI,CAACC,SAAL,CAAeuD,YAAf,CAAlB;AACAtD,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBuD,WAAjC;AAEH,KALD,IAKKC,KALL,CAKWC,CAAC,IAAI;AACZ1D,MAAAA,OAAO,CAACC,GAAR,CAAYyD,CAAZ;AACH,KAPD,EA/ByB,CAyCzB;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAGG,GAnFD;;AAqFA,sBACE;AAAA,4BACA,QAAC,SAAD;AAAW,MAAA,SAAS,EAAC,KAArB;AAAA,8BAEE,QAAC,MAAD;AAAQ,QAAA,EAAE,EAAC,IAAX;AAAgB,QAAA,QAAQ,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAYE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,cAZF,eAcE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAdF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAyBJ;AACgB,MAAA,IAAI,EAAC,QADrB;AAEgB,MAAA,OAAO,EAAGtD,SAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBI;AAAA,kBADF;AAkCD,CA1ND;;MAAMD,G;AA4NN,eAAeA,GAAf","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst appId = 13793863;\r\n\r\n\r\n/**\r\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\r\n * and a message with the result.\r\n *\r\n * @param buttonAction is a (potentially async) function called when clicking on the button\r\n *   and returning the result to be displayed\r\n */\r\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\r\n  const [res, setRes] = useState(\"\");\r\n  \r\n  const [result, setResult] = useState(\"\");\r\n  const onClick = useCallback(async () => {\r\n    const r = await buttonAction();\r\n    setResult(r);\r\n  }, [buttonAction]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h1>helloo</h1> */}\r\n      <Link\r\n              to=\"/apps\">\r\n\r\n      {/* <button type=\"button\" >App3</button> */}\r\n      </Link>\r\n      <Header as=\"h2\" dividing>{title}</Header>\r\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\r\n      <Message>\r\n        <code>\r\n          {result}\r\n        </code>\r\n      </Message>\r\n    </>\r\n  );\r\n};\r\n\r\n// The following components are all demonstrating some features of AlgoSigner\r\n\r\nconst CheckAlgoSigner = () => {\r\n  const action = useCallback(() => {\r\n    if (typeof AlgoSigner !== 'undefined') {\r\n      return \"AlgoSigner is installed.\";\r\n    } else {\r\n      return \"AlgoSigner is NOT installed.\";\r\n    }\r\n  }, []);\r\n\r\n  return <\r\n    ExampleAlgoSigner title=\"CheckAlgoSigner\" buttonText=\"Check\" buttonAction={action}\r\n    />\r\n};\r\n\r\nlet arr=[];\r\n\r\n\r\nconst GetAccounts = () => {\r\n  const action = useCallback(async () => {    \r\n    await AlgoSigner.connect({\r\n      ledger: 'TestNet'\r\n    });\r\n    const accts = await AlgoSigner.accounts({\r\n      ledger: 'TestNet'\r\n    });\r\n    //const accts = await AlgoSigner.accounts({})\r\n    //alert(\"acc\"+accts);\r\n    arr.push(JSON.stringify(accts, null, 2))\r\n\r\n    return JSON.stringify(accts[0], null, 2);\r\n\r\n    \r\n  }, []);\r\n\r\n\r\n  //\r\n\r\n  return <ExampleAlgoSigner title=\"Get Accounts\" buttonText=\"Get Accounts\" buttonAction={action}/>\r\n};\r\n\r\n\r\n\r\nconsole.log(\"logg\",arr);\r\n\r\n\r\n\r\n// const GetParams = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.algod({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/transactions/params`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Transaction Params\" buttonText=\"Get Transaction Params\" buttonAction={action}/>\r\n// };\r\n\r\n\r\n// const GetAppGlobalState = () => {\r\n//   const action = useCallback(async () => {\r\n//     try {\r\n//       const r = await AlgoSigner.indexer({\r\n//         ledger: 'TestNet',\r\n//         path: `/v2/applications/${appId}`\r\n//       });\r\n//       return JSON.stringify(r, null, 2);\r\n      \r\n//     } catch (e) {\r\n//       console.error(e);\r\n//       return JSON.stringify(e, null, 2);\r\n//     }\r\n//   }, []);\r\n\r\n//   return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\r\n// };\r\nconst con=async()=>{\r\n\r\n\r\n//   await AlgoSigner.connect();\r\n// let client = new algosdk.Algodv2(...);\r\n\r\n// let testNetParams = await client.getTransactionParams().do();\r\n// testNetParams.flatFee = true;\r\n\r\n// let tx1 = new algosdk.Transaction({\r\n//   to: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   from: \"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// let tx2 = new algosdk.Transaction({\r\n//   to: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   from: \"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\",\r\n//   amount: 1,\r\n//   ...testNetParams,\r\n// });\r\n\r\n// algosdk.assignGroupID([tx1, tx2]);\r\n\r\n// let sdkTxs = [tx1, tx2];\r\n// let base64Txs = sdkTxs.map((tx) => {\r\n//   return AlgoSigner.encoding.msgpackToBase64(tx.toByte());\r\n// });\r\n// let walletTxs = base64Txs.map((b64) => {\r\n//   return { tx: b64 };\r\n// });\r\n\r\n// let signedTxs = await AlgoSigner.wallet.sign(walletTxs);\r\n\r\n// let sendResult = await client\r\n//   .sendRawTransaction(\r\n//     signedTxs.map((signedTx) =>\r\n//       AlgoSigner.encoding.base64ToMsgpack(signedTx.blob)\r\n//     )\r\n//   )\r\n//   .do();\r\n  \r\n}\r\n\r\n\r\nconst App = () => {\r\n\r\n  const AccCreate=()=>{\r\n    const algosdk = require('algosdk');\r\n// In order to do this ASA tutorial, we will need to generate 3 accounts\r\n// once created copy off the values which we will past into the TutorialASA code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nlet acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n  }\r\n\r\n\r\n  \r\n\r\n  const create=async()=>{\r\n\r\n    const algosdk = require('algosdk');\r\n\r\nconst token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n    let note = undefined; // arbitrary data to be stored in the transaction; here, none is stored\r\n// Asset creation specific parameters\r\n// The following parameters are asset specific\r\n// Throughout the example these will be re-used. \r\n// We will also change the manager later in the example\r\n//let addr = recoveredAccount1.addr;\r\nlet addr=\"5N4B6FZMCQXFZDDKKZDPUSIQ2FCNXVIAZNE6QQPBOIWL6NJKEZJNC7FAUI\";\r\n// Whether user accounts will need to be unfrozen before transacting    \r\nlet defaultFrozen = false;\r\n// integer number of decimals for asset unit calculation\r\nlet decimals = 0;\r\n// total number of this asset available for circulation   \r\nlet totalIssuance = 1000;\r\n// Used to display asset units to user    \r\nlet unitName = \"LATINUM\";\r\n// Friendly name of the asset    \r\nlet assetName = \"latinum\";\r\n// Optional string pointing to a URL relating to the asset\r\nlet assetURL = \"http://someurl\";\r\n// Optional hash commitment of some sort relating to the asset. 32 character length.\r\nlet assetMetadataHash = \"16efaa3924a6fd9d3a4824799a4ac65d\";\r\n// The following parameters are the only ones\r\n// that can be changed, and they have to be changed\r\n// by the current manager\r\n// Specified address can change reserve, freeze, clawback, and manager\r\nlet manager=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n//let manager = recoveredAccount2.addr;\r\n// Specified address is considered the asset reserve\r\n// (it has no special privileges, this is only informational)\r\n//let reserve = recoveredAccount2.addr;\r\nlet reserve=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can freeze or unfreeze user asset holdings \r\n//let freeze = recoveredAccount2.addr;\r\nlet freeze=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n// Specified address can revoke user asset holdings and send \r\n// them to other addresses    \r\n//let clawback = recoveredAccount2.addr;\r\nlet clawback=\"7P7QMGOJUYCPZEKCJIDN43UJB475TA7IZCGCCOFLCQZSRJBCWU6PD6PK3Q\";\r\n\r\nlet params = await algodclient.getTransactionParams().do();\r\n    //comment out the next two lines to use suggested fee\r\n    params.fee = 1000;\r\n    params.flatFee = true;\r\n    console.log(params);\r\n\r\n// signing and sending \"txn\" allows \"addr\" to create an asset\r\nlet txn = algosdk.makeAssetCreateTxnWithSuggestedParams(addr, note,\r\n        totalIssuance, decimals, defaultFrozen, manager, reserve, freeze,\r\n    clawback, unitName, assetName, assetURL, assetMetadataHash, params);\r\n\r\n    //let rawSignedTxn = txn.signTxn(recoveredAccount1.sk)\r\nlet rawSignedTxn = txn.signTxn(addr.sk)\r\nlet tx = (await algodclient.sendRawTransaction(rawSignedTxn).do());\r\nconsole.log(\"Transaction : \" + tx.txId);\r\nlet assetID = null;\r\n// wait for transaction to be confirmed\r\nawait waitForConfirmation(algodclient, tx.txId);\r\n// Get the new asset's information from the creator account\r\nlet ptx = await algodclient.pendingTransactionInformation(tx.txId).do();\r\nassetID = ptx[\"asset-index\"];\r\n  }\r\n\r\n\r\n  const balance=async()=>{\r\n\r\n\r\n    const algosdk = require('algosdk');\r\n// In order to do an ASA tutorial, we will need to generate 3 accounts\r\n// once created, copy off the values which we will paste into the tutorial code\r\n// once created sucessfully, you will need to add funds to all three\r\n// The Algorand TestNet Dispenser is located here: \r\n// https://bank.testnet.algorand.network/\r\nvar acct = null;\r\n\r\nacct = algosdk.generateAccount();\r\n\r\nlet account1 = acct.addr;\r\nconsole.log(\"Account 1 = \" + account1);\r\nvar account1_mnemonic = algosdk.secretKeyToMnemonic(acct.sk);\r\nconsole.log(\"Account Mnemonic 1 = \"+ account1_mnemonic);\r\nvar recoveredAccount1 = algosdk.mnemonicToSecretKey(account1_mnemonic);\r\nvar isValid = algosdk.isValidAddress(recoveredAccount1.addr);\r\nconsole.log(\"Is this a valid address: \" + isValid);\r\nconsole.log(\"Account created. Save off Mnemonic and address\");\r\n\r\n\r\n\r\n// sandbox\r\nconst token = \"SGO1GKSzyE7IEPItTxCByw9x8FmnrCDexi9/cOUJOiI=\";\r\nconst server = \"http://localhost\";\r\nconst port = 4001;\r\n// Instantiate the algod wrapper\r\nlet algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n(async () => {\r\n    let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n    let acct_string = JSON.stringify(account_info);\r\n    console.log(\"Account 1 Info: \" + acct_string);\r\n    \r\n})().catch(e => {\r\n    console.log(e);\r\n});\r\n\r\n\r\n//     const algosdk = require('algosdk');\r\n\r\n\r\n//   let account = algosdk.generateAccount();\r\n// console.log(\"Account Address: \", account.addr);\r\n// let mn = algosdk.secretKeyToMnemonic(account.sk);\r\n// console.log(\"Account Mnemonic: \", mn);\r\n\r\n\r\n// const token = \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\";\r\n// const server = \"http://localhost\";\r\n// const port = 4001;\r\n\r\n// // Instantiate the algod wrapper\r\n// let algodclient = new algosdk.Algodv2(token, server, port);\r\n\r\n// // (async () => {\r\n// //   let account_info = (await algodclient.accountInformation(recoveredAccount1.addr).do());\r\n\r\n// // let acct_string = JSON.stringify(account_info);\r\n// // console.log(\"Account Info: \" + acct_string);\r\n// // })().catch(e => {\r\n// // console.log(e);\r\n// // });\r\n\r\n\r\n\r\n//     //alert(\"balance\")\r\n\r\n//     //few order size remove opera beyond result arrive copper deny lens shed kiwi mixture margin permit dream erase season crisp twin forward click abstract sad\r\n\r\n//     const passphrase = \"still there favorite open script fly cable medal pipe force foster chuckle achieve auto army length vendor print apart hawk question blanket exit about stone\";\r\n\r\n//     let myAccount = algosdk.mnemonicToSecretKey(passphrase)\r\n\r\n//     console.log(\"My address: %s\", myAccount.addr)\r\n\r\n//     let accountInfo = await algodclient.accountInformation(myAccount.addr).do();\r\n\r\n//     console.log(\"Account balance: %d microAlgos\", accountInfo.amount);\r\n\r\n\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <Container className=\"App\">\r\n      \r\n      <Header as=\"h1\" dividing>Simple React App Using AlgoSigner</Header>\r\n      {/* <p>\r\n        The Pure Stake Team provide many examples using AlgoSigner.\r\n        See <a\r\n        href=\"https://purestake.github.io/algosigner-dapp-example\">https://purestake.github.io/algosigner-dapp-example</a> for\r\n        more examples.\r\n      </p> */}\r\n\r\n\r\n\r\n      <CheckAlgoSigner/>\r\n\r\n      <GetAccounts/>\r\n\r\n      {/* <GetParams/>\r\n\r\n      <GetAppGlobalState/> */}\r\n\r\n    </Container>\r\n\r\n\r\n\r\n<button\r\n                type=\"button\"\r\n                onClick= {AccCreate}>\r\n               Balance\r\n              </button>\r\n\r\n</>\r\n  );\r\n};\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}
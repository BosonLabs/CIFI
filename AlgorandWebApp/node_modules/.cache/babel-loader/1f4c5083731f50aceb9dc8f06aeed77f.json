{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\demoAlgo\\\\smart-contracts\\\\devrel\\\\algosigner-react\\\\src\\\\Extracheck.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message, Table } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nconst appId = 13793863;\n\nconst Extracheck = () => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  console.log(\"result\", result); //   const onClick = useCallback(async () => {\n  //     const r = await buttonAction();\n  //     setResult(r);\n  //   }, [buttonAction]);\n  // const action = useCallback(async () => {    \n  //     await AlgoSigner.connect({\n  //       ledger: 'TestNet'\n  //     });\n  //     const accts = await AlgoSigner.accounts({\n  //       ledger: 'TestNet'\n  //     });\n  //     //const accts = await AlgoSigner.accounts({})\n  //     alert(\"acc\"+accts);\n  //     return JSON.stringify(accts[0], null, 2);\n  //   }, []);\n\n  const conb = async () => {\n    let sendCodeElem = document.getElementById('send-code'); // AlgoSigner.sign({\n    //     from: document.getElementById('from').value,\n    //     assetName: document.getElementById('name').value,\n    //     assetUnitName: document.getElementById('unit-name').value,\n    //     assetTotal: +document.getElementById('total').value,\n    //     assetDecimals: +document.getElementById('decimals').value,\n    //     note: document.getElementById('note').value,\n    //     type: 'acfg',\n    //     fee: txParams['min-fee'],\n    //     firstRound: txParams['last-round'],\n    //     lastRound: txParams['last-round'] + 1000,\n    //     genesisID: txParams['genesis-id'],\n    //     genesisHash: txParams['genesis-hash'],\n    //     flatFee: true\n    //   })\n    //   .then((d) => {\n    //     signedTx = d;\n    //   })\n    //   .catch((e) => {\n    //     console.error(e);\n    //   });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hello Extracheck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: conb,\n      children: \"connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Extracheck, \"qoGl22B7WAXz9bHytSnRSI+DHp8=\");\n\n_c = Extracheck;\n\nconst GetAppLocalState = ({\n  who\n}) => {\n  _s2();\n\n  const action = useCallback(async () => {\n    try {\n      const accts = await AlgoSigner.accounts({\n        ledger: 'TestNet'\n      });\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/accounts/${accts[who]['address']}`\n      });\n      return JSON.stringify(r['account']['apps-local-state'][0]['key-value'][0]['value']['uint'], null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, [who]);\n  return /*#__PURE__*/_jsxDEV(Extracheck, {\n    title: \"Get Local State\",\n    buttonText: \"Get Local State\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 12\n  }, this);\n};\n\n_s2(GetAppLocalState, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = GetAppLocalState;\nexport default Extracheck;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Extracheck\");\n$RefreshReg$(_c2, \"GetAppLocalState\");","map":{"version":3,"sources":["C:/demoAlgo/smart-contracts/devrel/algosigner-react/src/Extracheck.js"],"names":["Button","Container","Header","Message","Table","useState","useCallback","appId","Extracheck","result","setResult","console","log","conb","sendCodeElem","document","getElementById","GetAppLocalState","who","action","accts","AlgoSigner","accounts","ledger","r","indexer","path","JSON","stringify","e","error"],"mappings":";;;;;;AAAA;AACA,OAAO,WAAP;AACA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4CC,KAA5C,QAAwD,mBAAxD;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;AAIA,MAAMC,KAAK,GAAG,QAAd;;AAEA,MAAMC,UAAU,GAAC,MAAI;AAAA;;AAGf,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AAGAM,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBH,MAArB,EANe,CAQjB;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,QAAMI,IAAI,GAAE,YAAW;AAEnB,QAAIC,YAAY,GAAGC,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAnB,CAFmB,CAInB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGD,GA3BH;;AAqCA,sBACI;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAGA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAEH,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CA7ED;;GAAML,U;;KAAAA,U;;AAiFN,MAAMS,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAAA;;AAChC,QAAMC,MAAM,GAAGb,WAAW,CAAC,YAAY;AACrC,QAAI;AACF,YAAMc,KAAK,GAAG,MAAMC,UAAU,CAACC,QAAX,CAAoB;AACtCC,QAAAA,MAAM,EAAE;AAD8B,OAApB,CAApB;AAGA,YAAMC,CAAC,GAAG,MAAMH,UAAU,CAACI,OAAX,CAAmB;AACjCF,QAAAA,MAAM,EAAE,SADyB;AAEjCG,QAAAA,IAAI,EAAG,gBAAeN,KAAK,CAACF,GAAD,CAAL,CAAW,SAAX,CAAsB;AAFX,OAAnB,CAAhB;AAIA,aAAOS,IAAI,CAACC,SAAL,CAAeJ,CAAC,CAAC,SAAD,CAAD,CAAa,kBAAb,EAAiC,CAAjC,EAAoC,WAApC,EAAiD,CAAjD,EAAoD,OAApD,EAA6D,MAA7D,CAAf,EAAqF,IAArF,EAA2F,CAA3F,CAAP;AACD,KATD,CASE,OAAOK,CAAP,EAAU;AACVlB,MAAAA,OAAO,CAACmB,KAAR,CAAcD,CAAd;AACA,aAAOF,IAAI,CAACC,SAAL,CAAeC,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,CAAP;AACD;AACF,GAdyB,EAcvB,CAACX,GAAD,CAduB,CAA1B;AAgBA,sBAAO,QAAC,UAAD;AAAY,IAAA,KAAK,EAAC,iBAAlB;AAAoC,IAAA,UAAU,EAAC,iBAA/C;AAAiE,IAAA,YAAY,EAAEC;AAA/E;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBH;;IAAMF,gB;;MAAAA,gB;AAuBN,eAAeT,UAAf","sourcesContent":["/* global AlgoSigner */\r\nimport './App.css';\r\nimport {Button, Container, Header, Message, Table} from \"semantic-ui-react\";\r\nimport {useState, useCallback} from \"react\";\r\n\r\n\r\n\r\nconst appId = 13793863;\r\n\r\nconst Extracheck=()=>{\r\n\r\n\r\n      const [result, setResult] = useState(\"\");\r\n\r\n\r\n      console.log(\"result\",result);\r\n\r\n    //   const onClick = useCallback(async () => {\r\n    //     const r = await buttonAction();\r\n    //     setResult(r);\r\n    //   }, [buttonAction]);\r\n\r\n\r\n    // const action = useCallback(async () => {    \r\n    //     await AlgoSigner.connect({\r\n    //       ledger: 'TestNet'\r\n    //     });\r\n    //     const accts = await AlgoSigner.accounts({\r\n    //       ledger: 'TestNet'\r\n    //     });\r\n    //     //const accts = await AlgoSigner.accounts({})\r\n    //     alert(\"acc\"+accts);\r\n    //     return JSON.stringify(accts[0], null, 2);\r\n    //   }, []);\r\n    \r\n\r\n    const conb= async () =>{\r\n\r\n        let sendCodeElem = document.getElementById('send-code');\r\n\r\n        // AlgoSigner.sign({\r\n        //     from: document.getElementById('from').value,\r\n        //     assetName: document.getElementById('name').value,\r\n        //     assetUnitName: document.getElementById('unit-name').value,\r\n        //     assetTotal: +document.getElementById('total').value,\r\n        //     assetDecimals: +document.getElementById('decimals').value,\r\n        //     note: document.getElementById('note').value,\r\n        //     type: 'acfg',\r\n        //     fee: txParams['min-fee'],\r\n        //     firstRound: txParams['last-round'],\r\n        //     lastRound: txParams['last-round'] + 1000,\r\n        //     genesisID: txParams['genesis-id'],\r\n        //     genesisHash: txParams['genesis-hash'],\r\n        //     flatFee: true\r\n        //   })\r\n        //   .then((d) => {\r\n        //     signedTx = d;\r\n        //   })\r\n        //   .catch((e) => {\r\n        //     console.error(e);\r\n        //   });\r\n\r\n        \r\n      }\r\n\r\n\r\n\r\n    \r\n\r\n    \r\n    \r\n\r\n\r\n    return(\r\n        <div>\r\n        <h1>hello Extracheck</h1>\r\n\r\n        <button type=\"button\" onClick={conb}>connect</button>\r\n    \r\n        </div>\r\n\r\n    );\r\n\r\n\r\n    \r\n\r\n}\r\n\r\n\r\n\r\nconst GetAppLocalState = ({who}) => {\r\n    const action = useCallback(async () => {\r\n      try {\r\n        const accts = await AlgoSigner.accounts({\r\n          ledger: 'TestNet'\r\n        });\r\n        const r = await AlgoSigner.indexer({\r\n          ledger: 'TestNet',\r\n          path: `/v2/accounts/${accts[who]['address']}`\r\n        });\r\n        return JSON.stringify(r['account']['apps-local-state'][0]['key-value'][0]['value']['uint'], null, 2);\r\n      } catch (e) {\r\n        console.error(e);\r\n        return JSON.stringify(e, null, 2);\r\n      }\r\n    }, [who]);\r\n  \r\n    return <Extracheck title=\"Get Local State\" buttonText=\"Get Local State\" buttonAction={action}/>\r\n  };\r\n\r\n  \r\n\r\n\r\nexport default Extracheck;"]},"metadata":{},"sourceType":"module"}